# Query: // TODO
# ContextLines: 1

1883 results - 955 files

src\java_tools\buildjar\java\com\google\devtools\build\buildjar\JavaLibraryBuildRequest.java:
  223     */
  224:   // TODO(b/169793789): kill this with fire if javahotswap starts using jars instead of classes
  225    @VisibleForTesting

  267    public ArrayList<Path> getSourceFiles() {
  268:     // TODO(cushon): This is being modified after parsing to add files from source jars.
  269      return sourceFiles;

  292    public List<String> getProcessors() {
  293:     // TODO(bazel-team): This might be modified by a JavaLibraryBuilder to enable specific
  294      // annotation processors.

src\java_tools\buildjar\java\com\google\devtools\build\buildjar\OptionsParser.java:
  180          case "--sourcepath":
  181:           // TODO(#970): Consider whether we want to use --sourcepath for resolving of #970.
  182            collectFlagArguments(sourcePath, argQueue, "-");

src\java_tools\buildjar\java\com\google\devtools\build\buildjar\ReducedClasspathJavaLibraryBuilder.java:
  98        throws IOException {
  99:     // TODO(cushon): warn for transitive classpath fallback
  100  

src\java_tools\buildjar\java\com\google\devtools\build\buildjar\VanillaJavaBuilder.java:
  202      }
  203:     // TODO(cushon): support manifest protos & genjar
  204      if (optionsParser.getManifestProtoPath() != null) {

src\java_tools\buildjar\java\com\google\devtools\build\buildjar\instrumentation\JacocoInstrumentationProcessor.java:
   49      // ignoring filters, they weren't used in the previous implementation
   50:     // TODO(bazel-team): filters should be correctly handled
   51      return new JacocoInstrumentationProcessor(args.get(0));

  119              }
  120:             // TODO(bazel-team): filter with coverage_instrumentation_filter?
  121              // It's not clear whether there is any advantage in not instrumenting *Test classes,

src\java_tools\buildjar\java\com\google\devtools\build\buildjar\javac\BlazeJavacMain.java:
  106      StringWriter errOutput = new StringWriter();
  107:     // TODO(cushon): where is this used when a diagnostic listener is registered? Consider removing
  108      // it and handling exceptions directly in callers.

  231            // don't want about v54 class files when running javac9 on JDK 10
  232:           // TODO(cushon): remove after the next javac update
  233            "compiler.warn.big.major.version",
  234            // don't want about incompatible processor source versions when running javac9 on JDK 10
  235:           // TODO(cushon): remove after the next javac update
  236            "compiler.warn.proc.processor.incompatible.source.version",

  409                    || name.startsWith("dagger.model.")
  410:                   // TODO(b/191812726): Include dagger.spi.model before releasing it to SPI users.
  411                    || (name.startsWith("dagger.spi.") && !name.startsWith("dagger.spi.model."))

src\java_tools\buildjar\java\com\google\devtools\build\buildjar\javac\plugins\dependency\DependencyModule.java:
  259  
  260:     // TODO(b/71936047): it should be an error for requiredClasspath to contain paths that are not
  261      // in originalClasspath

src\java_tools\buildjar\java\com\google\devtools\build\buildjar\javac\plugins\dependency\ImplicitDependencyExtractor.java:
  135    private static class TypeVisitor extends SimpleTypeVisitor7<Void, Void> {
  136:     // TODO(bazel-team): Override the visitor methods we're interested in.
  137    }

src\java_tools\buildjar\java\com\google\devtools\build\buildjar\javac\statistics\BlazeJavacStatistics.java:
  81  
  82:   // TODO(glorioso): We really need to think out more about what data to collect/store here.
  83  

src\java_tools\import_deps_checker\java\com\google\devtools\build\importdeps\DepsCheckerClassVisitor.java:
  110  
  111:       // TODO(kmb): Consider removing this entirely so we don't have to track members at all
  112        AbstractClassEntryState state = checkInternalName(owner);

src\java_tools\import_deps_checker\java\com\google\devtools\build\importdeps\Main.java:
  221      checkArgument(!options.bootclasspath.isEmpty(), "--bootclasspath_entry is required");
  222:     // TODO(cushon): make --jdeps_output mandatory
  223      // checkArgument(

src\java_tools\import_deps_checker\javatests\com\google\devtools\build\importdeps\MainTest.java:
  32  
  33:   @Ignore // TODO(cushon): re-enable after cl/210237269
  34    @Test

src\java_tools\junitrunner\java\com\google\testing\coverage\JacocoCoverageRunner.java:
  190  
  191:     // TODO(bazel-team): Find out where the name of the bundle can pop out in the report.
  192      return coverageBuilder.getBundle("isthisevenused");

src\java_tools\junitrunner\java\com\google\testing\junit\runner\BazelTestRunner.java:
  140  
  141:     // TODO(kush): Use a new classloader for the following instantiation.
  142      JUnit4Runner runner =

src\java_tools\junitrunner\java\com\google\testing\junit\runner\internal\junit4\JUnit4TestXmlListener.java:
  86    public void testIgnored(Description description) throws Exception {
  87:     // TODO(bazel-team) There's a known issue in the JUnit4 ParentRunner that
  88      // fires testIgnored on test suites that are being skipped due to an

src\java_tools\junitrunner\java\com\google\testing\junit\runner\junit4\JUnit4RunnerModule.java:
  63        try {
  64:         // TODO(bazel-team): Change the provider method to return ByteSink or CharSink
  65          return new FileOutputStream(path.toFile());

src\java_tools\junitrunner\java\com\google\testing\junit\runner\model\AntXmlResultWriter.java:
  127      writer.startElement(JUNIT_ELEMENT_TESTSUITE_SYSTEM_OUT);
  128:     // TODO(bazel-team) - where to get this from?
  129      writer.endElement();
  130      writer.startElement(JUNIT_ELEMENT_TESTSUITE_SYSTEM_ERR);
  131:     // TODO(bazel-team) - where to get this from?
  132      writer.endElement();

  146          result.getRunTimeInterval()));
  147:     // TODO(bazel-team) - do we want to report the package name here? Could we simply get it from
  148      // result.getClassName() by stripping the last element of the class name?

src\java_tools\junitrunner\java\com\google\testing\junit\runner\model\TestCaseNode.java:
  177  
  178:   // TODO(bazel-team): Use AtomicReference instead of a synchronized method.
  179    private synchronized boolean compareAndSetState(

src\java_tools\junitrunner\java\com\google\testing\junit\runner\util\SetFactory.java:
  79        assert individualSupplier != null : "Codegen error? Null provider";
  80:       // TODO(ronshapiro): Store a List<? extends Supplier<T>> and avoid the cast to Supplier<T>
  81        individualSuppliers.add((Supplier<T>) individualSupplier);

src\java_tools\junitrunner\java\com\google\testing\junit\runner\util\TestIntegrationsRunnerIntegration.java:
  45    static Callback getCallbackForThread() {
  46:     // TODO(bazel-team): This won't work if the test is running in a different thread from the test
  47      // runner.

src\java_tools\singlejar\java\com\google\devtools\build\singlejar\DefaultJarEntryFilter.java:
  104        // Ignore existing manifests and any .SF, .DSA or .RSA jar signing files.
  105:       // TODO(bazel-team): I think we should be stricter and only skip signing
  106        // files from the META-INF/ directory.

src\java_tools\singlejar\java\com\google\devtools\build\singlejar\ZipCombiner.java:
  566    public boolean containsFile(String filename) {
  567:     // TODO(apell): may be slightly different behavior because v1 returns true on skipped names.
  568      return entries.containsKey(filename);

src\java_tools\singlejar\java\com\google\devtools\build\zip\LocalFileHeader.java:
  48      // the changes we make here take effect.
  49:     // TODO(bazel-team): This seems like a bug. Investigate.
  50      ExtraDataList extra = entry.getExtra();

src\main\cpp\blaze_util_bsd.cc:
  224  bool VerifyServerProcess(int pid, const blaze_util::Path &output_base) {
  225:   // TODO(lberki): This only checks for the process's existence, not whether
  226    // its start time matches. Therefore this might accidentally kill an

src\main\cpp\blaze_util_darwin.cc:
  217  bool VerifyServerProcess(int pid, const blaze_util::Path &output_base) {
  218:   // TODO(lberki): This only checks for the process's existence, not whether
  219    // its start time matches. Therefore this might accidentally kill an

src\main\cpp\blaze_util_posix.cc:
  310  
  311:   // TODO(jmmv): This execution does not respect any settings we might apply
  312    // to the server process with ConfigureDaemonProcess when executed in the

  320        << "execv of '" << exe.AsPrintablePath() << "' failed: " << err;
  321:   // TODO(jmmv): Mark BAZEL_DIE as ATTRIBUTE_NORETURN so that the following
  322    // code is not necessary.

src\main\cpp\blaze_util_windows.cc:
   71  
   72: // TODO(bazel-team): stop using BAZEL_DIE, handle errors on the caller side.
   73  // BAZEL_DIE calls exit(exitcode), which makes it difficult to follow the

  442  string FindSystemWideBlazerc() {
  443:   // TODO(bazel-team): figure out a good path to return here.
  444    return "";

  453  void SetScheduling(bool batch_cpu_scheduling, int io_nice_level) {
  454:   // TODO(bazel-team): There should be a similar function on Windows.
  455  }

  457  std::unique_ptr<blaze_util::Path> GetProcessCWD(int pid) {
  458:   // TODO(bazel-team) 2016-11-18: decide whether we need this on Windows and
  459    // implement or delete.

  758    std::wstring werror;
  759:   // TODO(laszlocsomor): Fix proc.Create to accept paths with UNC prefix.
  760    if (!proc.Create(blaze_util::RemoveUncPrefixMaybe(exe.AsNativePath().c_str()),

  922  void CreateSecureOutputRoot(const blaze_util::Path& path) {
  923:   // TODO(bazel-team): implement this properly, by mimicing whatever the POSIX
  924    // implementation does.

src\main\cpp\blaze_util.h:
  78  // the empty string as cwd.
  79: // TODO(b/109874628): Assess if removing the empty string case would break
  80  // legitimate uses, and if not, remove it.

src\main\cpp\blaze.cc:
   320  
   321: // TODO(laszlocsomor) 2016-11-24: release the `blaze_server` object. Currently
   322  // nothing deletes it. Be careful that some functions may call exit(2) or

   361  
   362:   // TODO(b/109998449): only assume JDK >= 9 for embedded JDKs
   363    if (!startup_options.GetEmbeddedJavabase().IsEmpty()) {

   425  
   426:   // TODO(b/152047869): Test that whatever the list constructed after this line
   427    // is actually a list of parseable startup options.

  1049  static bool IsVolatileArg(const string &arg) {
  1050:   // TODO(ccalvarin) when --batch is gone and the startup_options field in the
  1051    // gRPC message is always set, there is no reason for client options that are

  1423  
  1424:   // TODO(bazel-team):  We've also seen a failure during loading (creating
  1425    // threads?) when ulimit -Hs 8192.  Characterize that and check for it here.

  1586        !blaze_server->Connected()) {
  1587:     // TODO(b/134525510): Connected() can return false when the server process
  1588      // is alive but unresponsive, so bailing early here might not always be the

  1616    //
  1617:   // TODO(aldersondrive): This hack is unnecessary on FreeBSD, but the relevant
  1618    // OpenJDK code doesn't seem to include anything FreeBSD-specific.

  1947  
  1948:   // TODO(b/111179585): Swallowing these responses loses potential messages from
  1949    // the server, which may be useful in understanding why a shutdown failed.

src\main\cpp\option_processor-internal.h:
  43  // previous version of Bazel.
  44: // TODO(b/3616816): Remove this once the warning is no longer useful.
  45  std::set<std::string> GetOldRcPaths(

src\main\cpp\option_processor.cc:
  281        // differentiate.
  282:       // TODO(bazel-team): fix RcFile to reclassify unreadable files that were
  283        // read from a recursive call due to a malformed import.

  343  
  344: // TODO(#4502) Consider simplifying result_rc_files to a vector of RcFiles, no
  345  // unique_ptrs.

  437    // require additional transformation.
  438:   // TODO(b/36168162): Remove this warning along with
  439    // internal::GetOldRcPaths and internal::FindLegacyUserBazelrc after

src\main\cpp\rc_file.cc:
  88      // as an escape character.
  89:     // TODO(bazel-team): This function silently ignores
  90      // dangling backslash escapes and missing end-quotes.

src\main\cpp\server_process_info.cc:
  33        jvm_log_file_append_(!server_jvm_out.IsEmpty()),
  34:       // TODO(b/69972303): Formalize the "no server" magic value or rm it.
  35        server_pid_(-1) {}

src\main\cpp\server_process_info.h:
  41  
  42:   // TODO(laszlocsomor) 2016-11-28: move pid_t usage out of here and wherever
  43    // else it appears. Find some way to not have to declare a pid_t here, either

src\main\cpp\startup_options.cc:
  285               nullptr) {
  286:     // TODO(bazel-team): Consider examining the javabase and re-execing in case
  287      // of architecture mismatch.

src\main\cpp\startup_options.h:
   58  //
   59: // TODO(bazel-team): The encapsulation is not quite right -- there are some
   60  // places in blaze.cc where some of these fields are explicitly modified. Their

   72    //
   73:   // TODO(jmmv): Now that we support site-specific options via subclasses of
   74    // StartupOptions, the "ExtraOptions" concept makes no sense; remove it.

  294    //
  295:   // TODO(jmmv): Now that we support site-specific options via subclasses of
  296    // StartupOptions, the "ExtraOptions" concept makes no sense; remove it.

src\main\cpp\workspace_layout.cc:
  69      const std::vector<std::string> &startup_args) const {

src\main\cpp\util\errors.h:
  14  //
  15: // TODO(b/32967056) die() and pdie() are really error statements with an exit;
  16  //    these can be removed once logging is on by default.

src\main\cpp\util\file_platform.h:
  41    // Returns false otherwise, or if querying the information failed.
  42:   // TODO(laszlocsomor): move this function, and with it the whole IFileMtime
  43    // class into blaze_util_<platform>.cc, because it is Bazel-specific logic,

src\main\cpp\util\file_windows.cc:
   87      if (error != nullptr) {
   88:       // TODO(laszlocsomor): handle the error mode that is errno=EINTR on Linux.
   89        *error = result ? IPipe::SUCCESS : IPipe::OTHER_ERROR;

  248    if (error != nullptr) {
  249:     // TODO(laszlocsomor): handle the error cases that are errno=EINTR and
  250      // errno=EAGAIN on Linux.

  286    }
  287:   // TODO(laszlocsomor): remove the following check; it won't allow opening NUL.
  288    if (path.IsNull()) {

  351  
  352:   // TODO(laszlocsomor): respect `perm` and set the file permissions accordingly
  353    DWORD actually_written = 0;

  645  bool MakeDirectories(const string& path, unsigned int mode) {
  646:   // TODO(laszlocsomor): respect `mode` to the extent that it's possible on
  647    // Windows; it's currently ignored.

src\main\cpp\util\path_platform.h:
  124  
  125: // TODO(bazel-team) consider changing the path(_platform) header split to be a
  126  // path.h and path_windows.h split, which would make it clearer what functions

src\main\cpp\util\port.h:
  138  #ifdef _WIN32
  139: // TODO(laszlocsomor) 2016-11-28: move pid_t usage out of global_variables.h and
  140  // wherever else it appears. Find some way to not have to declare a pid_t here,

src\main\java\com\google\devtools\build\docgen\ApiExporter.java:
  349        // f (..., *, ... )  or  f(..., *args, ...)
  350:       // TODO(adonovan): this logic looks fishy. Clean it up.
  351        if (param.named() && !param.positional() && !hasStar) {

src\main\java\com\google\devtools\build\docgen\DocCheckerUtils.java:
  28  
  29:   // TODO(bazel-team): remove elements from this list and clean up the tested documentations.
  30    private static final ImmutableSet<String> UNCHECKED_HTML_TAGS = ImmutableSet.<String>of(

  56  
  57:   // TODO(bazel-team): run this on the Starlark docs too.
  58    @Nullable

src\main\java\com\google\devtools\build\docgen\MultiPageBuildEncyclopediaProcessor.java:
  62    private void writeStaticDoc(String outputDir, String name) throws IOException {
  63:     // TODO(dzc): Consider splitting out the call to writePage so that this method only creates the
  64      // Page object and adding docgen tests that test the state of Page objects constructed by

src\main\java\com\google\devtools\build\docgen\RuleLinkExpander.java:
  28   */
  29: // TODO(fwe): rename to LinkExpander
  30: // TODO(fwe): prefix rule links with BE root?
  31  public class RuleLinkExpander {

src\main\java\com\google\devtools\build\docgen\SourceFileReader.java:
  107            public void readLineImpl(String line) throws BuildEncyclopediaDocException {
  108:             // TODO(bazel-team): check if copy paste code can be reduced using inner classes
  109              if (inBlazeRuleDocs) {

src\main\java\com\google\devtools\build\docgen\annot\DocCategory.java:
  22  
  23:   // TODO(adonovan): be more rigorous about distinguishing providers
  24    // from provider instances (aka structs/infos).

src\main\java\com\google\devtools\build\docgen\starlark\StarlarkDocUtils.java:
  30    public static String substituteVariables(String documentation, String beRoot) {
  31:     // TODO(b/193923321): Get rid of $STARLARK_DOCS_ROOT and of this entire class, eventually.
  32      return documentation

src\main\java\com\google\devtools\build\docgen\starlark\StarlarkParamDoc.java:
  42        ParamType paramType = param.allowedTypes()[i];
  43:       // TODO(adonovan): make generic1 an array.
  44        if (paramType.generic1() == Object.class) {

src\main\java\com\google\devtools\build\lib\actions\AbstractAction.java:
   82     */
   83:   // TODO(ulfjack): Collect actual data to confirm that this is an acceptable approximation.
   84    public static final ResourceSet DEFAULT_RESOURCE_SET = ResourceSet.createWithRamCpu(250, 1);

  397    public void repr(Printer printer) {
  398:     printer.append(prettyPrint()); // TODO(bazel-team): implement a readable representation
  399    }

  429  
  430:     // TODO(b/185277726): Either we don't need a path resolver for actual deletion of output
  431      //  artifacts (likely) or we need to transform the fragments below (and then the resolver should

  524              && metadataProvider.getMetadata(input).getType().isDirectory()) {
  525:           // TODO(ulfjack): What about dependency checking of special files?
  526            eventHandler.handle(

src\main\java\com\google\devtools\build\lib\actions\ActionAnalysisMetadata.java:
  239      // Use a different type to allow overriding keys.
  240:     // TODO(jcater): When ImmutableMap.Builder.buildKeepingLast is in released guava, upgrade and
  241      // use that.

src\main\java\com\google\devtools\build\lib\actions\ActionCacheChecker.java:
  435        throws InterruptedException {
  436:     // TODO(bazel-team): (2010) For RunfilesAction/SymlinkAction and similar actions that
  437      // produce only symlinks we should not check whether inputs are valid at all - all that matters

  571  
  572:   // TODO(ulfjack): It's unclear to me why we're ignoring all IOExceptions. In some cases, we want
  573    // to trigger a re-execution, so we should catch the IOException explicitly there. In others, we

src\main\java\com\google\devtools\build\lib\actions\ActionContext.java:
  26     */
  27:   // TODO(schmitt): Remove once contexts are only instantiated if used, the callback can then be
  28    //  done upon construction.

src\main\java\com\google\devtools\build\lib\actions\ActionEnvironment.java:
  159     */
  160:   // TODO(ulfjack): Migrate all production code to use the proper action environment, and then make
  161    // this @VisibleForTesting or rename it to clarify.

src\main\java\com\google\devtools\build\lib\actions\ActionExecutedEvent.java:
  152      ImmutableList.Builder<LocalFile> localFiles = ImmutableList.builder();
  153:     // TODO(b/199940216): thread file metadata through here when possible.
  154      if (stdout != null) {

  189      if (exception != null) {
  190:       // TODO(b/150405553): This statement seems to be confused. The exit_code field of
  191        //  ActionExecuted is documented as "The exit code of the action, if it is available."

src\main\java\com\google\devtools\build\lib\actions\ActionInputHelper.java:
  36  
  37:     // TODO(lberki): Plumb this flag from InputTree.build() somehow.
  38      @Override

src\main\java\com\google\devtools\build\lib\actions\AggregatedSpawnMetrics.java:
  157      // For now keep compatibility with the old output and only report the remote execution.
  158:     // TODO(michalt): Change this once the local and worker executions populate more metrics.
  159      return SpawnMetrics.ExecKind.REMOTE + " " + getRemoteMetrics().toString(total, summary);

src\main\java\com\google\devtools\build\lib\actions\Artifact.java:
  888        //
  889:       // TODO(blaze-team): this is misleading because execution_root isn't unique. Dig the
  890        // workspace name out and print that also.

src\main\java\com\google\devtools\build\lib\actions\ArtifactFactory.java:
  167      Preconditions.checkNotNull(owner, "%s %s", execPath, root);
  168:     // TODO(jungjw): Come up with a more reliable way to distinguish external source roots.
  169      ArtifactRoot artifactRoot =

  200          root);
  201:     // TODO(bazel-team): this should only accept roots from derivedRoots.
  202      //Preconditions.checkArgument(derivedRoots.contains(root), "%s not in %s", root, derivedRoots);

  211     */
  212:   // TODO(bazel-team): Don't allow root == execRootParent.
  213    public Artifact.DerivedArtifact getDerivedArtifact(

src\main\java\com\google\devtools\build\lib\actions\Artifacts.java:
  27  
  28:   // TODO(bazel-team): Add option to sort collection of artifacts before adding to fingerprint?
  29    /** Appends a description of a complete collection of {@link Artifact} to the fingerprint. */

src\main\java\com\google\devtools\build\lib\actions\BaseSpawn.java:
  68    public ImmutableList<String> getArguments() {
  69:     // TODO(bazel-team): this method should be final, as the correct value of the args can be
  70      // injected in the ctor.

  87        ImmutableMap.Builder<String, String> env = ImmutableMap.builder();
  88:       // TODO(bazel-team): Unify these into a single env variable.
  89        String runfilesRootString = runfilesRoot.getPathString();

src\main\java\com\google\devtools\build\lib\actions\CommandLineItem.java:
  78    static String expandToCommandLine(Object object) {
  79:     // TODO(b/150322434): The fallback on toString() isn't great. Particularly so for
  80      // StarlarkCustomCommandLine, since toString() does not necessarily give the same results as

src\main\java\com\google\devtools\build\lib\actions\FileArtifactValue.java:
   82    /** Returns the file's size, or 0 if the underlying file system object is not a file. */
   83:   // TODO(ulfjack): Throw an exception if it's not a file.
   84    public abstract long getSize();

   91  
   92:   // TODO(lberki): This is only used by FileArtifactValue itself. It seems possible to remove this.
   93    public abstract FileContentsProxy getContentsProxy();

   96    public byte[] getValueFingerprint() {
   97:     // TODO(janakr): return fingerprint in other cases: symlink, directory.
   98      return getDigest();

  131     */
  132:   // TODO(lberki): This is very similar to couldBeModifiedSince(). Check if we can unify these.
  133    public abstract boolean wasModifiedSinceDigest(Path path) throws IOException;

  138     */
  139:   // TODO(lberki): This is very similar to wasModifiedSinceDigest(). Check if we can unify these.
  140    public boolean couldBeModifiedSince(FileArtifactValue lastKnown) {

  435      public boolean wasModifiedSinceDigest(Path path) {
  436:       // TODO(ulfjack): Ideally, we'd attempt to detect intra-build modifications here. I'm
  437        // consciously deferring work here as this code will most likely change again, and we're

src\main\java\com\google\devtools\build\lib\actions\FilesetManifest.java:
  240          } else if (actual != null) {
  241:           // TODO(b/113128395): throw here.
  242            logger.atWarning().log("Symlink %s forms a symlink cycle: %s", location, seen);

  246            // runfiles, which is the only time this code is hit.
  247:           // TODO(b/113128395): throw here.
  248            logger.atWarning().log(

src\main\java\com\google\devtools\build\lib\actions\FilesetTraversalParams.java:
  48  
  49:     // TODO(bazel-team): deprecate CROSS and REPORT_ERROR in favor of DONT_CROSS. Clean up the depot
  50      // and lock down the semantics of FilesetEntry.srcdir to only accept other Filesets or BUILD

src\main\java\com\google\devtools\build\lib\actions\MiddlemanAction.java:
  62        Fingerprint fp) {
  63:     // TODO(bazel-team): Need to take middlemanType into account here.
  64      // Only the set of inputs matters, and the dependency checker is

src\main\java\com\google\devtools\build\lib\actions\PathStripper.java:
  336        if (!rootRelativePaths.add(input.getExecPath().subFragment(2))) {
  337:         // TODO(bazel-team): don't fail on duplicate inputs, i.e. when the same exact exec path
  338          // (including config prefix) is included twice.

src\main\java\com\google\devtools\build\lib\actions\ResourceManager.java:
  344  
  345:   // TODO (b/241066751) find better way to change resource ownership
  346    public void releaseResourceOwnership() {

  409  
  410:     // TODO(bazel-team): (2010) rounding error can accumulate and value below can end up being
  411      // e.g. 1E-15. So if it is small enough, we set it to 0. But maybe there is a better solution.

src\main\java\com\google\devtools\build\lib\actions\RunfilesSupplier.java:
  25  /** Convenience wrapper around runfiles allowing lazy expansion. */
  26: // TODO(bazel-team): Ideally we could refer to Runfiles objects directly here, but current package
  27  // structure makes this difficult. Consider moving things around to make this possible.

src\main\java\com\google\devtools\build\lib\actions\SandboxedSpawnStrategy.java:
  60        ActionExecutionContext actionExecutionContext,
  61:       // TODO(jmmv): Inject an empty lambda instead of allowing this to be null. Need to find a way
  62        // to deal with non-null implying speculation in e.g. AbstractSpawnStrategy (if it matters).

src\main\java\com\google\devtools\build\lib\actions\SpawnMetrics.java:
  358        Preconditions.checkNotNull(execKind, "ExecKind must be explicitly set using `setExecKind`");
  359:       // TODO(ulfjack): Add consistency checks here?
  360        return new SpawnMetrics(this);

src\main\java\com\google\devtools\build\lib\actions\SpawnResult.java:
  147     */
  148:   // TODO(mschaller): clean up all uses of this method when {@code !this.setupSuccess()}
  149    int exitCode();

  237     */
  238:   // TODO(b/181317827) implement for windows systems.
  239    Optional<Long> getMemoryInKb();

src\main\java\com\google\devtools\build\lib\actions\SpawnStrategy.java:
  24   */
  25: // TODO(blaze-team): If possible, merge this with AbstractSpawnStrategy and SpawnRunner. The former
  26  //  because (almost?) all implementations of this interface extend it; the latter because it forms

  75     */
  76:   // TODO(katre): Remove once strategies are only instantiated if used, the callback can then be
  77    //  done upon construction.

src\main\java\com\google\devtools\build\lib\actions\cache\CompactPersistentActionCache.java:
  155      @Override
  156:     // TODO(bazel-team): (2010) This method, writeKey() and related Metadata methods
  157      // should really use protocol messages. Doing so would allow easy inspection

src\main\java\com\google\devtools\build\lib\analysis\AnalysisEnvironment.java:
  102    /** Returns the middleman factory associated with the build. */
  103:   // TODO(bazel-team): remove this method and replace it with delegate methods.
  104    MiddlemanFactory getMiddlemanFactory();

  141     */
  142:   // TODO(#11437): Update docstring once injection can no longer be disabled.
  143    ImmutableMap<String, Object> getStarlarkDefinedBuiltins() throws InterruptedException;

src\main\java\com\google\devtools\build\lib\analysis\AnalysisUtils.java:
   90  
   91:   // TODO(bazel-team): These need Iterable<? extends TransitiveInfoCollection> because they need to
   92    // be called with Iterable<ConfiguredTarget>. Once the configured target lockdown is complete, we

  220        if (targetAndConfig.getConfiguration() != null) {
  221:         // TODO(bazel-team): support top-level aspects
  222          asDeps.put(

src\main\java\com\google\devtools\build\lib\analysis\AspectResolver.java:
  73          try {
  74:           // TODO(ulfjack): Catch all thrown AspectCreationException and NoSuchThingException
  75            // instances and merge them into a single Exception to get full root cause data.

src\main\java\com\google\devtools\build\lib\analysis\BaseRuleClasses.java:
  114  
  115:   // TODO(b/65746853): provide a way to do this without passing the entire configuration
  116    /**

  163  
  164:   // TODO(b/65746853): provide a way to do this without passing the entire configuration
  165    /** Implementation for the :run_under attribute. */

  297    /** Share common attributes across both base and Starlark base rules. */
  298:   // TODO(bazel-team): replace this with a common RuleDefinition ancestor of NativeBuildRule
  299    // and StarlarkRuleClassFunctions.baseRule. This requires refactoring StarlarkRuleClassFunctions

  369                  .allowedFileTypes(FileTypeSet.NO_FILE)
  370:                 // TODO(b/148601291): Require provider to be "LicenseInfo".
  371                  .dontCheckConstraints()

src\main\java\com\google\devtools\build\lib\analysis\BlazeDirectories.java:
   71  public final class BlazeDirectories {
   72:   // TODO(bazel-team): is there actually any reason to put build-info files here? Can we at least
   73    //  give the directory a better name?

  108        if (useDefaultExecRootName) {
  109:         // TODO(bazel-team): if workspace is null execRoot should be null, but at the moment there
  110          // is a lot of code that depends on it being non-null.

src\main\java\com\google\devtools\build\lib\analysis\BuildView.java:
  241      // Configuration creation.
  242:     // TODO(gregce): Consider dropping this phase and passing on-the-fly target / host configs as
  243      // needed. This requires cleaning up the invalidation in SkyframeBuildView.setConfigurations.

  298        if (delimiterPosition >= 0) {
  299:         // TODO(jfield): For consistency with Starlark loads, the aspect should be specified
  300          // as an absolute label.

  453      if (includeExecutionPhase) {
  454:       // TODO(b/199053098): Also consider targets with errors like below.
  455        result =

  580      }
  581:     // TODO(cparsons): If extra actions are ever removed, this filtering step can probably be
  582      //  removed as well: the only concern would be action conflicts involving coverage artifacts,

src\main\java\com\google\devtools\build\lib\analysis\CachingAnalysisEnvironment.java:
   71    private SkyFunction.Environment skyframeEnv;
   72:   // TODO(bazel-team): Should this be nulled out by disable()? Alternatively, does disable() even
   73    // need to exist?

  393    /** Thrown in case of a missing build info key. */
  394:   // TODO(ulfjack): It would be better for this to be a checked exception, which requires updating
  395    // all callers to pass the exception through.

src\main\java\com\google\devtools\build\lib\analysis\CommonPrerequisiteValidator.java:
  115                || description.contains("PackageSpecificationInfo");
  116:       // TODO(plf): Add the PackageSpecificationProvider to the 'visibility' attribute.
  117        if (!attrName.equals("visibility")

src\main\java\com\google\devtools\build\lib\analysis\ConfigurationMakeVariableContext.java:
  63  
  64:   // TODO(b/37567440): Remove when Starlark callers can be updated to get this from
  65    // CcToolchainProvider. We should use CcCommon.CC_TOOLCHAIN_ATTRIBUTE_NAME, but we didn't want to

src\main\java\com\google\devtools\build\lib\analysis\ConfiguredRuleClassProvider.java:
  174  
  175:     // TODO(b/192694287): Remove once we migrate all tests from the allowlist
  176      @Nullable private Label networkAllowlistForTests;

  683  
  684:   // TODO(b/192694287): Remove once we migrate all tests from the allowlist
  685    @Nullable private final Label networkAllowlistForTests;

src\main\java\com\google\devtools\build\lib\analysis\ConfiguredTargetFactory.java:
  360          if (ruleClass.isStarlark()) {
  361:           // TODO(bazel-team): maybe merge with RuleConfiguredTargetBuilder?
  362            target =

  589  
  590:     // TODO(b/242887801): builder.build() could potentially return null; in that case, should we
  591      // throw an exception, as erroredConfiguredTarget does, to avoid propagating the error to an

  617  
  618:       // TODO(b/242887801): builder.build() could potentially return null; in that case, should we
  619        // throw an exception, as erroredConfiguredTarget does, to avoid propagating the error to an

src\main\java\com\google\devtools\build\lib\analysis\DependencyResolver.java:
  208  
  209:     // TODO(bazel-team): Figure out a way to implement the below (and partiallyResolveDependencies)
  210      // using LabelVisitationUtils.

  282          // a missing toolchain a bit better.
  283:         // TODO(lberki): This special-casing is weird. Find a better way to depend on toolchains.
  284          // This logic needs to stay in sync with the dep finding logic in

  343        Label executionPlatformLabel = null;
  344:       // TODO(jcater): refactor this nested if structure into something simpler.
  345        if (toolchainContexts != null) {

  621      Class<FragmentT> fragmentClass = lateBoundDefault.getFragmentClass();
  622:     // TODO(b/65746853): remove this when nothing uses it anymore
  623      if (BuildConfigurationValue.class.equals(fragmentClass)) {

src\main\java\com\google\devtools\build\lib\analysis\EventHandlingErrorReporter.java:
  39    private void reportError(Location location, String message) {
  40:     // TODO(ulfjack): Consider generating the error message from the root cause event rather than
  41      // the other way round.

src\main\java\com\google\devtools\build\lib\analysis\Expander.java:
  62      this.labelMap = labelMap;
  63:     // TODO(https://github.com/bazelbuild/bazel/issues/11221): Eliminate all methods that construct
  64      // an Expander from an existing Expander. These make it hard to keep lookeduUpVariables correct.

src\main\java\com\google\devtools\build\lib\analysis\PlatformConfiguration.java:
  56      PlatformOptions platformOptions = buildOptions.get(PlatformOptions.class);
  57:     // TODO(https://github.com/bazelbuild/bazel/issues/6519): Implement true multiplatform builds.
  58      if (platformOptions.platforms.size() > 1) {

src\main\java\com\google\devtools\build\lib\analysis\PlatformOptions.java:
   39  
   40:   // TODO(https://github.com/bazelbuild/bazel/issues/6849): After migration, set the defaults
   41    // directly.

  100        },
  101:       // TODO(blaze-configurability-team): add OptionMetadataTag.EXPLICIT_IN_OUTPUT_PATH
  102        //   after fixing platform name determination (currently not sufficiently unique).

  247      // Handle default values for the host and target platform.
  248:     // TODO(https://github.com/bazelbuild/bazel/issues/6849): After migration, set the defaults
  249      // directly.

  264      // Handle default values for the host and target platform.
  265:     // TODO(https://github.com/bazelbuild/bazel/issues/6849): After migration, set the defaults
  266      // directly.

src\main\java\com\google\devtools\build\lib\analysis\RuleContext.java:
   261        } else if (feature.equals("no_layering_check")) {
   262:         // TODO(bazel-team): Remove once we do not have BUILD files left that contain
   263          // 'no_layering_check'.

   463        ConfigurationTransition transition) {
   464:     // TODO(bazel-team): The fragments can also be accessed directly through
   465      // BuildConfigurationValue. Can we lock that down somehow?

   633      Target target = getTarget();
   634:     // TODO(laszlocsomor): Use the execution platform, not the host platform.
   635      boolean isExecutedOnWindows = OS.getCurrent() == OS.WINDOWS;

   881          // The split transition is not active, i.e. does not change build configurations.
   882:         // TODO(jungjw): Investigate if we need to do a check here.
   883          return ImmutableMap.of(Optional.absent(), deps);

   994          && attributes().getAttributeDefinition(attributeName).getTransitionFactory().isSplit()) {
   995:       // TODO(b/168038145): Restore legacy behavior of returning the prerequisites from the first
   996        // portion of the split transition.

  1372     */
  1373:   // TODO(b/165916637): Fix callers to this method to use getPrerequisiteArtifact instead.
  1374    public Artifact getHostPrerequisiteArtifact(String attributeName) {

  1520     */
  1521:   // TODO(bazel-team): Consider removing contentBasedPath stuff, which is unused as of 18 months
  1522    // after its introduction in cl/252148134.

  1768  
  1769:         // TODO(adonovan): define in terms of Starlark.len?
  1770          boolean isEmpty = false;

  2266      protected String getMacroMessageAppendix(String unusedAttrName) {
  2267:       // TODO(b/141234726):  Historically this reported the location
  2268        // of the rule attribute in the macro call (assuming no **kwargs),

src\main\java\com\google\devtools\build\lib\analysis\RuleErrorConsumer.java:
  55     */
  56:   // TODO(bazel-team): Consider not throwing and instead just returning the exception, thereby
  57    // forcing the caller to use the throw statement instead of abstracting the control flow (which

src\main\java\com\google\devtools\build\lib\analysis\Runfiles.java:
   402  
   403:     // TODO(bazel-team): Create /dev/null-like Artifact to avoid nulls?
   404      for (PathFragment extraPath : emptyFilesSupplier.getExtraPaths(manifest.keySet())) {

   983          // FileConfiguredTarget instances.
   984:         // TODO(bazel-team): This is a terrible hack. We should be able to make this go away
   985          // by implementing RunfilesProvider on FileConfiguredTarget. We'd need to be mindful

  1028        return Iterables.concat(
  1029:           // TODO(bazel-team): This line shouldn't be here. Removing it requires that no rules have
  1030            // dependent rules in srcs (except for filegroups and such), but always in deps.
  1031:           // TODO(bazel-team): DONT_CHECK is not optimal here. Rules that use split configs need to
  1032            // be changed not to call into here.

src\main\java\com\google\devtools\build\lib\analysis\ServerDirectories.java:
  47  
  48:   // TODO(bazel-team): Use a builder to simplify/unify these constructors. This makes it easier to
  49    // have sensible defaults, e.g. execRootBase = outputBase + "/execroot". Then reorder the fields

  68          // Some tests set installBase to null.
  69:         // TODO(bazel-team): Be more consistent about whether nulls are permitted. (e.g. equals()
  70          // presently doesn't tolerate them for some fields). We should probably just disallow them.

src\main\java\com\google\devtools\build\lib\analysis\TargetCompleteEvent.java:
  264    public Iterable<Artifact> getLegacyFilteredImportantArtifacts() {
  265:     // TODO(ulfjack): This duplicates code in ArtifactsToBuild.
  266      NestedSetBuilder<Artifact> builder = NestedSetBuilder.stableOrder();

  317  
  318:   // TODO(aehlig): remove as soon as we managed to get rid of the deprecated "important_output"
  319    // field.

  371        if (OS.getCurrent() != OS.WINDOWS) {
  372:         // TODO(b/36360490): Unix file names are currently always Latin-1 strings, even if they
  373          // contain UTF-8 bytes. Protobuf specifies string fields to contain UTF-8 and passing a

  429        for (Artifact artifact : baselineCoverageArtifacts.toList()) {
  430:         // TODO(b/199940216): Coverage artifacts don't have metadata available.
  431          builder.add(

  472      }
  473:     // TODO(aehlig): remove direct reporting of artifacts as soon as clients no longer need it.
  474      if (converters.getOptions().legacyImportantOutputs) {

src\main\java\com\google\devtools\build\lib\analysis\TopLevelArtifactHelper.java:
  246    public static boolean shouldConsiderForDisplay(ConfiguredTarget configuredTarget) {
  247:     // TODO(bazel-team): this is quite ugly. Add a marker provider for this check.
  248      if (configuredTarget instanceof InputFileConfiguredTarget) {

src\main\java\com\google\devtools\build\lib\analysis\TransitiveInfoProviderMapBuilder.java:
  27  
  28:   // TODO(arielb): share the instance with the outerclass and copy on write instead?
  29    private final LinkedHashMap<Object, Object> providers = new LinkedHashMap<>();

  54  
  55:     // TODO(arielb): throw an exception if the providerClass is already present?
  56      // This is enforced by aspects but RuleConfiguredTarget presents violations

  64      Preconditions.checkNotNull(classObject);
  65:     // TODO(bazel-team): VisibilityProvider should be migrated to Info to avoid the
  66      //  PackageSpecificationInfo check. Perhaps as part of a wider effort to migrate all native

src\main\java\com\google\devtools\build\lib\analysis\WorkspaceStatusAction.java:
  107  
  108:     // TODO(ulfjack): Maybe move these to a separate ActionContext interface?
  109      WorkspaceStatusAction.Options getOptions();

src\main\java\com\google\devtools\build\lib\analysis\actions\CustomCommandLine.java:
  1275        super(arguments, substitutionMap);
  1276:       // TODO(https://github.com/bazelbuild/bazel/issues/6526): outputRoot is just an indirect
  1277        // reference to "bazel-out". Java-heavy builds keep enough CustomCommandLine objects in memory

src\main\java\com\google\devtools\build\lib\analysis\actions\LauncherFileWriteAction.java:
  74    public DeterministicWriter newDeterministicWriter(ActionExecutionContext ctx) {
  75:     // TODO(laszlocsomor): make this code check for the execution platform, not the host platform,
  76      // once Bazel supports distinguishing between the two.

src\main\java\com\google\devtools\build\lib\analysis\actions\LazyWritePathsFileAction.java:
  49        boolean includeDerivedArtifacts) {
  50:     // TODO(ulfjack): It's a bad idea to have these two constructors do slightly different things.
  51      super(owner, files, output, false);

src\main\java\com\google\devtools\build\lib\analysis\actions\SpawnAction.java:
  581    public final ImmutableMap<String, String> getIncompleteEnvironmentForTesting() {
  582:     // TODO(ulfjack): AbstractAction should declare getEnvironment with a return value of type
  583      // ActionEnvironment to avoid developers misunderstanding the purpose of this method. That

src\main\java\com\google\devtools\build\lib\analysis\actions\SpawnActionTemplate.java:
  337      @CanIgnoreReturnValue
  338:     @Deprecated // TODO(ulfjack): Add env variables to the common environment, rather than replacing
  339      // it wholesale, which ignores --action_env (unless the client code explicitly handles it).

src\main\java\com\google\devtools\build\lib\analysis\actions\Substitution.java:
  45    /* Not intended for use in production code */
  46:   // TODO(hvd): migrate usages and delete
  47    @VisibleForTesting

src\main\java\com\google\devtools\build\lib\analysis\config\AutoCpuConverter.java:
  32      if (input.isEmpty()) {
  33:       // TODO(philwo) - replace these deprecated names with more logical ones (e.g. k8 becomes
  34        // linux-x86_64, darwin includes the CPU architecture, ...).

src\main\java\com\google\devtools\build\lib\analysis\config\BuildConfigurationValue.java:
  246      // These should be documented in the build encyclopedia.
  247:     // TODO(configurability-team): Deprecate TARGET_CPU in favor of platforms.
  248      globalMakeEnv =

  653     */
  654:   // TODO(ulfjack): Just return the merged action and test action environment here?
  655    public ActionEnvironment getTestActionEnvironment() {

  787  
  788:   // TODO(buchgr): Revisit naming and functionality of this flag. See #9248 for details.
  789    public static boolean runfilesEnabled(CoreOptions options) {

src\main\java\com\google\devtools\build\lib\analysis\config\BuildOptions.java:
   64  /** Stores the command-line options from a set of configuration fragments. */
   65: // TODO(janakr): If overhead of FragmentOptions class names is too high, add constructor that just
   66  // takes fragments and gets names from them.

  543      private final Map<Label, Object> starlarkFirst = new LinkedHashMap<>();
  544:     // TODO(b/112041323): This should also be multimap but we don't diff multiple times with
  545      // Starlark options anywhere yet so add that feature when necessary.

src\main\java\com\google\devtools\build\lib\analysis\config\CompilationMode.java:
  20  /** This class represents the debug/optimization mode the binaries will be built for. */
  21: // TODO(bazel-team): Implementing StarlarkValue is a workaround until a well-defined Java-Starlark
  22  // conversion interface has been created. Avoid replicating this workaround.

src\main\java\com\google\devtools\build\lib\analysis\config\ConfigurationResolver.java:
  280          String transitionKey = entry.getKey();
  281:         // TODO(blaze-configurability-team): Should be able to just use BuildConfigurationKey
  282          BuildConfigurationValue configuration =

  449     */
  450:   // TODO(bazel-team): error out early for targets that fail - failed configuration evaluations
  451    //   should never make it through analysis (and especially not seed ConfiguredTargetValues)
  452:   // TODO(gregce): merge this more with resolveConfigurations? One crucial difference is
  453    //   resolveConfigurations can null-return on missing deps since it executes inside Skyfunctions.

src\main\java\com\google\devtools\build\lib\analysis\config\CoreOptions.java:
  340  
  341:   // TODO(bazel-team): The test environment is actually computed in BlazeRuntime and this option
  342    // is not read anywhere else. Thus, it should be in a different options class, preferably one

  358  
  359:   // TODO(bazel-team): The set of available variables from the client environment for actions
  360    // is computed independently in CommandEnvironment to inject a more restricted client

src\main\java\com\google\devtools\build\lib\analysis\config\DependencyEvaluationException.java:
  60      // Calling logic doesn't provide an opportunity for this dependency to report its own error.
  61:     // TODO(bazel-team): clean up the calling logic to eliminate this distinction.
  62      this(cause, /*detailedExitCode=*/ null, cause.getLocation(), /*depReportedOwnError=*/ false);

src\main\java\com\google\devtools\build\lib\analysis\config\ExecutionTransitionFactory.java:
  159        coreOptions = result.get(CoreOptions.class);
  160:       // TODO(blaze-configurability-team): These updates probably requires a bit too much knowledge
  161        //   of exactly how the immutable state and mutable state of BuildOptions is interacting.

src\main\java\com\google\devtools\build\lib\analysis\config\FragmentFactory.java:
  57    // Cache with weak values can't have null values.
  58:   // TODO(blaze-configurability-team): At the moment, the only time shouldInclude is false is when
  59    //   TestFragment is constructed without TestOptions, which is already being registered as a

src\main\java\com\google\devtools\build\lib\analysis\config\FragmentOptions.java:
  80    /** Tracks limitations on referring to an option in a {@code config_setting}. */
  81:   // TODO(bazel-team): There will likely also be a need to customize whether or not an option is
  82    // visible to users for setting on the command line (or perhaps even in a test of a Starlark

src\main\java\com\google\devtools\build\lib\analysis\config\OutputDirectories.java:
  254      // e.g., execroot/mainRepoName/bazel-out/[repoName/]config/bin
  255:     // TODO(jungjw): Ideally, we would like to do execroot_base/repoName/bazel-out/config/bin
  256      // instead. However, it requires individually symlinking the top-level elements of external

  328    String getHostPathSeparator() {
  329:     // TODO(bazel-team): Maybe do this in the constructor instead? This isn't serialization-safe.
  330      return OS.getCurrent() == OS.WINDOWS ? ";" : ":";

src\main\java\com\google\devtools\build\lib\analysis\config\StarlarkDefinedConfigTransition.java:
  401       */
  402:     // TODO(bazel-team): integrate dict-of-dicts return type with ctx.split_attr
  403      @Nullable

  412          thread.setPrintHandler(Event.makeDebugPrintHandler(handler));
  413:         // TODO(brandjon): If the resulting values of Starlark transitions ever evolve to be
  414          //  complex Starlark objects like structs as opposed to the ints, strings,

  439        } catch (UnreadableInputSettingException ex) {
  440:         // TODO(blaze-configurability-team): Ideally, the error would happen (and thus location)
  441          //   at the transition() call during loading phase. Instead, error happens at the impl

  485          } catch (EvalException | ValidationException ex) {
  486:           // TODO(adonovan): explain "want dict<string, any> or dict<string, dict<string, any>>".
  487            errorf(handler, "invalid result from transition function: %s", ex.getMessage());

  499                Sequence.cast(result, Dict.class, "dictionary of options dictionaries")) {
  500:             // TODO(b/146347033): Document this behavior.
  501              Map<String, Object> rawDict =

  507          } catch (EvalException | ValidationException ex) {
  508:           // TODO(adonovan): explain "want sequence of dict<string, any>".
  509            errorf(handler, "invalid result from transition function: %s", ex.getMessage());

src\main\java\com\google\devtools\build\lib\analysis\config\StarlarkTransitionCache.java:
  75          StarlarkTransition.addDefaultStarlarkOptions(fromOptions, transition, details);
  76:     // TODO(bazel-team): Add safety-check that this never mutates fromOptions.
  77      StoredEventHandler handlerWithErrorStatus = new StoredEventHandler();

  85      //
  86:     // TODO(bazel-team): harden StarlarkTransition.validate so we can eliminate this step.
  87      // StarlarkRuleTransitionProviderTest#testAliasedBuildSetting_outputReturnMismatch shows the

src\main\java\com\google\devtools\build\lib\analysis\config\transitions\TransitionFactory.java:
  63  
  64:   // TODO(https://github.com/bazelbuild/bazel/issues/7814): Once everything uses TransitionFactory,
  65    // remove these methods.

src\main\java\com\google\devtools\build\lib\analysis\configuredtargets\MergedConfiguredTarget.java:
  110        // Only expose actions which are StarlarkValues.
  111:       // TODO(cparsons): Expose all actions to Starlark.
  112        for (ConfiguredAspect aspect : aspects) {

src\main\java\com\google\devtools\build\lib\analysis\configuredtargets\PackageGroupConfiguredTarget.java:
  63  
  64:   // TODO(b/200065655): Only builtins should depend on a PackageGroupConfiguredTarget.
  65    //  Allowlists should be migrated to a new rule type that isn't package_group. Do not expose this

src\main\java\com\google\devtools\build\lib\analysis\configuredtargets\RuleConfiguredTarget.java:
   82    private final ImmutableList<ActionAnalysisMetadata> actions;
   83:   // TODO(b/133160730): can we only populate this map for outputs that have labels?
   84    private final ImmutableMap<Label, Artifact> artifactsByOutputLabel;

  198    public <P extends TransitiveInfoProvider> P getProvider(Class<P> providerClass) {
  199:     // TODO(bazel-team): Should aspects be allowed to override providers on the configured target
  200      // class?

  231        // cause a Bazel crash.
  232:       // TODO(cparsons): Expose all actions to Starlark.
  233        return actions.stream()

src\main\java\com\google\devtools\build\lib\analysis\constraints\RuleContextConstraintSemantics.java:
  434        if (!depsToCheck.isSelectOnly(dep)) {
  435:         // TODO(bazel-team): support static constraint checking for selects. A selectable constraint
  436          // is valid if the union of all deps in the select includes all of this rule's static

src\main\java\com\google\devtools\build\lib\analysis\constraints\TopLevelConstraintSemantics.java:
  183      }
  184:     // TODO(bazel-team): support file targets (they should apply package-default constraints.
  185      if (buildConfigurationValue == null

  301  
  302:     // TODO(austinschuh): While the first eror is helpful, reporting all the errors at once would
  303      // save the user bazel round trips.

src\main\java\com\google\devtools\build\lib\analysis\starlark\Args.java:
  226          throws EvalException {
  227:       // TODO(cparsons): Even "frozen" Args may need to use params files.
  228        // If we go down this path, we will need to rename this class and update the documentation

  234      public CommandLineArgsApi setParamFileFormat(String format) throws EvalException {
  235:       // TODO(cparsons): Even "frozen" Args may need to use params files.
  236        // If we go down this path, we will need to rename this class and update the documentation

src\main\java\com\google\devtools\build\lib\analysis\starlark\BazelBuildApiGlobals.java:
   36   */
   37: // TODO(brandjon): This should probably be refactored into a StarlarkLibrary#BZL field, analogous to
   38  // StarlarkLibrary#COMMON and StarlarkLibrary#BUILD.

  114        try {
  115:         // TODO(b/22193153): This seems incorrect since parse doesn't take into account any
  116          // repository map. (This shouldn't matter within Google's monorepo, which doesn't use a repo

src\main\java\com\google\devtools\build\lib\analysis\starlark\FunctionTransitionUtil.java:
   83  
   84:       // TODO(waltl): Consider building this once and using it across different split transitions,
   85        // or reusing BuildOptionDetails.

  302            Field field = def.getField();
  303:           // TODO(b/153867317): check for crashing options types in this logic.
  304            Object convertedValue;

  314              // guaranteed.
  315:             // TODO(b/153867317): support allowMultiple options too. This is subtle: see the
  316              // description of allowMultiple in Option.java. allowMultiple converts have the choice

  401    /** Return different options in "affected by Starlark transition" form */
  402:   // TODO(blaze-configurability-team):This only exists for pseudo-legacy fixups of native
  403    //   transitions. Remove once those fixups are removed in favor of the global fixup.

src\main\java\com\google\devtools\build\lib\analysis\starlark\StarlarkApiProvider.java:
  32      if (this.info != null) {
  33:       // todo(dslomov): nuke this weird initialization mechanism.
  34  

src\main\java\com\google\devtools\build\lib\analysis\starlark\StarlarkAttributesCollection.java:
  162  
  163:       // TODO(b/140636597): Remove the LABEL_DICT_UNARY special case of this conditional
  164        // LABEL_DICT_UNARY was previously not treated as a dependency-bearing type, and was put into

  182              if (!seenExecutables.contains(executable)) {
  183:               // todo(dslomov,laurentlb): In general, this is incorrect.
  184                // We associate the first encountered FilesToRunProvider with

src\main\java\com\google\devtools\build\lib\analysis\starlark\StarlarkAttributeTransitionProvider.java:
  69      Preconditions.checkArgument(attributeMap instanceof ConfiguredAttributeMapper);
  70:     // TODO(bazel-team): consider caching transition instances to save CPU time, similar to what's
  71      // done in StarlarkRuleTransitionProvider. This could benefit builds that apply transitions over

src\main\java\com\google\devtools\build\lib\analysis\starlark\StarlarkAttrModule.java:
   73  
   74:   // TODO(adonovan): opt: this class does a lot of redundant hashtable lookups.
   75  

  140        } else if (defaultValue instanceof NativeComputedDefaultApi) {
  141:         // TODO(b/200065655#comment3): This hack exists until default_copts and default_hdrs_check
  142          //  in package() is replaced by proper package defaults. We don't check the particular

  233        }
  234:       // TODO(b/203203933): Officially deprecate HOST transition and remove this.
  235        if (trans.equals("host")) {

  425        throws EvalException {
  426:     // TODO(bazel-team): Replace literal strings with constants.
  427      BazelStarlarkContext.from(thread).checkLoadingOrWorkspacePhase("attr.int");

src\main\java\com\google\devtools\build\lib\analysis\starlark\StarlarkCommandLine.java:
  28      NestedSet<Artifact> artifacts = Depset.cast(files, Artifact.class, "files");
  29:     // TODO(bazel-team): This method should be deprecated and strongly discouraged, as it
  30      // flattens a depset during analysis.

src\main\java\com\google\devtools\build\lib\analysis\starlark\StarlarkCustomCommandLine.java:
  405          if (mapEach != null) {
  406:           // TODO(b/160181927): If artifactExpander == null (which happens in the analysis phase)
  407            // but expandDirectories is true, we run the map_each function on directory values without

  889        StarlarkThread thread = new StarlarkThread(mu, starlarkSemantics);
  890:       // TODO(b/77140311): Error if we issue print statements.
  891        thread.setPrintHandler((th, msg) -> {});

  930      } catch (EvalException e) {
  931:       // TODO(adonovan): consider calling a wrapper function to interpose a fake stack
  932        // frame that establishes the args.add_all call at loc. Or manipulating the stack

src\main\java\com\google\devtools\build\lib\analysis\starlark\StarlarkLateBoundDefault.java:
  189                      if (method.isAnnotationPresent(StarlarkConfigurationField.class)) {
  190:                       // TODO(b/68817606): Use annotation processors to verify these constraints.
  191                        Preconditions.checkArgument(

src\main\java\com\google\devtools\build\lib\analysis\starlark\StarlarkRuleClassFunctions.java:
  124  
  125:   // TODO(bazel-team): Remove the code duplication (BaseRuleClasses and this class).
  126    /** Parent rule class for non-executable non-test Starlark rules. */

  130                    .add(attr("expect_failure", STRING)))
  131:           // TODO(skylark-team): Allow Starlark rules to extend native rules and remove duplication.
  132            .add(

  276  
  277:   // TODO(bazel-team): implement attribute copy and other rule properties
  278    @Override

  428        for (String group : execGroupDict.keySet()) {
  429:         // TODO(b/151742236): document this in the param documentation.
  430          if (!StarlarkExecGroupCollection.isValidGroupName(group)) {

  519      // are ERRORs and that have the rule definition as their location.
  520:     // TODO(brandjon): Instead of accumulating events here, consider registering the rule in the
  521      // BazelStarlarkContext, and exporting such rules after module evaluation in

  709        for (String group : execGroups.keySet()) {
  710:         // TODO(b/151742236): document this in the param documentation.
  711          if (!StarlarkExecGroupCollection.isValidGroupName(group)) {

  749  
  750:     // TODO(adonovan): merge {Starlark,Builtin}RuleFunction and RuleClass,
  751      // making the latter a callable, StarlarkExportable value.

  874          // Check for existence of the function transition allowlist attribute.
  875:         // TODO(b/121385274): remove when we stop allowlisting starlark transitions
  876          if (name.equals(FunctionSplitTransitionAllowlist.ATTRIBUTE_NAME)

  913          } catch (IllegalStateException ex) {
  914:           // TODO(bazel-team): stop using unchecked exceptions in this way.
  915            errorf(handler, "cannot add attribute: %s", ex.getMessage());

  917        }
  918:       // TODO(b/121385274): remove when we stop allowlisting starlark transitions
  919        if (hasStarlarkDefinedTransition) {

  946        } catch (IllegalArgumentException | IllegalStateException ex) {
  947:         // TODO(adonovan): this catch statement is an abuse of exceptions. Be more specific.
  948          String msg = ex.getMessage();

src\main\java\com\google\devtools\build\lib\analysis\starlark\StarlarkRuleConfiguredTargetUtil.java:
  198  
  199:     // TODO(adonovan): clean up addProviders' error handling,
  200      // reporting provider validity errors through ruleError

  218      } catch (IllegalArgumentException ex) {
  219:       // TODO(adonovan): eliminate this abuse of unchecked exceptions.
  220        throw new BadRuleImplementation(implLoc + ": " + ex.getMessage());

  475      if (!provider.isExported()) {
  476:       // TODO(adonovan): report separate error events at distinct locations:
  477        //  "cannot return non-exported provider" (at location of instantiation), and

  514        // 'return struct(executable = foo)' instead of 'return DefaultInfo(executable = foo)'.
  515:       // TODO(cparsons): Look into deprecating this option.
  516        for (String field : info.getFieldNames()) {

  606  
  607:     // TODO(bazel-team) if both 'files' and 'executable' are provided, 'files' overrides
  608      // 'executable'

  662      // Extracting the map from Runfiles flattens a depset.
  663:     // TODO(cparsons): Investigate: Avoiding this flattening may be an efficiency win.
  664      Map<PathFragment, Artifact> symlinks = runfiles.asMapWithoutRootSymlinks();

src\main\java\com\google\devtools\build\lib\analysis\starlark\StarlarkRuleContext.java:
   246        // keys don't conflict with output attribute names.
   247:       // TODO(bazel-team): Also see about requiring the key to be a valid Starlark identifier.
   248        for (Map.Entry<String, OutputFile> e : implicitOutMap.entrySet()) {

   323     */
   324:   // TODO(adonovan): add StarlarkBuiltin(name="ctx.outputs") annotation.
   325    private static class Outputs implements Structure, StarlarkValue {

   336        Preconditions.checkState(!context.isImmutable());
   337:       // TODO(bazel-team): We should reject outputs whose key is not an identifier. Today this is
   338        // allowed, and the resulting ctx.outputs value can be retrieved using getattr().

   352      public ImmutableCollection<String> getFieldNames() {
   353:       // TODO(b/175954936): There's an NPE here when accessing dir(ctx.outputs) after rule
   354        // analysis has completed. Since we can't throw EvalException here, this may require that we

   481          // Skip a split with an empty dependency list.
   482:         // TODO(jungjw): Figure out exactly which cases trigger this and see if this can be made
   483          // more error-proof.

  1047      }
  1048:     // TODO(lberki): This flattens a NestedSet.
  1049      // However, we can't turn this into a Depset because it's an incompatible change to Starlark.

  1058                  "execution_requirements"));
  1059:     // TODO(b/234923262): Take exec_group into consideration instead of using the default
  1060      // exec_group.

  1094     */
  1095:   // TODO(bazel-team): find a better way to typecheck this argument.
  1096    private static Map<Label, Iterable<Artifact>> checkLabelDict(Map<?, ?> labelDict)

src\main\java\com\google\devtools\build\lib\analysis\starlark\StarlarkRuleTransitionProvider.java:
   90          // For now, don't allow access to attributes that read selects.
   91:         // TODO(b/121134880): make this restriction more fine grained.
   92          continue;

  121       */
  122:     // TODO(b/121134880): validate that the targets these transitions are applied on don't read any
  123      // attributes that are then configured by the outputs of these transitions.

src\main\java\com\google\devtools\build\lib\analysis\starlark\StarlarkToolchainContext.java:
  107      if (!containsKey(starlarkThread, semantics, key)) {
  108:       // TODO(bazel-configurability): The list of available toolchain types is confusing in the
  109        // presence of aliases, since it only contains the actual label, not the alias passed to the

src\main\java\com\google\devtools\build\lib\analysis\starlark\StarlarkTransition.java:
   87    /** Exception class for exceptions thrown during application of a starlark-defined transition */
   88:   // TODO(blaze-configurability): add more information to this exception e.g. originating target of
   89    // transition.

  154     */
  155:   // TODO(juliexxia): the current implementation masks certain bad transitions and only checks the
  156    // final result. I.e. if a transition that writes a non int --//int-build-setting is composed

  203        // Clean up aliased values.
  204:       // TODO(blaze-configurability-team): This is actually a quagmire of undefined behavior
  205        //   if a user asks for both an alias and the unaliased build setting.

  261      Object newValue = options.getStarlarkOptions().get(setting);
  262:     // TODO(b/154132845): fix NPE occasionally observed here.
  263      Preconditions.checkState(

src\main\java\com\google\devtools\build\lib\analysis\starlark\UnresolvedSymlinkAction.java:
  54      super(owner, NestedSetBuilder.emptySet(Order.STABLE_ORDER), ImmutableSet.of(primaryOutput));
  55:     // TODO: PathFragment#create normalizes the symlink target, which may change how it resolves
  56      //  when combined with directory symlinks. Ideally, Bazel's file system abstraction would

src\main\java\com\google\devtools\build\lib\analysis\test\AnalysisTestActionBuilder.java:
  39        RuleContext ruleContext, AnalysisTestResultInfo testResultInfo) {
  40:     // TODO(laszlocsomor): Use the execution platform, not the host platform.
  41      boolean isExecutedOnWindows = OS.getCurrent() == OS.WINDOWS;

src\main\java\com\google\devtools\build\lib\analysis\test\BaselineCoverageAction.java:
  63        Fingerprint fp) {
  64:     // TODO(b/150305897): No UUID?
  65:     // TODO(b/150308417): Sort?
  66      Artifacts.addToFingerprint(fp, instrumentedFiles.toList());

src\main\java\com\google\devtools\build\lib\analysis\test\ExecutionInfo.java:
  32  
  33:   // TODO(bazel-team): Find a better location for this constant.
  34    public static final String DEFAULT_TEST_RUNNER_EXEC_GROUP = "test";

src\main\java\com\google\devtools\build\lib\analysis\test\InstrumentedFileManifestAction.java:
  82        Fingerprint fp) {
  83:     // TODO(b/150305897): use addUUID?
  84      fp.addString(GUID);
  85:     // TODO(b/150308417): Not sorting is probably cheaper, might lead to unnecessary re-execution.
  86      Artifacts.addToFingerprint(fp, files.toList());

src\main\java\com\google\devtools\build\lib\analysis\test\InstrumentedFilesCollector.java:
  227        // rule supports baseline coverage.
  228:       // TODO(ulfjack): Generate a local baseline coverage action, and then merge at the leaves.
  229        instrumentedFilesInfoBuilder.addBaselineCoverageSources(localSources);

src\main\java\com\google\devtools\build\lib\analysis\test\InstrumentedFilesInfo.java:
  96     */
  97:   // TODO(ulfjack): Change this to a single Artifact. Also change how it's generated. It's better to
  98    // generate actions such that each action only covers the source files of a single rule, in

src\main\java\com\google\devtools\build\lib\analysis\test\TestActionBuilder.java:
  214  
  215:     // TODO(laszlocsomor), TODO(ulfjack): `isExecutedOnWindows` should use the execution platform,
  216      // not the host platform. Once Bazel can tell apart these platforms, fix the right side of this

  346        inputsBuilder.add(instrumentedFileManifest);
  347:       // TODO(ulfjack): Is this even ever set? If yes, does this cost us a lot of memory?
  348        for (Pair<String, String> coverageEnvEntry :

  427          boolean splitCoveragePostProcessing = testConfiguration.splitCoveragePostProcessing();
  428:         // TODO(b/234923262): Take exec_group into consideration when selecting sh tools
  429          TestRunnerAction testRunnerAction =

  472      }
  473:     // TODO(bazel-team): Passing the reportGenerator to every TestParams is a bit strange.
  474      FilesToRunProvider reportGenerator = null;

src\main\java\com\google\devtools\build\lib\analysis\test\TestAttempt.java:
  203        if (file.getSecond() != null) {
  204:         // TODO(b/199940216): Can we populate metadata for these files?
  205          localFiles.add(

src\main\java\com\google\devtools\build\lib\analysis\test\TestResult.java:
  186    private Collection<Pair<String, Path>> getFiles() {
  187:     // TODO(ulfjack): Cache the set of generated files in the TestResultData.
  188      return testAction.getTestOutputsMapping(ArtifactPathResolver.forExecRoot(execRoot), execRoot);

src\main\java\com\google\devtools\build\lib\analysis\test\TestRunnerAction.java:
  170  
  171:   // TODO(b/192694287): Remove once we migrate all tests from the allowlist.
  172    private final PackageSpecificationProvider networkAllowlist;

  372     */
  373:   // TODO(ulfjack): Instead of going to local disk here, use SpawnResult (add list of files there).
  374    public ImmutableList<Pair<String, Path>> getTestOutputsMapping(

  457        throws CommandLineExpansionException, InterruptedException {
  458:     // TODO(b/150305897): use addUUID?
  459      fp.addString(GUID);

  465      extraTestEnv.addTo(fp);
  466:     // TODO(ulfjack): It might be better for performance to hash the action and test envs in config,
  467      // and only add a hash here.

  680      }
  681:     // TODO(b/184206260): Actually set TEST_RANDOM_SEED with random seed.
  682      // The above TEST_RANDOM_SEED has histroically been set with the run number, but we should

  733        // Instruct remote-runtest.sh/local-runtest.sh not to cd into the runfiles directory.
  734:       // TODO(ulfjack): Find a way to avoid setting this variable.
  735        env.put("RUNTEST_PRESERVE_CWD", "1");

src\main\java\com\google\devtools\build\lib\analysis\test\TestStrategy.java:
  168      List<String> args = Lists.newArrayList();
  169:     // TODO(ulfjack): `executedOnWindows` is incorrect for remote execution, where we need to
  170      // consider the target configuration, not the machine Bazel happens to run on. Change this to

src\main\java\com\google\devtools\build\lib\authandtls\GoogleAuthUtils.java:
  267        } catch (IOException e) {
  268:         // TODO(yannic): Make this fail the build.
  269          credentialHelperEnvironment.getEventReporter().handle(Event.warn(e.getMessage()));

src\main\java\com\google\devtools\build\lib\bazel\BazelRepositoryModule.java:
  192        BlazeRuntime runtime, BlazeDirectories directories, WorkspaceBuilder builder) {
  193:     // TODO(b/27143724): Remove this guard when Google-internal flavor no longer uses repositories.
  194      if ("bazel".equals(runtime.getProductName())) {

src\main\java\com\google\devtools\build\lib\bazel\SpawnLogModule.java:
  132      if (spawnLogContext != null) {
  133:       // TODO(b/63987502): Pretty sure the "spawn-log" commandline identifier is never used as there
  134        // is no other SpawnLogContext to distinguish from.

src\main\java\com\google\devtools\build\lib\bazel\bzlmod\BzlmodRepoRuleCreator.java:
  57        throws InterruptedException, InvalidRuleException, NoSuchPackageException, EvalException {
  58:     // TODO(bazel-team): Don't use the {@link Rule} class for repository rule.
  59      // Currently, the repository rule is represented with the {@link Rule} class that's designed

src\main\java\com\google\devtools\build\lib\bazel\bzlmod\IndexRegistry.java:
  41   */
  42: // TODO(wyv): Insert "For details, see ..." when we have public documentation.
  43  public class IndexRegistry implements Registry {

src\main\java\com\google\devtools\build\lib\bazel\bzlmod\ModuleFileFunction.java:
  210        Program program = Program.compileFile(starlarkFile, predeclaredEnv);
  211:       // TODO(wyv): check that `program` has no `def`, `if`, etc
  212        StarlarkThread thread = new StarlarkThread(mu, starlarkSemantics);

  255      // Otherwise, we should get the module file from a registry.
  256:     // TODO(wyv): Move registry object creation to BazelRepositoryModule so we don't repeatedly
  257      //   create them, and we can better report the error (is it a flag error or override error?).

src\main\java\com\google\devtools\build\lib\bazel\bzlmod\ModuleFileGlobals.java:
  143              name = "version",
  144:             // TODO(wyv): explain version format
  145              doc =

  152              name = "compatibility_level",
  153:             // TODO(wyv): See X for more details
  154              doc =

  610              name = "versions",
  611:             // TODO(wyv): See X for more details
  612              doc =

src\main\java\com\google\devtools\build\lib\bazel\bzlmod\SingleExtensionEvalFunction.java:
  141      }
  142:     // TODO(wyv): Consider whether there's a need to check bzl-visibility
  143      // (BzlLoadFunction#checkLoadVisibilities).
  144:     // TODO(wyv): Consider refactoring to use PackageFunction#loadBzlModules, or the simpler API
  145      // that may be created by b/237658764.

src\main\java\com\google\devtools\build\lib\bazel\bzlmod\SingleExtensionUsagesFunction.java:
  62              .collect(toImmutableList()),
  63:         // TODO(wyv): Maybe cache these mappings?
  64          usagesTable.row(id).keySet().stream()

src\main\java\com\google\devtools\build\lib\bazel\commands\FetchCommand.java:
  62  public final class FetchCommand implements BlazeCommand {
  63:   // TODO(kchodorow): add an option to force-fetch targets, even if they're already downloaded.
  64:   // TODO(kchodorow): this would be a great time to check for difference and invalidate the upward
  65    //                  transitive closure for local repositories.

src\main\java\com\google\devtools\build\lib\bazel\commands\ModqueryCommand.java:
  64      name = ModqueryCommand.NAME,
  65:     // TODO(andreisolo): figure out which extra options are really needed
  66      options = {

src\main\java\com\google\devtools\build\lib\bazel\commands\ModqueryExecutor.java:
  135            // Single paths should not contain cycles or unexpanded (duplicate) children
  136:           // TODO(andreisolo): Move the single path extraction to DFS otherwise it can produce a
  137            //  wrong answer in cycle edge-case A -> B -> C -> B with target D will not find ABD

src\main\java\com\google\devtools\build\lib\bazel\commands\SyncCommand.java:
  195          } else if (shouldSync(rule, syncOptions)) {
  196:           // TODO(aehlig): avoid the detour of serializing and then parsing the repository name
  197            try {

src\main\java\com\google\devtools\build\lib\bazel\repository\CacheHitReportingModule.java:
  57    public void failed(RepositoryFailedEvent event) {
  58:     // TODO(wyv): add an event for the failure of a module extension too
  59      String context = RepositoryFetchProgress.repositoryFetchContextString(event.getRepo());

src\main\java\com\google\devtools\build\lib\bazel\repository\RepositoryResolvedEvent.java:
  152      } else {
  153:       // TODO(aehlig): handle strings specially to allow encodings of the former
  154        // values to be accepted as well.

  229      ImmutableList<StarlarkThread.CallStackEntry> stack = rule.getCallStack().toList();
  230:     // TODO: Callstack should always be available for bazel.
  231      if (stack.isEmpty()) {

src\main\java\com\google\devtools\build\lib\bazel\repository\downloader\DownloadManager.java:
  129  
  130:     // TODO(andreisolo): This code path is inconsistent as the authHeaders are fetched from a
  131      //  .netrc only if it comes from a http_{archive,file,jar} - and it is handled directly

src\main\java\com\google\devtools\build\lib\bazel\repository\downloader\HttpConnector.java:
  113              url.openConnection(proxyHelper.createProxyIfNeeded(url));
  114:         // TODO(zecke): Revise once https://bugs.openjdk.java.net/browse/JDK-8163921 is fixed.
  115          connection.addRequestProperty("Accept", "text/html, image/gif, image/jpeg, */*");

src\main\java\com\google\devtools\build\lib\bazel\repository\downloader\HttpDownloader.java:
  154        SEMAPHORE.release();
  155:       // TODO(wyv): Do we need to report any event here?
  156      }

src\main\java\com\google\devtools\build\lib\bazel\repository\downloader\UrlRewriter.java:
  284     */
  285:   // TODO : consider re-using RemoteModule.newCredentialsFromNetrc
  286    @Nullable

src\main\java\com\google\devtools\build\lib\bazel\repository\starlark\StarlarkExecutionResult.java:
  188        RecordingOutErr recorder = new RecordingOutErr();
  189:       // TODO(dmarting): if a lot of data is sent to stdout, this will use all the memory and
  190        // Bazel will crash. Maybe we should use custom output streams that throw an appropriate

src\main\java\com\google\devtools\build\lib\bazel\repository\starlark\StarlarkRepositoryContext.java:
  516     */
  517:   // TODO(wyv): somehow migrate this to the base context too.
  518    public void enforceLabelAttributes() throws EvalException, InterruptedException {

src\main\java\com\google\devtools\build\lib\bazel\repository\starlark\StarlarkRepositoryModule.java:
  198        // alternatives, to the name in the local context.
  199:       // TODO(b/111199163): we probably should disallow the use of non-exported
  200        // repository rules anyway.

  225  
  226:         // TODO(adonovan): is this cast safe? Check.
  227          String name = (String) kwargs.get("name");

  353        attrBuilder.add(attrDescriptor.build(attrName));
  354:       // TODO(wyv): validate attributes. No selects, no latebound defaults, or any crazy stuff like
  355        //   that.

src\main\java\com\google\devtools\build\lib\bazel\rules\BazelRuleClassProvider.java:
  202    static PathFragment getShellExecutableForOs(OS os, ShellConfiguration.Options options) {
  203:     // TODO(ulfjack): instead of using the OS Bazel runs on, we need to use the exec platform,
  204      // which may be different for remote execution. For now, this can be overridden with

  214          OS os = OS.getCurrent();
  215:         // TODO(ulfjack): instead of using the OS Bazel runs on, we need to use the exec platform,
  216          // which may be different for remote execution. For now, this can be overridden with

  233          } else if (os == OS.WINDOWS) {
  234:           // TODO(ulfjack): We want to add the MSYS root to the PATH, but that prevents us from
  235            // inheriting PATH from the client environment. For now we use System.getenv even though

  484          public void init(ConfiguredRuleClassProvider.Builder builder) {
  485:           // TODO(ulfjack): Split this up by conceptual units.
  486            builder.addRuleDefinition(new NewLocalRepositoryRule());

  533    public static String pathOrDefault(OS os, @Nullable String path, @Nullable PathFragment sh) {
  534:     // TODO(ulfjack): The default PATH should be set from the exec platform, which may be different
  535      // from the local machine. For now, this can be overridden with --action_env=PATH=<value>, so

src\main\java\com\google\devtools\build\lib\bazel\rules\GenericRules.java:
  59  
  60:     // TODO(#11437): It'd be nice to hide this definition behind a static helper, but the most apt
  61      // place would be as a static method of InternalModule.java in lib.packages, and that package

src\main\java\com\google\devtools\build\lib\bazel\rules\android\AndroidNdkRepositoryFunction.java:
  168  
  169:     // TODO(bazel-team): It's unfortunate to have to extract data from a CToolchain proto like this.
  170      // It would be better to have a higher-level construction (like an AndroidToolchain class)

src\main\java\com\google\devtools\build\lib\bazel\rules\android\AndroidSdkRepositoryFunction.java:
  328      // All local maven repositories that are shipped in the Android SDK.
  329:     // TODO(ajmichael): Create SkyKeys so that if the SDK changes, this function will get rerun.
  330      Iterable<Path> localMavenRepositories =

src\main\java\com\google\devtools\build\lib\bazel\rules\cpp\BazelCcLibraryRule.java:
  34      return builder
  35:         // TODO: Google cc_library overrides documentation for:
  36          // deps, data, linkopts, defines, srcs; override here too?

src\main\java\com\google\devtools\build\lib\bazel\rules\cpp\BazelCppSemantics.java:
  47  
  48:   // TODO(#10338): We need to check for both providers. With and without the @rules_cc repo name.
  49    //  The reason for that is that when we are in a target inside @rules_cc, the provider won't have

src\main\java\com\google\devtools\build\lib\bazel\rules\genrule\BazelGenRuleRule.java:
  46  
  47:         // TODO(bazel-team): stamping doesn't seem to work. Fix it or remove attribute.
  48          .add(attr("stamp", BOOLEAN).value(false))

src\main\java\com\google\devtools\build\lib\bazel\rules\java\BazelJavaRuleClasses.java:
  110            "genrule",
  111:           "genproto", // TODO(bazel-team): we should filter using providers instead (starlark rule).
  112            "java_import",

  388            <!-- #END_BLAZE_RULE.ATTRIBUTE --> */
  389:           // TODO(bazel-team): describe how to access this data at runtime
  390            .add(attr("stamp", TRISTATE).value(TriState.AUTO))

  456                // libraries (libstdc++.so, libgcc_s.so).
  457:               // TODO(bazel-team): Add tests for Java+dynamic runtime.
  458                CcToolchainRequiringRule.class)

src\main\java\com\google\devtools\build\lib\bazel\rules\java\BazelJavaSemantics.java:
  133        // Legacy behavior for java_test rules: main_class defaulted to JUnit4 runner.
  134:       // TODO(dmarting): remove once we drop the legacy bazel java_test behavior.
  135        if ("java_test".equals(ruleContext.getRule().getRuleClass())) {

  398                  Iterables.transform(classpath.toList(), Artifact.RUNFILES_PATH_STRING))
  399:             // TODO(laszlocsomor): Change the Launcher to accept multiple jvm_flags entries. As of
  400              // 2019-02-13 the Launcher accepts just one jvm_flags entry, which contains all the

  446        // COMPILE_ONLY, hence we return here.
  447:       // TODO(bazel-team): Ideally enforceExplicitJavaTestDeps should be the default behaviour,
  448        // since the testSupport deps don't belong to the COMPILE_ONLY classpath, but since many

  466  
  467:   // TODO(dmarting): simplify that logic when we remove the legacy Bazel java_test behavior.
  468    @Nullable

src\main\java\com\google\devtools\build\lib\bazel\rules\python\BazelPyRuleClasses.java:
  216            .add(attr("stamp", TRISTATE).value(TriState.AUTO))
  217:           // TODO(brandjon): Consider adding to py_interpreter a .mandatoryBuiltinProviders() of
  218            // PyRuntimeInfoProvider. (Add a test case to PythonConfigurationTest for violations of

src\main\java\com\google\devtools\build\lib\bazel\rules\python\BazelPythonConfiguration.java:
  141        }
  142:       // TODO(#7901): Also prohibit --python_path here.
  143      }

src\main\java\com\google\devtools\build\lib\bazel\rules\python\BazelPythonSemantics.java:
   77    public String getSrcsVersionDocURL() {
   78:     // TODO(#8996): Update URL to point to rules_python's docs instead of the Bazel site.
   79      return "https://bazel.build/reference/be/python#py_binary.srcs_version";

  248  
  249:       // TODO(b/234923262): Take exec_group into consideration when selecting sh tools
  250        if (OS.getCurrent() != OS.WINDOWS) {

  281            //
  282:           // TODO(#7947): Fix how this path is constructed for the case of a runfile interpreter in
  283            // a remote repo -- probably need to pass an absolute path to the launcher instead of a

  521  
  522:     // TODO(plf): return empty CcInfo.
  523      return CcInfo.merge(ccInfos);

src\main\java\com\google\devtools\build\lib\bazel\rules\sh\BazelShRuleClasses.java:
  110  
  111:   // TODO(bazel-team): refactor sh_binary and sh_base to have a common root
  112    // with srcs and bash_version attributes

src\main\java\com\google\devtools\build\lib\bazel\rules\sh\BazelShTestRule.java:
  32    public RuleClass build(RuleClass.Builder builder, RuleDefinitionEnvironment environment) {
  33:     // TODO(bazel-team): Add :lcov_merger to every test rule as opposed to particular rules.
  34      builder

src\main\java\com\google\devtools\build\lib\bazel\rules\sh\ShBinary.java:
  138  
  139:     // TODO(b/234923262): Take exec_group into consideration when selecting sh tools
  140      PathFragment shExecutable = ShToolchain.getPathOrError(ruleContext.getExecutionPlatform());

src\main\java\com\google\devtools\build\lib\bugreport\BugReport.java:
  56  
  57:   // TODO(b/232094803): Replace the static state with instance variables and allow custom overrides
  58    //  for testing.

src\main\java\com\google\devtools\build\lib\buildeventservice\BuildEventServiceModule.java:
  137  
  138:   // TODO(lpino): Use Optional instead of @Nullable for the members below.
  139    @Nullable private OutErr outErr;

  237      try {
  238:       // TODO(b/234994611): It would be better to report before we wait, but the current
  239        //  infrastructure does not support that. At least we can report it afterwards.

  770        } catch (IOException exception) {
  771:         // TODO(b/125216340): Consider making this a warning instead of an error once the
  772          //  associated bug has been resolved.

  797        } catch (IOException exception) {
  798:         // TODO(b/125216340): Consider making this a warning instead of an error once the
  799          //  associated bug has been resolved.

  823        } catch (IOException exception) {
  824:         // TODO(b/125216340): Consider making this a warning instead of an error once the
  825          //  associated bug has been resolved.

  881  
  882:   // TODO(b/115961387): This method shouldn't exist. It only does because some tests are relying on
  883    //  the transport creation logic of this module directly.

src\main\java\com\google\devtools\build\lib\buildeventservice\BuildEventServiceUploader.java:
   89   */
   90: // TODO(lpino): This class should be package-private but there are unit tests that are in the
   91  //  different packages and rely on this.

  201      // More details can be found in b/131393380.
  202:     // TODO(bazel-team): Consider relaxing this invariant by having a more relaxed order.
  203      synchronized (lock) {

  220  
  221:       // TODO(b/131393380): {@link #nextSeqNum} doesn't need to be an AtomicInteger if it's
  222        //  always used under lock. It would be cleaner and more performant to update the sequence

  244      // More details can be found in b/131393380.
  245:     // TODO(bazel-team): Consider relaxing this invariant by having a more relaxed order.
  246      synchronized (lock) {

  251        // Enqueue the last event which will terminate the upload.
  252:       // TODO(b/131393380): {@link #nextSeqNum} doesn't need to be an AtomicInteger if it's
  253        //  always used under lock. It would be cleaner and more performant to update the sequence

  386  
  387:     // TODO(lpino): Remove this logging once we can make every single event smaller than 1MB
  388      // as protobuf recommends.

src\main\java\com\google\devtools\build\lib\buildeventstream\ArtifactGroupNamer.java:
  18  /** Interface for conversion of paths to URIs. */
  19: // TODO(lpino): This interface shouldn't exist since there's only trivial implementation of it.
  20  // However, it's really hard to move this class to the right package because of package boundaries.

src\main\java\com\google\devtools\build\lib\buildeventstream\BuildEvent.java:
  78      public final LocalFileCompression compression;
  79:     // TODO(b/199940216): use when possible to get source artifact canonical path.
  80      @Nullable public final Artifact artifact;

src\main\java\com\google\devtools\build\lib\buildeventstream\PathConverter.java:
  37    /** A {@link PathConverter} that returns a path formatted as a URI with a {@code file} scheme. */
  38:   // TODO(ulfjack): Make this a static final field.
  39    final class FileUriPathConverter implements PathConverter {

src\main\java\com\google\devtools\build\lib\buildeventstream\proto\build_event_stream.proto:
  328    //
  329:   // TODO(yannic): Remove.
  330    int64 start_time_millis = 2 [deprecated = true];

  596    //
  597:   // TODO(yannic): Remove.
  598    int64 test_timeout_seconds = 7 [deprecated = true];

  640    //
  641:   // TODO(yannic): Remove.
  642    int64 test_attempt_start_millis_epoch = 6 [deprecated = true];

  653    //
  654:   // TODO(yannic): Remove.
  655    int64 test_attempt_duration_millis = 3 [deprecated = true];

  695        //
  696:       // TODO(yannic): Remove.
  697        int64 time_millis = 3 [deprecated = true];

  745    //
  746:   // TODO(yannic): Remove.
  747    int64 first_start_time_millis = 7 [deprecated = true];

  755    //
  756:   // TODO(yannic): Remove.
  757    int64 last_stop_time_millis = 8 [deprecated = true];

  765    //
  766:   // TODO(yannic): Remove.
  767    int64 total_run_duration_millis = 9 [deprecated = true];

  818    //
  819:   // TODO(yannic): Remove.
  820    int64 finish_time_millis = 2 [deprecated = true];

  907      // package had not changed.
  908:     // TODO(janakr): rename and remove.
  909      int64 targets_loaded = 1;

src\main\java\com\google\devtools\build\lib\buildtool\AnalysisAndExecutionPhaseRunner.java:
   89                  env.getReporter(),
   90:                 // TODO(ulfjack): Expensive. Make this part of the TargetPatternPhaseValue or write
   91                  // a new SkyFunction to compute it?

  207              env.getRuntime().getCoverageReportActionFactory(request));
  208:     // TODO(b/199053098) TestFilteringCompleteEvent.
  209      return (AnalysisAndExecutionResult)

  253  
  254:     // TODO(andreisolo): Don't re-compute these here as they should be already computed inside the
  255      //  TargetPatternPhaseValue

src\main\java\com\google\devtools\build\lib\buildtool\AnalysisPhaseRunner.java:
  104                  env.getReporter(),
  105:                 // TODO(ulfjack): Expensive. Make this part of the TargetPatternPhaseValue or write
  106                  // a new SkyFunction to compute it?

  256  
  257:     // TODO(bazel-team): Merge these into one event.
  258      env.getEventBus()

  379  
  380:     // TODO(andreisolo): Don't re-compute these here as they should be already computed inside the
  381      //  TargetPatternPhaseValue

src\main\java\com\google\devtools\build\lib\buildtool\BuildTool.java:
  183        // symlinks for tools.
  184:       // TODO(twerth): Extract embedded tool setup from execution tool and move object creation to
  185        // execution phase.

  326  
  327:       // TODO(b/199053098): implement support for --nobuild.
  328        AnalysisAndExecutionResult analysisAndExecutionResult;

  508          // The actual error has not already been reported by the Builder.
  509:         // TODO(janakr): This is wrong: --keep_going builds with errors don't have a message in
  510          //  this BuildFailedException, so any error message that is only reported here will be

  557        reportExceptionError(e);
  558:       // TODO(gregce): With "global configurations" we cannot tie a configuration creation failure
  559        // to a single target and have to halt the entire build. Once configurations are genuinely

  698    /** Describes a failure that isn't severe enough to halt the command in keep_going mode. */
  699:   // TODO(mschaller): consider promoting this to be a sibling of AbruptExitException.
  700    public static class ExitException extends Exception {

src\main\java\com\google\devtools\build\lib\buildtool\ExecutionTool.java:
   179          new SymlinkTreeStrategy(env.getOutputService(), env.getBlazeWorkspace().getBinTools()));
   180:     // TODO(philwo) - the ExecutionTool should not add arbitrary dependencies on its own, instead
   181      // these dependencies should be added to the ActionContextConsumer of the module that actually

   194      ExecutionOptions options = request.getOptions(ExecutionOptions.class);
   195:     // TODO(jmmv): This should live in some testing-related Blaze module, not here.
   196      actionContextRegistryBuilder.restrictTo(TestActionContext.class, options.testStrategy);

   260  
   261:     // TODO(b/246324830): Support this.
   262      if (pkgPathEntries.size() != 1) {

   298      } else {
   299:       // TODO(bazel-team): this could be just another OutputService
   300        try (SilentCloseable c = Profiler.instance().profile("startLocalOutputBuild")) {

   339      env.getEventBus().register(new ExecutionProgressReceiverSetup(skyframeExecutor, env));
   340:     // TODO(leba): Add watchdog support.
   341      for (ExecutorLifecycleListener executorLifecycleListener : executorLifecycleListeners) {

   384      } else {
   385:       // TODO(bazel-team): this could be just another OutputService
   386        try (SilentCloseable c = Profiler.instance().profile("startLocalOutputBuild")) {

   648        } catch (IOException e) {
   649:         // TODO(b/140567980): Remove when we determine the cause of occasional deleteTree() failure.
   650          logDeleteTreeFailure(directory, "action output directory", e);

  1012          // runs.
  1013:         // TODO(leba): count test actions
  1014          ExecutionProgressReceiver executionProgressReceiver =

src\main\java\com\google\devtools\build\lib\buildtool\OutputDirectoryLinksUtils.java:
  364        if (link.isSymbolicLink()) {
  365:         // TODO(b/146885821): Consider also removing empty ancestor directories, to allow for
  366          //  cleaning up directories generated by --symlink_prefix=dir1/dir2/...

src\main\java\com\google\devtools\build\lib\buildtool\PostAnalysisQueryProcessor.java:
  68        throws InterruptedException, ViewCreationFailedException, ExitException {
  69:     // TODO: b/71905538 - this query will operate over the graph as constructed by analysis, but
  70      // will also pick up any nodes that are in the graph from prior builds. This makes the results

src\main\java\com\google\devtools\build\lib\buildtool\SkyframeBuilder.java:
  103      BuildRequestOptions buildRequestOptions = options.getOptions(BuildRequestOptions.class);
  104:     // TODO(bazel-team): Should use --experimental_fsvc_threads instead of the hardcoded constant
  105      // but plumbing the flag through is hard.

src\main\java\com\google\devtools\build\lib\buildtool\SymlinkForest.java:
  143          plantedSymlinks.add(execPath);
  144:         // TODO(jingwen-external): is this creating execroot/io_bazel/external?
  145        }

  252            } catch (IOException e) {
  253:             // TODO(arostovtsev): Why are we swallowing the IOException here instead of letting it
  254              // be thrown?

  352  
  353:     // TODO(bazel-team): Bazel can find packages in multiple paths by specifying --package_paths,
  354      // we need a more complex algorithm to build execroot in that case. As --package_path will be

src\main\java\com\google\devtools\build\lib\causes\AnalysisFailedCause.java:
  42    public String toString() {
  43:     // TODO(mschaller): Tests expect non-escaped message strings, and protobuf (the FailureDetail in
  44      //  detailedExitCode) escapes them. Better versions of tests would check structured data, and

src\main\java\com\google\devtools\build\lib\cmdline\Label.java:
  208     */
  209:   // TODO(b/200024947): Remove this.
  210    public static Label parseAbsolute(String absName, RepositoryMapping repositoryMapping)

  215  
  216:   // TODO(b/200024947): Remove this.
  217    public static Label parseAbsolute(

  229     */
  230:   // TODO(b/200024947): Remove this.
  231    public static Label parseAbsoluteUnchecked(String absName) {

  247     */
  248:   // TODO(b/200024947): Remove this...?
  249    public static Label create(String packageName, String targetName) throws LabelSyntaxException {

  258     */
  259:   // TODO(b/200024947): Remove this...?
  260    public static Label create(PackageIdentifier packageId, String targetName)

  476        doc =
  477:           // TODO(#14503): Fix the documentation.
  478            "Resolves a label that is either absolute (starts with <code>//</code>) or relative to "

  524     */
  525:   // TODO(b/200024947): Remove this.
  526    public Label getRelativeWithRemapping(String relName, RepositoryMapping repositoryMapping)

  535  
  536:   // TODO(b/200024947): Remove this.
  537    public Label getRelativeWithRemapping(

  626    public void repr(Printer printer) {
  627:     // TODO(wyv): Consider using StarlarkSemantics here too for optional unambiguity.
  628      printer.append("Label(");

  662    public String expandToCommandLine() {
  663:     // TODO(wyv): Consider using StarlarkSemantics here too for optional unambiguity.
  664      return getCanonicalForm();

src\main\java\com\google\devtools\build\lib\cmdline\LabelParser.java:
  193      }
  194:     // TODO(bazel-team): This should be an error, but we can't make it one for legacy reasons.
  195      if (target.endsWith("/.")) {

src\main\java\com\google\devtools\build\lib\cmdline\PackageIdentifier.java:
  148     */
  149:   // TODO(bazel-team): Rename getDerivedArtifactPath or similar.
  150    public PathFragment getPackagePath(boolean siblingRepositoryLayout) {

  174     */
  175:   // TODO(bazel-team): Maybe rename to "getDefaultForm"?
  176    public String getCanonicalForm() {

  185     */
  186:   // TODO(bazel-team): The absence of "//" for the main repo seems strange. Can we eliminate
  187    // that disparity?

src\main\java\com\google\devtools\build\lib\cmdline\RepositoryName.java:
  219     */
  220:   // TODO(bazel-team): Consider renaming to "getDefaultForm".
  221    public String getCanonicalForm() {

  245     */
  246:   // TODO(kchodorow): remove once execroot is reorg-ed.
  247    public PathFragment getRunfilesPath() {

src\main\java\com\google\devtools\build\lib\cmdline\TargetPattern.java:
  826  
  827:     // TODO(bazel-team): Merge the Label functionality that requires similar constants into this
  828      // class.

src\main\java\com\google\devtools\build\lib\collect\EquivalenceRelation.java:
  37   */
  38: // TODO: Consider phasing out this interface in favour of com.google.common.base.Equivalence
  39  @FunctionalInterface

src\main\java\com\google\devtools\build\lib\collect\compacthashmap\CompactHashMap.java:
  155  
  156:   // TODO(bazel-team): decide default size
  157    private static final int DEFAULT_SIZE = 3;

src\main\java\com\google\devtools\build\lib\collect\compacthashset\CompactHashSet.java:
   63   */
   64: // TODO(bazel-team): This was branched of an internal version of guava. If the class is released, we
   65  // should remove this again.
   66  public class CompactHashSet<E> extends AbstractSet<E> {
   67:   // TODO(bazel-team): cache all field accesses in local vars
   68  

  162  
  163:   // TODO(bazel-team): decide default size
  164    private static final int DEFAULT_SIZE = 3;

src\main\java\com\google\devtools\build\lib\collect\nestedset\Depset.java:
  148      //
  149:     // TODO(adonovan): use this check instead:
  150      //   EvalUtils.checkHashable(x);

  154      // which are Starlark-unhashable even if frozen.
  155:     // TODO(adonovan): also remove StarlarkList.hashCode.
  156      if (strict && !Starlark.isImmutable(x)) {
  157:       // TODO(adonovan): improve this error message to include type(x).
  158        throw Starlark.errorf("depset elements must not be mutable values");

  172     */
  173:   // TODO(adonovan): enforce that we never construct a Depset with a StarlarkType
  174    // that represents a non-Starlark type (e.g. NestedSet<PathFragment>).

  178    //
  179:   // TODO(adonovan): it is possible to create an empty depset with a elemType other than EMPTY.
  180    // The union operation will fail if it's combined with another depset of incompatible elemType.

  187    //
  188:   // TODO(adonovan): if we replaced ElementType by Class, we could enforce consistency between the
  189    // two arguments: of(Class<T> elemType, NestedSet<T> set). We could also avoid the allocations

  411     */
  412:   // TODO(adonovan): consider deleting this class entirely and using Class directly.
  413    // Depset.getElementType would need to document "null means empty",

  450      //
  451:     // TODO(adonovan): consider publishing something like this as Starlark.typeClass.
  452      private static Class<?> getTypeClass(Class<?> cls) {

  489      //
  490:     // TODO(adonovan): once starlarkbuildapi has been deleted, eliminate the
  491      // getTypeClass calls here and in ElementType.of, and remove the special

src\main\java\com\google\devtools\build\lib\collect\nestedset\NestedSet.java:
  689        if (pos < 0) {
  690:         // TODO(b/176077765): remove when diagnosed.
  691          throw new IllegalStateException(

  751     */
  752:   // TODO(adonovan): move this hack into BuildEventStreamer. And rename 'size' to 'degree'.
  753    public NestedSet<E> splitIfExceedsMaximumSize(int maxDegree) {

  770  
  771:     // TODO(adonovan): (preexisting): if the last piece is a singleton, it must be inlined.
  772  

src\main\java\com\google\devtools\build\lib\collect\nestedset\NestedSetFingerprintCache.java:
  128      }
  129:     // TODO(b/112460990): Use the value from DigestHashFunction.getDefault(), but check for
  130      // contention.

src\main\java\com\google\devtools\build\lib\collect\nestedset\Order.java:
  102   */
  103: // TODO(bazel-team): Remove deprecated names from the documentation above.
  104  public enum Order {

src\main\java\com\google\devtools\build\lib\concurrent\AbstractQueueVisitor.java:
  536    private void reallyAwaitTermination(boolean interruptWorkers) {
  537:     // TODO(bazel-team): verify that interrupt() is safe for every use of
  538      // AbstractQueueVisitor and remove the interruptWorkers flag.

src\main\java\com\google\devtools\build\lib\concurrent\FastHotKeyAtomicLongMap.java:
  40  
  41:   // TODO(kak): Delete this in favor of create()
  42    public static <T> FastHotKeyAtomicLongMap<T> create(int concurrencyLevel /* ignored */) {

src\main\java\com\google\devtools\build\lib\concurrent\ForkJoinQuiescingExecutor.java:
  23  /** A {@link QuiescingExecutor} implementation that wraps a {@link ForkJoinPool}. */
  24: // TODO(bazel-team): This extends AQV to ensure that they share the same semantics for interrupt
  25  // handling, error propagation, and task completion. Because FJP provides a native implementation

src\main\java\com\google\devtools\build\lib\concurrent\ThreadSafety.java:
  32   */
  33: // TODO(adonovan): prefer javax.annotation.concurrent.Immutable et al.
  34  public class ThreadSafety {

src\main\java\com\google\devtools\build\lib\dynamic\DynamicSpawnStrategy.java:
  256          LocalBranch job;
  257:         // TODO(b/120910324): Prioritize jobs where the remote branch has already failed.
  258          if (options.slowRemoteTime != null

  396        boolean remoteAllowedBySpawnExecutionPolicy) {
  397:     // TODO(b/188387840): Can't use Spawn.toString() here because tests report FakeOwner instances
  398      // as the resource owner, and those cause toStrings to throw if no primary output.
  399:     // TODO(b/188402092): Even if the above is fixed, we still don't want to use Spawn.toString()
  400      // until the mnemonic is included in the output unconditionally. Too useful for the error

  470      } else {
  471:       // TODO(b/173153395): Sometimes gets thrown for currently unknown reasons.
  472        // (sometimes happens in relation to the whole dynamic execution being cancelled)

src\main\java\com\google\devtools\build\lib\dynamic\LocalBranch.java:
  141    protected void prepareFuture(RemoteBranch remoteBranch) {
  142:     // TODO(b/203094728): Maybe generify this method and move it up.
  143      this.remoteBranch = remoteBranch;

src\main\java\com\google\devtools\build\lib\events\Event.java:
  191     */
  192:   // TODO(mschaller): change code which relies on this to rely on a more structured value, using
  193    //  types less prone to interference.

  236      Location location = getLocation();
  237:     // TODO(adonovan): <no location> is just noise.
  238      return kind

src\main\java\com\google\devtools\build\lib\exec\AbstractSpawnStrategy.java:
  221      // Memoize the input mapping so that prefetchInputs can reuse it instead of recomputing it.
  222:     // TODO(ulfjack): Guard against client modification of this map.
  223      private SortedMap<PathFragment, ActionInput> lazyInputMapping;

  333  
  334:       // TODO(djasper): This should not happen as per the contract of ActionExecutionMetadata, but
  335        // there are implementations that violate the contract. Remove when those are gone.

src\main\java\com\google\devtools\build\lib\exec\FileWriteStrategy.java:
  50      actionExecutionContext.getEventHandler().post(new RunningActionEvent(action, "local"));
  51:     // TODO(ulfjack): Consider acquiring local resources here before trying to write the file.
  52      try (AutoProfiler p =

src\main\java\com\google\devtools\build\lib\exec\SingleBuildFileCache.java:
  68                          path,
  69:                         // TODO(b/199940216): should we use syscallCache here since caching anyway?
  70                          path.stat(Symlinks.FOLLOW),

src\main\java\com\google\devtools\build\lib\exec\SpawnLogContext.java:
  244        Path outputPath = execRoot.getRelative(output.getExecPathString());
  245:       // TODO(olaola): once symlink API proposal is implemented, report symlinks here.
  246        if (outputPath.exists()) {

  255      try {
  256:       // TODO(olaola): once symlink API proposal is implemented, report symlinks here.
  257        List<Dirent> sortedDirent = new ArrayList<>(path.readdir(Symlinks.NOFOLLOW));

src\main\java\com\google\devtools\build\lib\exec\SpawnRunner.java:
  190      /** An artifact expander. */
  191:     // TODO(ulfjack): This is only used for the sandbox runners to compute a set of empty
  192      // directories. We shouldn't have this and the getInputMapping method; maybe there's a way to

  197      /** A spawn input expander. */
  198:     // TODO(moroten): This is only used for the remote cache and remote execution to optimize
  199      // Merkle tree generation. Having both this and the getInputMapping method seems a bit

  297        throws InterruptedException, IOException, ExecException, ForbiddenActionInputException {
  298:     // TODO(ulfjack): Remove this default implementation. [exec-async]
  299      return FutureSpawn.immediate(exec(spawn, context));

src\main\java\com\google\devtools\build\lib\exec\SpawnStrategyRegistry.java:
  115            if (filterStrategies.getKey().isIncluded(description)) {
  116:             // TODO(schmitt): Why is this done here and not after running canExec?
  117              if (reporter != null) {

  267  
  268:     // TODO(schmitt): Using a list and autovalue so as to be able to reverse order while legacy sort
  269      //  is supported. Can be converted to same as mnemonics once legacy behavior is removed.

  447          if (!(strategy instanceof AbstractSpawnStrategy)) {
  448:           // TODO(schmitt): Check if all strategies can use the same base and remove check if so.
  449            throw createExitException(

src\main\java\com\google\devtools\build\lib\exec\StandaloneTestResult.java:
  29    public TestActionContext.TestAttemptResult.Result result() {
  30:     // TODO(b/148785690): Establish proper retry policy for flaky tests in StandaloneTestStrategy.
  31      return testResultDataBuilder().getStatus() == BlazeTestStatus.PASSED

src\main\java\com\google\devtools\build\lib\exec\StandaloneTestStrategy.java:
  75  /** Runs TestRunnerAction actions. */
  76: // TODO(bazel-team): add tests for this strategy.
  77  public class StandaloneTestStrategy extends TestStrategy {

  81            .put("TEST_SRCDIR", TestPolicy.RUNFILES_DIR)
  82:           // TODO(lberki): Remove JAVA_RUNFILES and PYTHON_RUNFILES.
  83            .put("JAVA_RUNFILES", TestPolicy.RUNFILES_DIR)

src\main\java\com\google\devtools\build\lib\exec\SymlinkTreeHelper.java:
  223        // a separate native tool to create a few runfiles.
  224:       // TODO(ulfjack): Measure performance.
  225        FileStatus stat = at.statNullable(Symlinks.FOLLOW);

  231        }
  232:       // TODO(ulfjack): provide the mode bits from FileStatus and use that to construct the correct
  233        //  chmod call here. Note that we do not have any tests for this right now. Something like

  249            } else {
  250:             // TODO(ulfjack): On Windows, this call makes a copy rather than creating a symlink.
  251              FileSystemUtils.ensureSymbolicLink(next, value.getPath().asFragment());

src\main\java\com\google\devtools\build\lib\exec\local\LocalExecutionOptions.java:
  97    public Duration getLocalSigkillGraceSeconds() {
  98:     // TODO(ulfjack): Change localSigkillGraceSeconds type to Duration.
  99      return Duration.ofSeconds(localSigkillGraceSeconds);

src\main\java\com\google\devtools\build\lib\exec\local\LocalSpawnRunner.java:
  466          setState(State.SUCCESS);
  467:         // TODO(b/62588075): Calculate wall time inside commands instead?
  468          Duration wallTime = executionStopwatch.elapsed();

src\main\java\com\google\devtools\build\lib\exec\local\XcodeLocalEnvProvider.java:
  92      // Empty developer dir indicates to use the system default.
  93:     // TODO(bazel-team): Bazel's view of the xcode version and developer dir should be explicitly
  94      // set for build hermeticity.

src\main\java\com\google\devtools\build\lib\graph\ConcurrentCollectionWrapper.java:
  45    // These numbers were chosen based on profiling.
  46:   // TODO(dbabkin): according to VCS history this profiling info was obtained for
  47    // ArrayList/HashSet. Then HashSet had been replaced by CompactHashSet. Optimal threshold for

src\main\java\com\google\devtools\build\lib\graph\Digraph.java:
  125      checkNode(toNode);
  126:     // TODO(bazel-team): (2009) iterate only over the shorter of from.succs, to.preds.
  127      return fromNode.getSuccessors().contains(toNode);

src\main\java\com\google\devtools\build\lib\includescanning\IncludeHintsFunction.java:
  39  public class IncludeHintsFunction implements SkyFunction {
  40:   // TODO(b/111722810): the action cache is not sensitive to changes in the INCLUDE_HINTS file, so
  41    //  even though Skyframe handles changes, we may still not re-execute an affected action.

src\main\java\com\google\devtools\build\lib\includescanning\IncludeParser.java:
  833  
  834:       // TODO(bazel-team) handle multiline block comments /* */ for the cases:
  835        //   /* blah blah blah

  871  
  872:     // TODO(ulfjack): grepIncludes may be null if the corresponding attribute on the rule is missing
  873      //  (see CppHelper.getGrepIncludes) or misspelled. It would be better to disallow this case.

src\main\java\com\google\devtools\build\lib\includescanning\LegacyIncludeScanner.java:
  166          if (fileFragment.containsUplevelReferences()) {
  167:           // TODO(janakr): This branch shouldn't be necessary: we should be able to filter such
  168            // inclusions out unconditionally.

  558      }
  559:     // TODO(djasper): This code path cannot be hit with isSource being false. Verify and add
  560      // Preconditions check.

  688          // Process include hints
  689:         // TODO(ulfjack): Make this code go away. Use the new hinted inclusions instead.
  690          Hints hints = parser.getHints();

  896        for (final Artifact source : sources) {
  897:         // TODO(djasper): This looks suspicious. We should only stop based on visitedInclusions.
  898          if (!visited.add(source)) {

src\main\java\com\google\devtools\build\lib\includescanning\SpawnIncludeScanner.java:
  117      // the first place as it means we have a non-hermetic build.
  118:     // TODO(b/115503807): Fix underlying issue and consider turning this into a precondition check.
  119      if (file.getRoot().getRoot().isAbsolute()) {

  241        // around this returning null. At least some subclasses of CriticalPathComputer are affected.
  242:       // TODO(ulfjack): Either fix this or change the contract. See b/111583707 for
  243        // CriticalPathComputer.

src\main\java\com\google\devtools\build\lib\includescanning\SwigIncludeParser.java:
  28    private static int skipParentheses(byte[] chars, int pos, int end) {
  29:     // TODO(bazel-team): In theory this could be multiline, but the include scanner currently works
  30      // on a single line.

src\main\java\com\google\devtools\build\lib\io\FileSymlinkException.java:
  24    /** Returns a description of the problem that is suitable for printing to users. */
  25:   // TODO(nharmata): Consider unifying this with AbstractFileChainUniquenessFunction.
  26    public abstract String getUserFriendlyMessage();

src\main\java\com\google\devtools\build\lib\jni\JniLoader.java:
  52            try {
  53:             // TODO(jmmv): This is here only for the bootstrapping process, which builds the JNI
  54              // library and passes a -Djava.library.path to the JVM to find it. I'm sure that this

src\main\java\com\google\devtools\build\lib\packages\AbstractAttributeMapper.java:
  197        Type<?> type = attribute.getType();
  198:       // TODO(bazel-team): clean up the typing / visitation interface so we don't have to
  199        // special-case these types.

src\main\java\com\google\devtools\build\lib\packages\AggregatingAttributeMapper.java:
  573     */
  574:   // TODO(bazel-team): minimize or eliminate uses of this interface. It necessarily grows
  575    // exponentially with the number of selects in the attribute. Is that always necessary?

  616  
  617:           // TODO(gregce): visitAttribute should probably convey that an unset attribute is
  618            //  possible. Therefore we need to actually handle null values here.

src\main\java\com\google\devtools\build\lib\packages\AspectDefinition.java:
  597      public Builder execGroups(ImmutableMap<String, ExecGroup> execGroups) {
  598:       // TODO(b/230337573): validate names
  599:       // TODO(b/230337573): handle copy_from_default
  600        this.execGroups = execGroups;

src\main\java\com\google\devtools\build\lib\packages\Attribute.java:
   120  
   121:     // TODO(bazel-team): This is a hack introduced because of the bad design of the original rules.
   122      // Depot cleanup would be too expensive, but don't migrate this to Starlark.

   181  
   182:   // TODO(bazel-team): modify this interface to extend Predicate and have an extra error
   183    // message function like AllowedValues does

   307        }
   308:       // TODO(bazel-team): Set the default to be no file type, then remove this check, and also
   309        // remove all allowedFileTypes() calls without parameters.

   319        } else if (type.getLabelClass() == LabelClass.OUTPUT) {
   320:         // TODO(bazel-team): Set the default to no file type and make explicit calls instead.
   321          if (allowedFileTypesForLabels == null) {

  1499  
  1500:   // TODO(b/65746853): Remove documentation about accepting BuildConfigurationValue when uses are
  1501    // cleaned

src\main\java\com\google\devtools\build\lib\packages\AttributeMap.java:
  138  
  139:   // TODO(bazel-team): These methods are here to support computed defaults that inherit
  140    // package-level default values. Instead, we should auto-inherit and remove the computed

src\main\java\com\google\devtools\build\lib\packages\BazelStarlarkContext.java:
   38   */
   39: // TODO(b/236456122): rename BazelThreadContext, for symmetry with BazelModuleContext.
   40: // TODO(b/236456122): We should break this class up into subclasses for each kind of evaluation, as
   41  // opposed to storing specialized fields on this class and setting them to null for inapplicable

   54  //   - probably others
   55: // TODO(b/236456122): The inheritance of RuleDefinitionEnvironment should be replaced by
   56  // composition, in an appropriate subclass of this class. Things like the tools repository, network

   62    /** The phase to which this Starlark thread belongs. */
   63:   // TODO(b/236456122): Eliminate.
   64    public enum Phase {

   94  
   95:   // TODO(b/236456122): Migrate the below fields to subclasses.
   96    private final Phase phase;

  101    @Nullable private final Label analysisRuleLabel;
  102:   // TODO(b/192694287): Remove once we migrate all tests from the allowlist
  103    @Nullable private final Label networkAllowlistForTests;

  176     */
  177:   // TODO(b/236456122): The Phase enum is incomplete. Ex: `Args.map_each` evaluation happens at
  178    // execution time. So this is a misnomer and possibly wrong in those contexts.

src\main\java\com\google\devtools\build\lib\packages\BazelStarlarkEnvironment.java:
   27  
   28: // TODO(adonovan): move skyframe.PackageFunction into lib.packages so we needn't expose this and
   29  // the other env-building functions.

   42  
   43:   // TODO(#11954): Eventually the BUILD and WORKSPACE bzl dialects should converge. Right now they
   44    // only differ on the "native" object.

   78      this.workspaceBzlEnv = createWorkspaceBzlEnv(ruleClassProvider, workspaceBzlNativeBindings);
   79:     // TODO(pcloudy): this should be a bzlmod specific environment, but keep using the workspace
   80      // envirnment until we implement module rules.

  173      // Determine the "native" module.
  174:     // TODO(#11954): Use the same "native" object for both BUILD- and WORKSPACE-loaded .bzls, and
  175      // just have it be a dynamic error to call the wrong thing at the wrong time. This is a breaking

  365      // Determine "native" bindings.
  366:     // TODO(#11954): See above comment in createUninjectedBuildBzlEnv.
  367      Map<String, Object> nativeBindings = new HashMap<>(uninjectedBuildBzlNativeBindings);

src\main\java\com\google\devtools\build\lib\packages\BuildType.java:
  412     */
  413:   // TODO(adonovan): merge with packages.Selector{List,Value}.
  414    // We don't need three classes for the same concept.

  681        if (x instanceof Boolean) {
  682:         // TODO(adonovan): re-enable this under flag control; see b/116691720.
  683          // throw new ConversionException(this, x,

src\main\java\com\google\devtools\build\lib\packages\BuiltinProvider.java:
  89    public void repr(Printer printer) {
  90:     // TODO(adonovan): change to '<provider name>'.
  91      printer.append("<function " + name + ">");

src\main\java\com\google\devtools\build\lib\packages\BuiltinsInternalModule.java:
  25  
  26: // TODO(#11437): Note that if Stardoc's current design were to be long-lived, we'd want to factor
  27  // out an API into starlarkbuildapi. As it is that almost certainly won't be necessary.

src\main\java\com\google\devtools\build\lib\packages\BzlInitThreadContext.java:
  36  
  37:   // TODO(b/236456122): Are all these arguments needed for .bzl initialization?
  38    public BzlInitThreadContext(

src\main\java\com\google\devtools\build\lib\packages\BzlVisibility.java:
  60     */
  61:   // TODO(b/22193153): Negation.
  62    public static class PackageListBzlVisibility extends BzlVisibility {

src\main\java\com\google\devtools\build\lib\packages\ImplicitOutputsFunction.java:
   56   */
   57: // TODO(http://b/69387932): refactor this entire class and all callers.
   58  public abstract class ImplicitOutputsFunction {

  230  
  231:     // TODO(bazel-team): parse the templates already here
  232      @Override

  259  
  260:     // TODO(bazel-team): parse the templates already here
  261      @Override

src\main\java\com\google\devtools\build\lib\packages\Info.java:
  25   */
  26: // TODO(adonovan): simplify the hierarchies below in these steps:
  27  // - Once to_{json,proto} are gone, StructApi can be deleted; structs should never again have

src\main\java\com\google\devtools\build\lib\packages\License.java:
  75    public static LicenseType leastRestrictive(Collection<LicenseType> types) {
  76:     // TODO(gregce): move this method to LicenseCheckingModule when Bazel's tests no longer use it
  77      return types.isEmpty() ? LicenseType.BY_EXCEPTION_ONLY : Collections.max(types);

src\main\java\com\google\devtools\build\lib\packages\NativeInfo.java:
  28   */
  29: // TODO(adonovan): ensure that all subclasses are named *Info and not *Provider.
  30  // (Info is to object as Provider is to class.)

  37  
  38:   // TODO(adonovan): most subclasses pass Location.BUILTIN most of the time.
  39    // Make only those classes that pass a real location pay for it.

  48  
  49:   // TODO(adonovan): logically this should be a parameter of getValue
  50    // and getFieldNames or an instance field of this object.

  55    public Object getValue(String name) throws EvalException {
  56:     // TODO(adonovan): this seems unnecessarily complicated:
  57      // Starlark's x.name and getattr(x, name) already check the

src\main\java\com\google\devtools\build\lib\packages\NoSuchTargetException.java:
  54    private NoSuchTargetException(String message, @Nullable Label label, boolean hasTarget) {
  55:     // TODO(bazel-team): Does the exception matter?
  56      super(

src\main\java\com\google\devtools\build\lib\packages\NoSuchThingException.java:
  26  
  27:   // TODO(b/138456686): Remove Nullable and add Precondition#checkNotNull in constructor when all
  28    //  subclasses are instantiated with DetailedExitCode.

src\main\java\com\google\devtools\build\lib\packages\PackageFactory.java:
   98    /** An extension to the global namespace of the BUILD language. */
   99:   // TODO(bazel-team): this should probably be renamed PackageFactory.RuntimeExtension
  100    //  since really we're extending the Runtime with more classes.

  187     */
  188:   // TODO(bazel-team): Maybe store `version` in the RuleClassProvider rather than passing it in
  189    // here? It's an extra constructor parameter that all the tests have to give, and it's only needed

  307    /** Returns a function-value implementing "package" in the specified package context. */
  308:   // TODO(cparsons): Migrate this function to be defined with @StarlarkMethod.
  309:   // TODO(adonovan): don't call this function twice (once for BUILD files and
  310    // once for the native module) as it results in distinct objects. (Using

  393    /** A callable Starlark value that creates Rules for native RuleClasses. */
  394:   // TODO(adonovan): why is this distinct from RuleClass itself?
  395    // Make RuleClass implement StarlarkCallable directly.

  462    // in case of error before BUILD execution. Do not call it from anywhere else.
  463:   // TODO(adonovan): refactor Rule{Class,Factory}Test not to need this.
  464    public Package.Builder newPackageBuilder(

  505     */
  506:   // TODO(adonovan): is there any reason not to merge this with Package.Builder?
  507    public static class PackageContext {

  651        throws InterruptedException {
  652:     // TODO(adonovan): opt: don't precompute this value, which is rarely needed
  653      // and can be derived from Package.loads (if available) on demand.

  676  
  677:       // TODO(adonovan): save this as a field in BazelStarlarkContext.
  678        // It needn't be a second thread-local.

  736     */
  737:   // TODO(adonovan): restructure so that this is called from the sole place that executes BUILD
  738    // files. Also, make private; there's no reason for tests to call this directly.

src\main\java\com\google\devtools\build\lib\packages\PackageGroup.java:
  56  
  57:     // TODO(bazel-team): Consider refactoring so constructor takes a PackageGroupContents.
  58      ImmutableList.Builder<PackageSpecification> packagesBuilder = ImmutableList.builder();

src\main\java\com\google\devtools\build\lib\packages\PackageSpecification.java:
   71     */
   72:   // TODO(b/77598306): Remove the parameter after switching all callers to pass true.
   73    protected abstract String asString(boolean includeDoubleSlash);

   84     */
   85:   // TODO(brandjon): This method's main benefit is that it's round-trippable. We could eliminate
   86    // it in favor of asString() if we provided a public variant of fromString() that tolerates

  168     */
  169:   // TODO(b/22193153): Support negatives too.
  170    public static PackageSpecification fromStringForBzlVisibility(

src\main\java\com\google\devtools\build\lib\packages\Rule.java:
  259      Attribute attribute = ruleClass.getAttributeByNameMaybe(attributeName);
  260:     // TODO(murali): This method should be property of ruleclass not rule instance.
  261      // Further, this call to AbstractAttributeMapper.isConfigurable is delegated right back

  472      //
  473:     // TODO(b/151165647): this logic has always been wrong:
  474      // it spuriously matches occurrences of the package name earlier in the path.

  726        RawAttributeMapper attributeMap = RawAttributeMapper.of(this);
  727:       // TODO(bazel-team): Reconsider the ImplicitOutputsFunction abstraction. It doesn't seem to be
  728        // a good fit if it forces us to downcast in situations like this. It also causes

  808      if (label.getName().equals(getName())) {
  809:       // TODO(bazel-team): for now (23 Apr 2008) this is just a warning.  After
  810        // June 1st we should make it an error.

src\main\java\com\google\devtools\build\lib\packages\RuleClass.java:
   837        }
   838:       // TODO(bazel-team): move this testonly attribute setting to somewhere else
   839        // preferably to some base RuleClass implementation.

   953        for (String attributeName : attributes.keySet()) {
   954:         // TODO(b/151171037): This check would make more sense at Attribute creation time, but the
   955          // use of unchecked exceptions in these APIs makes it brittle.

  1405       */
  1406:     // TODO(b/130286108): remove the licenses attribute completely from such rules.
  1407      @CanIgnoreReturnValue

  1510       */
  1511:     // TODO(katre): Remove this once all callers use addToolchainType.
  1512      public Builder addRequiredToolchains(Collection<Label> toolchainLabels) {

  2239            && attr.getType() == BuildType.LABEL_LIST) {
  2240:         // TODO(b/149505729): Determine the right semantics for someone trying to define their own
  2241          // attribute named applicable_licenses.

  2278          //
  2279:         // TODO(b/183637322) consider this further
  2280          if (rule.getRuleClassObject().isBazelLicense()) {

  2301      // all test labels, populated later.
  2302:     // TODO(blaze-rules-team): This should be in test_suite's implementation, not here.
  2303      if (this.name.equals("test_suite") && !this.isStarlark) {

  2718    // https://docs.google.com/document/d/1uwBuhAoBNrw8tmFs-NxlssI6VRolidGYdYqagLqHWt8/edit#
  2719:   // TODO(b/183637322) consider this further
  2720    public boolean isBazelLicense() {

src\main\java\com\google\devtools\build\lib\packages\RuleFactory.java:
  256      boolean hasFunc = args.containsAttributeNamed("generator_function");
  257:     // TODO(bazel-team): resolve cases in our code where hasName && !hasFunc, or hasFunc && !hasName
  258      if (hasName || hasFunc) {

  289  
  290:     // TODO(adonovan): is it appropriate to use generatorLocation as the rule's main location?
  291      // Or would 'location' (the immediate call) be more informative? When there are errors, the

src\main\java\com\google\devtools\build\lib\packages\SelectorList.java:
  57  
  58:   // TODO(adonovan): combine Selector{List,Value} and BuildType.SelectorList.
  59    // We don't need three classes for the same concept

src\main\java\com\google\devtools\build\lib\packages\SelectorValue.java:
  46  
  47:   // TODO(adonovan): combine Selector{List,Value} and BuildType.SelectorList.
  48    // We don't need three classes for the same concept.

  56      this.dictionary = ImmutableMap.copyOf(dictionary);
  57:     // TODO(adonovan): doesn't this assume all the elements have the same type?
  58      this.type = Iterables.getFirst(dictionary.values(), null).getClass();

src\main\java\com\google\devtools\build\lib\packages\StarlarkCallbackHelper.java:
  32   */
  33: // TODO(brandjon): Consider eliminating this class by executing the callback in the same thread as
  34  // the caller, i.e. in the thread evaluating a BUILD file. This might not be possible for implicit

  45    // PackageFactory.PackageContext.
  46:   // TODO(adonovan): it would be cleaner and less error prone to
  47    // perform these callbacks in the actual loading-phase thread,

  69  
  70:   // TODO(adonovan): opt: all current callers are forced to construct a temporary Structure.
  71    // Instead, make them supply a map.

  76        thread.setPrintHandler(Event.makeDebugPrintHandler(eventHandler));
  77:       // TODO(b/236456122): If we don't eliminate StarlarkCallbackHelper entirely, we can give it
  78        // its own BazelStarlarkContext subclass.

  83                contextTemplate.getFragmentNameToClass(),
  84:               // TODO(brandjon): In principle, if we're creating a new symbol generator here, we
  85                // should have a unique owner object to associate it with for distinguishing

  95            thread, callback, buildArgumentList(struct, arguments), /*kwargs=*/ ImmutableMap.of());
  96:     } catch (ClassCastException | IllegalArgumentException e) { // TODO(adonovan): investigate
  97        throw new EvalException(e);

src\main\java\com\google\devtools\build\lib\packages\StarlarkInfo.java:
   41    // If null, uses the default format specified by the provider.
   42:   // TODO(adonovan): make the provider determine the error message
   43    // (but: this has implications for struct+struct, the equivalence

   48  
   49:   // TODO(adonovan): restrict type of provider to StarlarkProvider?
   50    // Do we ever need StarlarkInfos of BuiltinProviders? Such BuiltinProviders could

  244    public ImmutableCollection<String> getFieldNames() {
  245:     // TODO(adonovan): opt: can we avoid allocating three objects?
  246      @SuppressWarnings("unchecked")

  308     */
  309:   // TODO(bazel-team): Make the special structs that need a custom error message use a different
  310    // provider (subclassing BuiltinProvider) and a different StructImpl implementation. Then remove

src\main\java\com\google\devtools\build\lib\packages\StarlarkLibrary.java:
  285          parameters = {
  286:           // TODO(cparsons): Make 'order' keyword-only.
  287            @Param(

  393                doc = "A list of Labels.")
  394:         }, // TODO(bazel-team): document what that is
  395          // Not documented by docgen, as this is only available in BUILD files.
  396:         // TODO(cparsons): Devise a solution to document BUILD functions.
  397          documented = false,

  439          // Not documented by docgen, as this is only available in BUILD files.
  440:         // TODO(cparsons): Devise a solution to document BUILD functions.
  441          documented = false,

  463          // Not documented by docgen, as this is only available in BUILD files.
  464:         // TODO(cparsons): Devise a solution to document BUILD functions.
  465          documented = false,

src\main\java\com\google\devtools\build\lib\packages\StarlarkNativeModule.java:
   70  /** The Starlark native module. */
   71: // TODO(cparsons): Move the definition of native.package() to this class.
   72  public class StarlarkNativeModule implements StarlarkNativeModuleApi {

  141     */
  142:   // TODO(wyv): Do the proper fix described above.
  143    public static class ExistingRulesShouldBeNoOp {}
  144  
  145:   // TODO(https://github.com/bazelbuild/bazel/issues/13605): implement StarlarkMapping (after we've
  146    // added such an interface) to allow `dict(native.existing_rule(x))`.

  177      public default StarlarkIterable<String> keys() {
  178:       // TODO(https://github.com/bazelbuild/starlark/issues/203): return a sequence view which
  179        // supports efficient membership lookup (`"foo" in existing_rule("bar").keys()`), and

  194      public default StarlarkIterable<Object> starlarkValues() {
  195:       // TODO(https://github.com/bazelbuild/starlark/issues/203): return a sequence view; see keys()
  196        // for implementation concerns.

  209      public default StarlarkIterable<Tuple> items() {
  210:       // TODO(https://github.com/bazelbuild/starlark/issues/203): return a sequence view; see keys()
  211        // for implementation concerns.

  568  
  569:     // TODO(bazel-team): is licenses plural or singular?
  570      License license = BuildType.LICENSE.convertOptional(licensesO, "'exports_files' operand");

  721        if (l.getPackageName().equals(pkg.getName())) {
  722:         // TODO(https://github.com/bazelbuild/bazel/issues/13828): do not ignore the repo component
  723          // of the label.

src\main\java\com\google\devtools\build\lib\packages\StarlarkProvider.java:
  264    @Nullable
  265:   // TODO(adonovan): rename getSchema.
  266    public ImmutableList<String> getFields() {

src\main\java\com\google\devtools\build\lib\packages\StructImpl.java:
  94    final String allAttributesSuffix() {
  95:     // TODO(adonovan): when is it appropriate for the error to show all attributes,
  96      // and when to show a single spelling suggestion (the default)?

src\main\java\com\google\devtools\build\lib\packages\TargetUtils.java:
  376        // and excludedTags originate from the command line or test_suite rule.
  377:       // TODO(ulfjack): getRuleTags is inconsistent with TestFunction and other places that use
  378        // tags + size, but consistent with TestSuite.

src\main\java\com\google\devtools\build\lib\packages\Type.java:
   82   */
   83: // TODO(adonovan): update documentation here and elsewhere to use the term
   84  // "rule attribute values" or "valid attribute types" where appropriate,

  110        throws ConversionException;
  111:   // TODO(bazel-team): Check external calls (e.g. in PackageFactory), verify they always want
  112    // this over selectableConvert.

  751          throws ConversionException {
  752:       // TODO(adonovan): converge on Starlark.toIterable.
  753        if (x instanceof Sequence) {

src\main\java\com\google\devtools\build\lib\packages\WorkspaceFactory.java:
   67  
   68:   // TODO(bazel-team): document installDir
   69    /**

  270            Package.Builder builder = PackageFactory.getContext(thread).pkgBuilder;
  271:           // TODO(adonovan): this cast doesn't look safe!
  272            String externalRepoName = (String) kwargs.get("name");

  317        // the non-rule function takes precedence.
  318:       // TODO(cparsons): Rule functions should not be added to WORKSPACE files.
  319        if (!ruleClass.equals("bind")) {

  358      WorkspaceGlobals workspaceGlobals = new WorkspaceGlobals(/*allowOverride=*/ false, ruleFactory);
  359:     // TODO(bazel-team): StarlarkSemantics should be a parameter here, as native module can be
  360      // configured by flags. [brandjon: This should be possible now that we create the native module

  378        // as it must only occur at the top of a WORKSPACE file.
  379:       // TODO(cparsons): Clean up separation between environments.
  380        if (name.equals("workspace")) {

src\main\java\com\google\devtools\build\lib\packages\semantics\BuildLanguageOptions.java:
   99  
  100:   // TODO(#11437): Delete the special empty string value so that it's on unconditionally.
  101    @Option(

  430        help = "Deprecated. No-op.")
  431:   // TODO(elenairina): Move option to graveyard after the flag is removed from the global blazerc.
  432    public boolean incompatibleDisallowLegacyJavaInfo;

src\main\java\com\google\devtools\build\lib\pkgcache\CompileOneDependencyTransformer.java:
   94  
   95:     // TODO(djasper): Check whether parse_headers is disabled and just return if not.
   96      // If the rule has source targets, return it.

  181        } else if ("genrule".equals(targetRule.getRuleClass())) {
  182:         // TODO(djasper): Likely, it makes much more sense to look at the inputs of a genrule.
  183          for (OutputFile file : targetRule.getOutputFiles()) {

  200        }
  201:       // TODO(djasper): We might also want to look at LABEL types, but there currently is the
  202        // attribute xcode_config, which leads to test errors in Bazel tests.

src\main\java\com\google\devtools\build\lib\pkgcache\PathPackageLocator.java:
  228    public Path getWorkspaceFile(SyscallCache syscallCache) {
  229:     // TODO(bazel-team): correctness in the presence of changes to the location of the WORKSPACE
  230      //  file.

src\main\java\com\google\devtools\build\lib\profiler\CollectLocalResourceUsage.java:
  44  
  45:   // TODO(twerth): Make these configurable.
  46    private static final Duration BUCKET_DURATION = Duration.ofSeconds(1);

src\main\java\com\google\devtools\build\lib\profiler\GoogleAutoProfilerUtils.java:
  114              LOGGING_MESSAGE_TEMPLATE,
  115:             // TODO(janakr): confirm that this doesn't show up as a source of garbage. Since it only
  116              //  happens when we're actually logging, it shouldn't.

src\main\java\com\google\devtools\build\lib\profiler\Profiler.java:
  318     */
  319:   // TODO(ulfjack): This returns incomplete data by design. Maybe we should return the histograms on
  320    // stop instead? However, this is currently only called from one location in a module, and that

  466     */
  467:   // TODO(ulfjack): This returns incomplete data by design. Also see getTasksHistograms.
  468    public synchronized Iterable<SlowTask> getSlowestTasks() {

src\main\java\com\google\devtools\build\lib\profiler\ProfilerTask.java:
  47    VFS_READLINK("VFS readlink", Threshold.TEN_MILLIS, /* collectsSlowestInstances= */ true),
  48:   // TODO(olaola): rename to VFS_DIGEST. This refers to all digest function computations.
  49    VFS_MD5("VFS md5", Threshold.TEN_MILLIS, /* collectsSlowestInstances= */ true),

src\main\java\com\google\devtools\build\lib\profiler\grapher\ProfileGrapher.java:
  91  
  92:     // TODO(twerth): Make it possible to select the set of profiler task descriptions on the command
  93      // line.

src\main\java\com\google\devtools\build\lib\profiler\memory\AllocationTracker.java:
   53    // Used to effect a hidden StarlarkThread parameter to sampleAllocation.
   54:   // TODO(adonovan): opt: merge the three different ThreadLocals in use here.
   55    private final ThreadLocal<StarlarkThread> starlarkThread = new ThreadLocal<>();

  126    // see Sampler interface. In fact it allocates in nearly a dozen places.
  127:   // TODO(adonovan): suppress reentrant calls by setting a thread-local flag.
  128    @Override

  163        // slightly off; see the tests.
  164:       // TODO(b/149023294): remove comment when we move to a compiled representation.
  165        StarlarkCallable fn = fr.getFunction();

src\main\java\com\google\devtools\build\lib\query2\ParallelSkyQueryUtils.java:
  48   */
  49: // TODO(bazel-team): Be more deliberate about bounding memory usage here.
  50  public class ParallelSkyQueryUtils {

src\main\java\com\google\devtools\build\lib\query2\ParallelVisitorUtils.java:
  76            visitorFactory.create();
  77:       // TODO(b/131109214): It's not ideal to have an operation like this in #process that blocks on
  78        // another, potentially expensive computation. Refactor to something like "processAsync".

src\main\java\com\google\devtools\build\lib\query2\PostAnalysisQueryEnvironment.java:
  192  
  193:   // TODO(bazel-team): It's weird that this untemplated function exists. Fix? Or don't implement?
  194    @Override

  414      ImmutableList.Builder<ClassifiedDependency<T>> values = ImmutableList.builder();
  415:     // TODO(bazel-team): An even better approach would be to treat aspects and toolchains as
  416      // first-class query nodes just like targets. In other words, let query expressions reference

  521        QueryExpression caller, ThreadSafeMutableSet<T> targetNodes, OptionalInt maxDepth) {
  522:     // TODO(bazel-team): implement this. Just needed for error-checking.
  523    }

src\main\java\com\google\devtools\build\lib\query2\RBuildFilesVisitor.java:
  293      if (WorkspaceFileHelper.matchWorkspaceFileName(file)) {
  294:       // TODO(mschaller): this should not be checked at runtime. These are constants!
  295        Preconditions.checkState(

src\main\java\com\google\devtools\build\lib\query2\SkyQueryEnvironment.java:
   149    // 10k is likely a good balance between using batch efficiently and not blowing up memory.
   150:   // TODO(janakr): Unify with RecursivePackageProviderBackedTargetPatternResolver's constant.
   151    protected static final int BATCH_CALLBACK_SIZE = 10000;

   723        final Callback<Target> callback) {
   724:     // TODO(bazel-team): As in here, use concurrency for the async #eval of other QueryEnvironment
   725      // implementations.

  1328     */
  1329:   // TODO(nharmata): For queries with less than {@code batchThreshold} results, this batching
  1330    // strategy probably hurts performance since we can only start formatting results once the entire
  1331    // query is finished.
  1332:   // TODO(nharmata): This batching strategy is also potentially harmful from a memory perspective
  1333    // since when the Targets being output are backed by Package instances, we're delaying GC of the

  1337  
  1338:     // TODO(nharmata): Now that we know the wrapped callback is ThreadSafe, there's no correctness
  1339      // concern that requires the prohibition of concurrent uses of the callback; the only concern is

src\main\java\com\google\devtools\build\lib\query2\aquery\ActionGraphTextOutputFormatterCallback.java:
  229        AbstractAction abstractAction = (AbstractAction) action;
  230:       // TODO(twerth): This handles the fixed environment. We probably want to output the inherited
  231        // environment as well.

src\main\java\com\google\devtools\build\lib\query2\aquery\AqueryActionFilter.java:
  23  public class AqueryActionFilter {
  24:   // TODO(leba): Use Enum for list of filters.
  25    private final ImmutableMultimap<String, Pattern> filterMap;

src\main\java\com\google\devtools\build\lib\query2\aquery\ConfiguredTargetValueAccessor.java:
  111        throws QueryException, InterruptedException {
  112:     // TODO(bazel-team): implement this if needed.
  113      throw new QueryException(

  140        QueryExpression caller, KeyedConfiguredTargetValue from) throws QueryException {
  141:     // TODO(bazel-team): implement this if needed.
  142      throw new QueryException(

src\main\java\com\google\devtools\build\lib\query2\common\AbstractBlazeQueryEnvironment.java:
  356    /** Batch version of {@link #getTarget(Label)}. Missing targets are absent in the returned map. */
  357:   // TODO(http://b/128626678): Implement and use this in more places.
  358    public Map<Label, Target> getTargets(Iterable<Label> labels)

src\main\java\com\google\devtools\build\lib\query2\common\CommonQueryOptions.java:
  161  
  162:   // TODO(tanzhengwei): Clean up in next major release
  163    @Option(

src\main\java\com\google\devtools\build\lib\query2\cquery\ConfiguredTargetAccessor.java:
  163        QueryExpression caller, KeyedConfiguredTarget from) throws QueryException {
  164:     // TODO(bazel-team): implement this if needed.
  165      throw new QueryException(

src\main\java\com\google\devtools\build\lib\query2\cquery\CqueryThreadsafeCallback.java:
  94        for (String s : resultsToPrint) {
  95:         // TODO(ulfjack): We should use queryOptions.getLineTerminator() instead.
  96          printStream.append(s).append("\n");

src\main\java\com\google\devtools\build\lib\query2\cquery\CqueryTransitionResolver.java:
  177        BuildOptions fromOptions = config.getOptions();
  178:       // TODO(bazel-team): support transitions on Starlark-defined build flags. These require
  179        // Skyframe loading to get flag default values. See ConfigurationResolver.applyTransition

src\main\java\com\google\devtools\build\lib\query2\cquery\StarlarkOutputFormatterCallback.java:
  97                // is not safe.
  98:               // TODO(cparsons,twigg): fix it: convert value by explicit cases.
  99                result.put(optionKey, Starlark.fromJava(optionValue, null));

src\main\java\com\google\devtools\build\lib\query2\engine\BinaryOperatorExpression.java:
  139      // result.
  140:     // TODO(bazel-team): Consider keeping just the name / label of the right-hand side results
  141      // instead of the potentially heavy-weight instances of type T. This would let us process all

src\main\java\com\google\devtools\build\lib\query2\engine\SomePathFunction.java:
   96              for (T x : fromValue) {
   97:               // TODO(b/122548314): if x was already seen as part of a previous node's tc, we should
   98                // skip it here. That's subsumed by the TODO below.

  100                xSet.add(x);
  101:               // TODO(b/122548314): this transitive closure building should stop at any nodes that
  102                // have already been visited.

src\main\java\com\google\devtools\build\lib\query2\engine\StreamableQueryEnvironment.java:
  49  
  50:   // TODO(bazel-team): Make this parallel.
  51    QueryTaskFuture<Void> getDepsBounded(

src\main\java\com\google\devtools\build\lib\query2\engine\TestsFunction.java:
  287  
  288:   // TODO(ulfjack): This must match the code in TestTargetUtils. However, we don't currently want
  289    // to depend on the packages library. Extract to a neutral place?

src\main\java\com\google\devtools\build\lib\query2\query\BlazeQueryEnvironment.java:
  417  
  418:   // TODO(bazel-team): rename this to getDependentFiles when all implementations
  419    // of QueryEnvironment is fixed.

src\main\java\com\google\devtools\build\lib\query2\query\BlazeTargetAccessor.java:
  81      Set<Label> labels = attrMap.getReachableLabels(attrName, false);
  82:     // TODO(nharmata): Figure out how to make use of the package semaphore in the transitive
  83      // callsites of this method.

src\main\java\com\google\devtools\build\lib\query2\query\GraphlessBlazeQueryEnvironment.java:
  238        throws InterruptedException, QueryException {
  239:     // TODO(ulfjack): There's no need to visit the transitive closure twice. Ideally, preloading
  240      //  would return the list of targets, but it currently only returns the list of labels.

src\main\java\com\google\devtools\build\lib\query2\query\LabelVisitor.java:
  348          Target from, Attribute attribute, final Target to, int depth, int count) {
  349:       // TODO(bazel-team): The getAspects call below is duplicate work for each direct dep entailed
  350        // by an attribute's value. Additionally, we might end up enqueueing the same exact visitation

src\main\java\com\google\devtools\build\lib\query2\query\PathLabelVisitor.java:
   71      Visitor visitor = new Visitor(eventHandler, VisitorMode.SOMEPATH);
   72:     // TODO(ulfjack): It might be faster to stop the visitation once we see any 'to' Target.
   73      visitor.visitTargets(from);

  315          throws InterruptedException, NoSuchThingException {
  316:       // TODO(bazel-team): The getAspects call below is duplicate work for each direct dep entailed
  317        // by an attribute's value. Additionally, we might end up enqueueing the same exact visitation

src\main\java\com\google\devtools\build\lib\query2\query\output\BuildOutputFormatter.java:
   95          throws IOException {
   96:       // TODO(b/151151653): display the filenames in root-relative form.
   97        // This is an incompatible change, but Blaze users (and their editors)

  152  
  153:       // TODO(adonovan): also list inputs and outputs of the rule.
  154  

  167          for (StarlarkThread.CallStackEntry fr : stack) {
  168:           String loc = fr.location.toString(); // TODO(b/151151653): display root-relative
  169            // Java's String.format doesn't support

src\main\java\com\google\devtools\build\lib\query2\query\output\ConditionalEdges.java:
  120      for (Attribute attr : rule.getAttributes()) {
  121:       // TODO(bazel-team): Handle the case where dependency exists through both configurable as well
  122        // as non-configurable attributes. Currently this prints such an edge as a conditional one.

src\main\java\com\google\devtools\build\lib\query2\query\output\GraphOutputWriter.java:
  126              super.beginVisit();
  127:             // TODO(bazel-team): (2009) make this the default in Digraph.
  128              out.printf("  node [shape=box];%s", lineTerminator);

  208              super.beginVisit();
  209:             // TODO(bazel-team): (2009) make this the default in Digraph.
  210              out.println("  node [shape=box];");

src\main\java\com\google\devtools\build\lib\query2\query\output\MaxrankOutputFormatter.java:
  68      // rank(x) = max(rank(p)) + 1 foreach p in preds(x)
  69:     // TODO(bazel-team): Move to Digraph.
  70      class DP {

src\main\java\com\google\devtools\build\lib\query2\query\output\PossibleAttributeValues.java:
  65          && attributeMap.isConfigurable(attr.getName())) {
  66:       // TODO(gregce): Expand this to all collection types (we don't do this for scalars because
  67        // there's currently no syntax for expressing multiple scalar values). This unfortunately

src\main\java\com\google\devtools\build\lib\query2\query\output\ProtoOutputFormatter.java:
  346            Build.PackageGroup.newBuilder().setName(packageGroup.getLabel().toString());
  347:       // TODO(b/77598306): Migrate to format with leading double slash
  348        for (String containedPackage :

  445        // empty result with no signal that that result isn't accurate.
  446:       // TODO(bazel-team): either make the result accurate or trigger an error universally. Letting
  447        // OutputFormatter.output() throw a QueryException is a promising approach.

  505      // the union of possible values.
  506:     // TODO(bazel-team): replace below with "is ListType" check (or some variant)
  507      if (attrType == Type.STRING_LIST

src\main\java\com\google\devtools\build\lib\query2\query\output\SyntheticAttributeHashCalculator.java:
  88          if (!computedDefault.dependencies().isEmpty()) {
  89:           // TODO(b/29038463): We're skipping computed defaults that depend on other configurable
  90            // attributes because there currently isn't a way to evaluate such a computed default;

  97          } catch (IllegalArgumentException e) {
  98:           // TODO(mschaller): Catching IllegalArgumentException isn't ideal. It's thrown by
  99            // AbstractAttributeMapper#get if the attribute's type doesn't match its value, which

src\main\java\com\google\devtools\build\lib\query2\query\output\XmlOutputFormatter.java:
  161              || queryOptions.xmlShowDefaultValues) {
  162:           // TODO(b/162524370): mayTreatMultipleAsNone should be true for types that drop multiple
  163            //  values.

  210                Type.STRING_LIST,
  211:               // TODO(b/77598306): Migrate to format with leading double slash
  212                packageGroup.getContainedPackages(/*includeDoubleSlash=*/ false));

src\main\java\com\google\devtools\build\lib\remote\GrpcCacheClient.java:
  173      }
  174:     // TODO(ishikhman): add proper URI validation/parsing for remote options
  175      return !(Ascii.toLowerCase(options.remoteCache).startsWith("http://")

src\main\java\com\google\devtools\build\lib\remote\RemoteExecutionService.java:
   222  
   223:     // TODO(bazel-team): Consider adding a warning or more validation if the remoteDownloadRegex is
   224      // used without Build without the Bytes.

  1076      } catch (Exception e) {
  1077:       // TODO(bazel-team): Consider adding better case-by-case exception handling instead of just
  1078        // rethrowing

  1083  
  1084:     // TODO(bazel-team): Unify this block with the equivalent block above.
  1085      try (SilentCloseable c = Profiler.instance().profile("Remote.forcedDownload")) {

  1087      } catch (Exception e) {
  1088:       // TODO(bazel-team): Consider adding better case-by-case exception handling instead of just
  1089        // rethrowing

  1133      } else {
  1134:       // TODO(bazel-team): We should unify this if-block to rely on downloadOutputs above but, as of
  1135        // 2022-07-05,  downloadOuputs' semantics isn't exactly the same as build-without-the-bytes

src\main\java\com\google\devtools\build\lib\remote\RemoteModule.java:
   821    // change.
   822:   // TODO(ulfjack): I think we should separate downloading files from action execution. That would
   823    // also resolve issues around action invalidation - we currently invalidate actions to trigger

  1154            && !credentials.getRequestMetadata(new URI(remoteOptions.remoteCache)).isEmpty()) {
  1155:         // TODO(yannic): Make this a error aborting the build.
  1156          credentialHelperEnvironment

src\main\java\com\google\devtools\build\lib\remote\UploadManifest.java:
  182      for (Path file : files) {
  183:       // TODO(ulfjack): Maybe pass in a SpawnResult here, add a list of output files to that, and
  184        // rely on the local spawn runner to stat the files, instead of statting here.
  185        FileStatus stat = file.statIfFound(Symlinks.NOFOLLOW);
  186:       // TODO(#6547): handle the case where the parent directory of the output file is an
  187        // output symlink.

src\main\java\com\google\devtools\build\lib\remote\disk\DiskCacheClient.java:
  179      }
  180:     // TODO(ulfjack): Fsync temp here before we rename it to avoid data loss in the case of machine
  181      // crashes (the OS may reorder the writes and the rename).

src\main\java\com\google\devtools\build\lib\repository\ExternalPackageHelper.java:
  95  
  96:     // TODO(lberki): Technically, this means that the WORKSPACE file was not found. I'd love to not
  97      // have this here, but a lot of tests break without it because they rely on Bazel kinda working

src\main\java\com\google\devtools\build\lib\rules\Alias.java:
  44  
  45:     // TODO(b/129045294): Remove once the flag is flipped.
  46      if (ruleContext.getLabel().getCanonicalForm().startsWith("@bazel_tools//platforms")

src\main\java\com\google\devtools\build\lib\rules\LabelBuildSettings.java:
  53    @SerializationConstant @VisibleForSerialization
  54:   // TODO(b/65746853): find a way to do this without passing the entire BuildConfigurationValue
  55    static final LabelLateBoundDefault<BuildConfigurationValue> ACTUAL =

src\main\java\com\google\devtools\build\lib\rules\android\AarImport.java:
  461              ruleContext.getRule().getLabel().toString(),
  462:             // TODO: The aar's Java package isn't available during analysis (it's in the manifest
  463              // inside the aar, or can maybe be inferred elsewhere). This is mostly used for

src\main\java\com\google\devtools\build\lib\rules\android\AndroidBinary.java:
   318      // android-specific providers and won't show up when we collect the library resource JARs.
   319:     // TODO(b/69552500): Instead, handle this properly so R JARs aren't put on the classpath for
   320      // both binaries and libraries.

   502  
   503:     // TODO(bazel-team): Verify that proguard spec files don't contain -printmapping directions
   504      // which this -printmapping command line flag will override.

   828      // validations (b/168038145, b/180746622).
   829:     // TODO(b/180746622): remove custom filtering once semantically identical actions with
   830      //   different configurations are deduped (while still propagating actions from all splits)

  1476                > 1) {
  1477:         // TODO(b/69816569): Also use this logic if #shards > #Jars on runtime classpath
  1478          dexArchives =

  1520        Artifact multidexShards = createTemplatedMergerActions(ruleContext, shardsToMerge, dexopts);
  1521:       // TODO(b/69431301): avoid this action and give the files to apk build action directly
  1522        createZipMergeAction(ruleContext, multidexShards, classesDex);

  2040      // legacy_main_dex_list_generator is provided, use that tool instead.
  2041:     // TODO(b/147692286): Remove the old main-dex list generation that relied on ProGuard.
  2042      if (legacyMainDexListGenerator == null) {

src\main\java\com\google\devtools\build\lib\rules\android\AndroidCommon.java:
  215              .addCommandLine(commandLine.build())
  216:             // TODO(ulfjack): Use 1 CPU if multidex is true?
  217              .setResources(DEX_RESOURCE_SET);

  329      }
  330:     // TODO(corysmith): reverse the search algorithm.
  331      // Keep the index of the found so that the rightmost index is taken.

  809    private Runfiles getRunfiles() {
  810:     // TODO(bazel-team): why return any Runfiles in the neverlink case?
  811      if (asNeverLink) {

src\main\java\com\google\devtools\build\lib\rules\android\AndroidConfiguration.java:
   209  
   210:     // TODO(blaze-configurability): Mark this as deprecated in favor of --android_platforms.
   211      @Option(

   224  
   225:     // TODO(blaze-configurability): Mark this as deprecated in favor of --android_platforms.
   226      @Option(

   237  
   238:     // TODO(blaze-configurability): Mark this as deprecated in favor of --android_platforms.
   239      @Option(

   250  
   251:     // TODO(blaze-configurability): Mark this as deprecated in favor of the new min_sdk feature.
   252      @Option(

   283      // android_* rules
   284:     // TODO(blaze-configurability): Mark this as deprecated in favor of --android_platforms.
   285      @Option(

   297  
   298:     // TODO(bazel-team): Maybe merge this with --android_cpu above.
   299:     // TODO(blaze-configurability): Mark this as deprecated in favor of --android_platforms.
   300      @Option(

   433  
   434:     // TODO(b/31711689): Remove this flag when this optimization is proven to work globally.
   435      @Option(

   673  
   674:     // TODO(b/36023617): Remove this option.
   675      @Option(

   824  
   825:     // TODO(eaftan): enable this by default and delete it
   826      @Option(

   949          name = "legacy_main_dex_list_generator",
   950:         // TODO(b/147692286): Update this default value to R8's GenerateMainDexList binary after
   951          // migrating usage.

  1449    /** Returns the label provided with --legacy_main_dex_list_generator, if any. */
  1450:   // TODO(b/147692286): Move R8's main dex list tool into tool repository.
  1451    @StarlarkConfigurationField(

src\main\java\com\google\devtools\build\lib\rules\android\AndroidLibrary.java:
  139  
  140:     // TODO(b/69668042): Always correctly apply neverlinking for resources
  141      boolean isNeverLink =

  233          NativeLibs.EMPTY,
  234:         // TODO(elenairina): Use JavaCommon.isNeverlink(ruleContext) for consistency among rules.
  235          androidCommon.isNeverLink(),

src\main\java\com\google\devtools\build\lib\rules\android\AndroidLibraryResourceClassJarProvider.java:
  46  
  47:   // TODO(adonovan): rename to avoid unrelated overloading.
  48    static AndroidLibraryResourceClassJarProvider getProvider(TransitiveInfoCollection target) {

src\main\java\com\google\devtools\build\lib\rules\android\AndroidLocalTestBaseRule.java:
  94          .addAllowlistChecker(AndroidFeatureFlagSetProvider.CHECK_ALLOWLIST_IF_TRIGGERED)
  95:         // TODO(b/38314524): Move $android_resources_busybox and :android_sdk to a separate
  96          // rule so they're not defined in multiple places

src\main\java\com\google\devtools\build\lib\rules\android\AndroidManifest.java:
  367        ActionConstructionContext context, PathFragment jarPathFragment) {
  368:     // TODO(bazel-team): JavaUtil.getJavaPackageName does not check to see if the path is valid.
  369      // So we need to check for the JavaRoot.

src\main\java\com\google\devtools\build\lib\rules\android\AndroidResources.java:
  274      }
  275:     // TODO(bazel-team): Expand Fileset to verify, or remove Fileset as an option for resources.
  276      if (artifact.isFileset() || artifact.isTreeArtifact()) {

src\main\java\com\google\devtools\build\lib\rules\android\AndroidResourcesInfo.java:
  46    // An updated manifest - resource processing sometimes does additional manifest processing
  47:   // TODO(b/30817309): Remove this once resource processing no longer does manifest processing
  48    private final AndroidManifestInfo manifest;

src\main\java\com\google\devtools\build\lib\rules\android\AndroidRuleClasses.java:
   80        fromTemplates("%{name}.aar");
   81:   // TODO(b/30307842): Remove this once it is no longer needed for resources migration.
   82    public static final SafeImplicitOutputsFunction ANDROID_LIBRARY_APK =

  244      //
  245:     // TODO(bazel-team): find a stronger approach for this. One simple approach is to somehow
  246      // receive 'rule' as an AggregatingAttributeMapper instead of a RawAttributeMapper,

src\main\java\com\google\devtools\build\lib\rules\android\AndroidSdkBaseRule.java:
   99                  .allowedFileTypes(JavaSemantics.JAR))
  100:         // TODO(b/67903726): Make this attribute mandatory after updating all android_sdk rules.
  101          .add(

src\main\java\com\google\devtools\build\lib\rules\android\AndroidSdkProvider.java:
  165              ruleContext.ruleError(
  166:                 // TODO(jcater): Decide whether to rewrite message to refer to --android_platforms.
  167                  // It's unclear if we should always tell users to use --android_platforms, or if

src\main\java\com\google\devtools\build\lib\rules\android\AndroidSplitTransition.java:
  189        // Set the cpu & android_cpu.
  190:       // TODO(bazel-team): --android_cpu doesn't follow --cpu right now; it should.
  191        splitOptions.get(AndroidConfiguration.Options.class).cpu = cpu;

src\main\java\com\google\devtools\build\lib\rules\android\AndroidStarlarkData.java:
  553  
  554:     // TODO(asteinb): There should never be more than one direct resource exposed in the provider.
  555      // Can we adjust its structure to take this into account?

src\main\java\com\google\devtools\build\lib\rules\android\BusyBoxActionBuilder.java:
  42    // file.
  43:   // TODO(laszlocsomor), TODO(corysmith): restructure the Android BusyBux's flags by deprecating
  44    // list-type and list-of-list-type flags that use such problematic separators in favor of

src\main\java\com\google\devtools\build\lib\rules\android\DexArchiveAspect.java:
  325      if (isProtoLibrary(ruleContext)) {
  326:       // TODO(b/33557068): Desugar protos if needed instead of assuming they don't need desugaring
  327        result.addProvider(desugaredJars.build());

  340        if (rJar != null) {
  341:         // TODO(b/124540821): Disable R.jar desugaring (with a flag).
  342          jars.add(rJar);

  380          if (outputJarsProvider != null) {
  381:           // TODO(b/207058960): remove after enabling Starlark java proto libraries
  382            return outputJarsProvider.getJavaOutputs().stream()

src\main\java\com\google\devtools\build\lib\rules\android\ParsedAndroidResources.java:
  43  
  44:     // TODO(b/120093531): This is only used in Databinding v1.
  45      dataBindingContext.supplyLayoutInfo(builder::setDataBindingInfoZip);

src\main\java\com\google\devtools\build\lib\rules\android\ProguardHelper.java:
  259      if (mappingRequested) {
  260:       // TODO(bazel-team): if rex is enabled, the proguard map will change and then will no
  261        // longer correspond to the proto map

  432          if (javaConfiguration.splitBytecodeOptimizationPass()
  433:             // TODO(b/237004872) Remove this comparison when possible.
  434              && javaConfiguration.bytecodeOptimizationPassActions() < 2) {

  677        Label label, ActionConstructionContext context, String prefix, String name) {
  678:     // TODO(bazel-team): Remove the redundant inclusion of the rule name, as getUniqueDirectory
  679      // includes the rulename as well.

src\main\java\com\google\devtools\build\lib\rules\android\ResourceApk.java:
   33  
   34:   // TODO(bazel-team): The only fields that are legitimately nullable are javaSrcJar and
   35    // mainDexProguardConfig. The rest are marked as such due to .fromTransitiveResources().

  273  
  274:   // TODO(b/77574966): Remove this cast once we get rid of ResourceContainer and can guarantee
  275    // that only properly merged resources are passed into this object.

src\main\java\com\google\devtools\build\lib\rules\android\ResourceDependencies.java:
  264          newDirectResource.getRTxt(),
  265:         // TODO(b/117338320): This is incorrect; direct should come before transitive, and the
  266          // order should be link order instead of naive link order. However, some applications may

src\main\java\com\google\devtools\build\lib\rules\android\ValidatedAndroidResources.java:
   91          apkOut,
   92:         // TODO: remove below three when incompatibleProhibitAapt1 is on by default.
   93          rTxtOut,

  157  
  158:   // TODO(b/30307842,b/119560471): remove this; it was added for no reason, but persists because
  159    // the Starlark API is not noneable.

src\main\java\com\google\devtools\build\lib\rules\android\databinding\DataBindingV1Context.java:
  67      // The minimum Android SDK compatible with this rule.
  68:     // TODO(bazel-team): This probably should be based on the actual min-sdk from the manifest,
  69      // or an appropriate rule attribute.

src\main\java\com\google\devtools\build\lib\rules\android\databinding\DataBindingV2Context.java:
  103      // The minimum Android SDK compatible with this rule.
  104:     // TODO(bazel-team): This probably should be based on the actual min-sdk from the manifest,
  105      // or an appropriate rule attribute.

src\main\java\com\google\devtools\build\lib\rules\apple\AppleCommandLineOptions.java:
   53                + "future release.")
   54:   // TODO(b/37096178): This flag should be removed.
   55    public boolean mandatoryMinimumVersion;

   64                + "future release.")
   65:   // TODO(b/32411441): This flag should be removed.
   66    public boolean objcProviderFromLinked;

  273    // This option must only be set by those transitions for this purpose.
  274:   // TODO(bazel-team): Remove this once we have dynamic configurations but make sure that different
  275    // configurations (e.g. by min os version) always use different output paths.

  367     */
  368:   // TODO(cparsons): Update all callers to reference the actual xcode_version_config flag value.
  369    @VisibleForTesting

src\main\java\com\google\devtools\build\lib\rules\apple\AppleConfiguration.java:
  331     */
  332:   // TODO(bazel-team): This should support returning multiple platforms.
  333    @Override

  477      // platform.
  478:     // TODO(blaze-team): Default to embedded_markers when fully implemented.
  479      Arrays.stream(allPlatforms).forEach(platform -> modes.put(platform, AppleBitcodeMode.NONE));

src\main\java\com\google\devtools\build\lib\rules\apple\ApplePlatform.java:
  243     */
  244:   // TODO(cparsons): Use these values in static retrieval methods in this class.
  245    @Immutable

src\main\java\com\google\devtools\build\lib\rules\apple\XcodeConfigInfo.java:
  182    public DottedVersion getMinimumOsForPlatformType(ApplePlatform.PlatformType platformType) {
  183:     // TODO(b/37240784): Look into using only a single minimum OS flag tied to the current
  184      // apple_platform_type.

src\main\java\com\google\devtools\build\lib\rules\apple\XcodeVersionProperties.java:
  52     */
  53:   // TODO(bazel-team): The xcode version should be a well-defined value, either specified by the
  54    // user, evaluated on the local system, or set to a sensible default.

src\main\java\com\google\devtools\build\lib\rules\config\ConfigFeatureFlag.java:
  158      if (configuredValue.isPresent() && !isValidValue.apply(configuredValue.get())) {
  159:       // TODO(b/140635901): When configurationError is available, use that instead.
  160        ruleContext.ruleError(

  168      if (!configuredValue.isPresent() && !defaultValue.isPresent()) {
  169:       // TODO(b/140635901): When configurationError is available, use that instead.
  170        ruleContext.ruleError("flag has no default and must be set, but was not set");

src\main\java\com\google\devtools\build\lib\rules\config\ConfigFeatureFlagProvider.java:
  33  /** Provider for exporting value and valid value predicate of feature flags to consuming targets. */
  34: // TODO(adonovan): rename this to *Info and its constructor to *Provider.
  35  @Immutable

src\main\java\com\google\devtools\build\lib\rules\config\ConfigGlobalLibrary.java:
  70  
  71:   // TODO(b/237422931): move into testing module
  72    @Override

src\main\java\com\google\devtools\build\lib\rules\cpp\CcCommon.java:
   276  
   277:   // TODO(gnish): Delete this method once package default copts are gone.
   278    // All of the package default copts will be included in rule attribute

   300            provider.getProvider(FileProvider.class).getFilesToBuild().toList()) {
   301:         // TODO(bazel-team): We currently do not produce an error for duplicate headers and other
   302          // non-source artifacts with different labels, as that would require cleaning up the code

   758        RuleContext ruleContext, CcCompilationContext ccCompilationContext) {
   759:     // TODO(bazel-team): Use ccCompilationContext.getCompilationPrerequisites() instead; note
   760      // that this

  1016      if (!toolchain.supportsHeaderParsing()) {
  1017:       // TODO(b/159096411): Remove once supports_header_parsing has been removed from the
  1018        // cc_toolchain rule.

  1179      // Ensure that Sysroot is set properly.
  1180:     // TODO(b/129045294): We assume --incompatible_disable_genrule_cc_toolchain_dependency will
  1181      //   be flipped sooner than --incompatible_enable_cc_toolchain_resolution. Then this method

src\main\java\com\google\devtools\build\lib\rules\cpp\CcCompilationContext.java:
  1221        if (middlemanFactory == null) {
  1222:         // TODO(b/110873917): We don't have a middleman factory, therefore, we use the compilation
  1223          // prerequisites as they were passed to the builder, i.e. we use every header instead of a

  1493        public Builder addPublicHeaders(Collection<Artifact> headers) {
  1494:         // TODO(djasper): CPP_TEXTUAL_INCLUDEs are currently special cased here and in
  1495          // CppModuleMapAction. These should be moved to a place earlier in the Action construction.

  1507        public Builder addPrivateHeaders(Collection<Artifact> headers) {
  1508:         // TODO(djasper): CPP_TEXTUAL_INCLUDEs are currently special cased here and in
  1509          // CppModuleMapAction. These should be moved to a place earlier in the Action construction.

src\main\java\com\google\devtools\build\lib\rules\cpp\CcCompilationHelper.java:
   222     */
   223:   // TODO(plf): Rename so that it's not confused with CcCompilationContext and also consider
   224    // merging

   582          && !source.isTreeArtifact()) {
   583:       // TODO(plf): If it's a non-source file we ignore it. This is only the case for precompiled
   584        // files which should be forbidden in srcs of cc_library|binary and instead be migrated to

   800    /** Adds additional includes to be scanned. */
   801:   // TODO(plf): This is only needed for CLIF. Investigate whether this is strictly necessary or
   802    // there is a way to avoid include scanning for CLIF rules.

  1286      ImmutableList.Builder<CppModuleMap> builder = ImmutableList.<CppModuleMap>builder();
  1287:     // TODO(bazel-team): Here we use the implementationDeps to build the dependents of this rule's
  1288      // module map. This is technically incorrect for the following reasons:

  1415              getSourceArtifactsByType(sources, CppSource.Type.HEADER), prefixDir));
  1416:     // TODO(plf): Removing CLIF logic
  1417      builder.putAll(

  1456          for (Artifact module : Iterables.concat(modules, separateModules)) {
  1457:           // TODO(djasper): Investigate whether we need to use a label separate from that of the
  1458            // module map. It is used for per-file-copts.

  1504              builder,
  1505:             // TODO(plf): Continue removing CLIF logic from C++. Follow up changes would include
  1506              // refactoring CppSource.Type and ArtifactCategory to be classes instead of enums

  1810  
  1811:     // TODO(djasper): Make this less hacky after refactoring how the PIC/noPIC actions are created.
  1812      boolean pic = module.getFilename().contains(".pic.");

  1827              ccToolchain, ArtifactCategory.COVERAGE_DATA_FILE, outputName);
  1828:     // TODO(djasper): This is now duplicated. Refactor the various create..Action functions.
  1829      Artifact gcnoFile =

  1837      Artifact dwoFile = generateDwo ? getDwoFile(builder.getOutputFile()) : null;
  1838:     // TODO(tejohnson): Add support for ThinLTO if needed.
  1839      boolean bitcodeOutput =

src\main\java\com\google\devtools\build\lib\rules\cpp\CcLibrary.java:
  222      boolean supportsDynamicLinker = ccToolchain.supportsDynamicLinker(featureConfiguration);
  223:     // TODO(djasper): This is hacky. We should actually try to figure out whether we generate
  224      // ccOutputs.

src\main\java\com\google\devtools\build\lib\rules\cpp\CcLinkingContext.java:
  121  
  122:     // TODO(janakr): if action key context is not available, the digest can be computed lazily,
  123      // only if we are doing an equality comparison and artifacts are equal. That should never

  188     */
  189:   // TODO(bazel-team): choose less confusing names for this class and the package-level interface of
  190    // the same name.

  296        }
  297:       // TODO(cparsons): Add debug repesentation of linkstamps.
  298        printer.append("])>");

  487    public Object getStarlarkLibrariesToLink(StarlarkSemantics semantics) {
  488:     // TODO(plf): Flag can be removed already.
  489      if (semantics.getBool(BuildLanguageOptions.INCOMPATIBLE_DEPSET_FOR_LIBRARIES_TO_LINK_GETTER)) {

src\main\java\com\google\devtools\build\lib\rules\cpp\CcLinkingHelper.java:
   64    /** Contains the providers as well as the linking outputs. */
   65:   // TODO(plf): Only used by Starlark API. Remove after migrating.
   66    @Deprecated

  465      // staticLinkType.
  466:     // TODO(bazel-team): Either support non-static links or move this check to setStaticLinkType().
  467      Preconditions.checkState(

  731        soInterface = getLinkedArtifact(LinkTargetType.INTERFACE_DYNAMIC_LIBRARY);
  732:       // TODO(b/28946988): Remove this hard-coded flag.
  733        if (!featureConfiguration.isEnabled(CppRuleClasses.TARGETS_WINDOWS)) {

  963      if (linkTargetType.equals(LinkTargetType.OBJC_FULLY_LINKED_ARCHIVE)) {
  964:       // TODO(blaze-team): This unfortunate editing of the name is here bedcause Objective-C rules
  965        // were creating this type of archive without the lib prefix, unlike what the objective-c

src\main\java\com\google\devtools\build\lib\rules\cpp\CcLinkingOutputs.java:
  120  
  121:     // TODO(plf): Return a list of debug artifacts instead of lto back end artifacts and in that
  122      // same list return the .pdb file for Windows.

src\main\java\com\google\devtools\build\lib\rules\cpp\CcModule.java:
   158      Language language = parseLanguage(languageString);
   159:     // TODO(236152224): Remove the following when all Starlark objc configure_features have the
   160      // chance to migrate to using the language parameter.

  1016          CcLinkingContext.Builder ccLinkingContextBuilder = CcLinkingContext.builder();
  1017:         // TODO(b/135146460): Old API, no support for shared library, linker input won't have
  1018          //  labels.

  1069  
  1070:   // TODO(b/65151735): Remove when cc_flags is entirely from features.
  1071    @Override

  1179        ImmutableList.Builder<Feature> legacyFeaturesBuilder = ImmutableList.builder();
  1180:       // TODO(b/30109612): Remove fragile legacyCompileFlags shuffle once there are no legacy
  1181        // crosstools.

  1838            && !actions.getRuleContext().getRule().getRuleClass().equals("swift_library")) {
  1839:         // TODO(b/202252560): Fix for swift_library's implicit output.
  1840          staticLinkTargetType = LinkTargetType.ALWAYS_LINK_STATIC_LIBRARY;

  2299        throws InterruptedException, EvalException {
  2300:     // TODO(bazel-team): Rename always_link to alwayslink before delisting. Also it looks like the
  2301      //  suffix parameter can be removed since we can use `name` for the same thing.
  2302      if (checkObjectsBound(
  2303:         // TODO(b/205690414): Keep linkedArtifactNameSuffixObject protected. Use cases that are
  2304          //  passing the suffix should be migrated to using mainOutput instead where the suffix is

src\main\java\com\google\devtools\build\lib\rules\cpp\CcSkyframeFdoSupportValue.java:
  87    /** Path of the profile file passed to {@code --fdo_optimize} */
  88:   // TODO(lberki): This should be a PathFragment.
  89    // Except that CcProtoProfileProvider#getProfile() calls #exists() on it,

src\main\java\com\google\devtools\build\lib\rules\cpp\CcToolchainAttributesProvider.java:
   47   */
   48: // TODO(adonovan): rename s/Provider/Info/.
   49  public class CcToolchainAttributesProvider extends NativeInfo implements HasCcToolchainLabel {

  186      // licenses should be propagated to C++ targets.
  187:     // TODO(elenairina): Remove this and use Attribute.Builder.useOutputLicenses() on the
  188      // :cc_toolchain attribute instead.

  200      }
  201:     // TODO(b/65835260): Remove this conditional once j2objc can learn the toolchain type.
  202      if (ruleContext.attributes().has(CcToolchain.CC_TOOLCHAIN_TYPE_ATTRIBUTE_NAME)) {

  451   */
  452: // TODO(b/113849758): Remove once behavior is migrated.
  453  interface HasCcToolchainLabel extends Info {

src\main\java\com\google\devtools\build\lib\rules\cpp\CcToolchainFeatures.java:
  1657      return Caffeine.newBuilder()
  1658:         // TODO(klimek): Benchmark and tweak once we support a larger configuration.
  1659          .maximumSize(10000)

src\main\java\com\google\devtools\build\lib\rules\cpp\CcToolchainProvider.java:
  102    private final ImmutableMap<String, String> additionalMakeVariables;
  103:   // TODO(b/65151735): Remove when cc_flags is entirely from features.
  104    private final String legacyCcFlagsMakeVariable;

  346  
  347:     // TODO(bazel-team): delete all of these.
  348      result.put("CROSSTOOLTOP", crosstoolTopPathFragment.getPathString());
  349  
  350:     // TODO(bazel-team): Remove when Starlark dependencies can be updated to rely on
  351      // CcToolchainProvider.

  789     */
  790:   // TODO(bazel-team): The javadoc should clarify how this is used in Blaze.
  791    public String getAbi() {

  800     */
  801:   // TODO(bazel-team): The javadoc should clarify how this is used in Blaze.
  802    public String getAbiGlibcVersion() {

  840     */
  841:   // TODO(b/65151735): Remove when cc_flags is entirely from features.
  842    @Deprecated

src\main\java\com\google\devtools\build\lib\rules\cpp\CcToolchainProviderHelper.java:
   65        EnumSet.allOf(CppConfiguration.Tool.class).stream()
   66:           // TODO(hlopko): check dwp tool in analysis when per_object_debug_info is enabled.
   67            .filter(tool -> tool != CppConfiguration.Tool.DWP)
   68:           // TODO(tmsriram): Fix this to check if this is a llvm crosstool
   69            // and return true.  This needs changes to crosstool_config.proto.

  284        try {
  285:         // TODO(jungjw): This should probably be getExecPath.
  286          pathPrefix = PackageIdentifier.parse(packageString).getPackagePath(siblingRepositoryLayout);

  449  
  450:   // TODO(b/65151735): Remove when cc_flags is entirely from features.
  451    private static String computeLegacyCcFlagsMakeVariable(

src\main\java\com\google\devtools\build\lib\rules\cpp\CcToolchainRule.java:
  320  
  321:         // TODO(b/78578234): Make this the default and remove the late-bound versions.
  322          /* <!-- #BLAZE_RULE(cc_toolchain).ATTRIBUTE(libc_top) -->

src\main\java\com\google\devtools\build\lib\rules\cpp\CcToolchainVariables.java:
  1255    /** Builder for {@code Variables}. */
  1256:   // TODO(b/65472725): Forbid sequences with empty string in them.
  1257    public static class Builder {

src\main\java\com\google\devtools\build\lib\rules\cpp\CppActionConfigs.java:
  550                          "        expand_if_true: 'is_cc_test'",
  551:                         // TODO(b/27153401): This should probably be @loader_path on osx.
  552                          "        flag: ",

src\main\java\com\google\devtools\build\lib\rules\cpp\CppBuildInfo.java:
  41        PathFragment.create("build-info-volatile.h");
  42:   // TODO(bazel-team): (2011) Get rid of the redacted build info. We should try to make
  43    // the linkstamping process handle the case where those values are undefined.

src\main\java\com\google\devtools\build\lib\rules\cpp\CppCompileAction.java:
   180  
   181:   // TODO(b/213594908): Make CppCompileAction immutable.
   182    /**

   487  
   488:   // TODO(b/213594908): Remove this method from Action interface once CppCompileAction is immutable.
   489    @Override

   735    private List<PathFragment> getSystemIncludeDirs(List<String> compilerOptions) {
   736:     // TODO(bazel-team): parsing the command line flags here couples us to gcc- and clang-cl-style
   737      // compiler command lines; use a different way to specify system includes (for example through a

   942      }
   943:     // TODO(ulfjack): Extra actions currently ignore the client environment.
   944      for (Map.Entry<String, String> envVariable :

   980          ||
   981:         // TODO(b/145253507): Exclude objc module maps from check, due to bad interaction with
   982          // local_objc_modules feature.

  1177              // rewritten in Starlark.
  1178:             // TODO(b/187366935): Consider globbing everything eagerly instead.
  1179              fileStatus =

  1240      if (useHeaderModules) {
  1241:       // TODO(cmita): Avoid keeping state in CppCompileAction.
  1242        // There are two cases for when this method might be called:

  1458                  compileCommandLine.getCompilerOptions(getOverwrittenVariables()),
  1459:                 // TODO(b/132888308): Support MSVC, which has its own method of escaping strings.
  1460                  ParameterFileType.GCC_QUOTED,

  1841      // current build.
  1842:     // TODO(janakr): Can errors be aggregated here at least?
  1843      Collection<SkyKey> skyKeys =

src\main\java\com\google\devtools\build\lib\rules\cpp\CppCompileActionBuilder.java:
  194      } else if (CppFileTypes.CPP_HEADER.matches(sourcePath)) {
  195:       // TODO(bazel-team): Handle C headers that probably don't work in C++ mode.
  196        if (featureConfiguration.isEnabled(CppRuleClasses.PARSE_HEADERS)) {

src\main\java\com\google\devtools\build\lib\rules\cpp\CppFileTypes.java:
  256            // have '.inc' files in the module map (since they're implictly textual).
  257:           // TODO(bazel-team): Use HEADERS file type once clang-700 is the base clang we support.
  258            return OS.endsWith(artifact.getFilename(), ".h");

src\main\java\com\google\devtools\build\lib\rules\cpp\CppHelper.java:
   91  
   92:   // TODO(bazel-team): should this use Link.SHARED_LIBRARY_FILETYPES?
   93    public static final FileTypeSet SHARED_LIBRARY_FILETYPES =

  360      Label toolchainType;
  361:     // TODO(b/65835260): Remove this conditional once j2objc can learn the toolchain type.
  362      if (ruleContext.attributes().has(CcToolchain.CC_TOOLCHAIN_TYPE_ATTRIBUTE_NAME, NODEP_LABEL)) {

  392        RuleContext ruleContext, TransitiveInfoCollection dep) throws RuleErrorException {
  393:     // TODO(bazel-team): Consider checking this generally at the attribute level.
  394      if ((dep == null) || (dep.get(CcToolchainProvider.PROVIDER) == null)) {

  537      // linux default to satisfy the requirements of any implicit outputs.
  538:     // TODO(b/30132703): Remove the implicit outputs of cc_library.
  539      Artifact linuxDefault =

  595  
  596:   // TODO(bazel-team): figure out a way to merge these 2 methods. See the Todo in
  597    // CcCommonConfiguredTarget.noCoptsMatches().

  933  
  934:   // TODO(gnish): Delete this method once cc_library is fully migrated to Starlark implementation.
  935    /** Returns the suffix (_{hash}) for artifacts generated by cc_library on Windows. */

src\main\java\com\google\devtools\build\lib\rules\cpp\CppLinkAction.java:
  355  
  356:     // TODO(bazel-team): For correctness, we need to ensure the invariant that all values accessed
  357      // during the execution phase are also covered by the key. Above, we add the argv to the key,

src\main\java\com\google\devtools\build\lib\rules\cpp\CppLinkActionBuilder.java:
  144    private Artifact grepIncludes;
  145:   // TODO(plf): This is not exactly the same as `useTestOnlyFlags` but perhaps we can remove one
  146    //  of them.

  902  
  903:     // TODO(b/62693279): Cleanup once internal crosstools specify ifso building correctly.
  904      if (shouldUseLinkDynamicLibraryTool()) {

  919      dependencyInputsBuilder.addTransitive(linkActionInputs.build());
  920:     // TODO(b/62693279): Cleanup once internal crosstools specify ifso building correctly.
  921      if (shouldUseLinkDynamicLibraryTool()) {

  970      // from there, otherwise, use no execution info.
  971:     // TODO(b/27903698): Assert that the crosstool has an action_config for this action.
  972  

src\main\java\com\google\devtools\build\lib\rules\cpp\CppLinkstampCompileHelper.java:
  153        CppSemantics semantics) {
  154:     // TODO(b/34761650): Remove all this hardcoding by separating a full blown compile action.
  155      Preconditions.checkArgument(

src\main\java\com\google\devtools\build\lib\rules\cpp\CppOptions.java:
   693     */
   694:   // TODO(b/129045294): Remove once toolchain-transitions are implemented.
   695    @Option(

   875        help = "If true, the legacy provider accessible by 'dep.cc.' is removed. See #7036.")
   876:   // TODO(b/122328491): Document migration steps. See #7036.
   877    public boolean disableLegacyCcProvider;

  1186      host.libcTopLabel = hostLibcTopLabel;
  1187:     // TODO(b/129045294): Remove once toolchain-transitions are implemented.
  1188      host.targetLibcTopLabel = targetLibcTopLabel;

src\main\java\com\google\devtools\build\lib\rules\cpp\FdoHelper.java:
  363  
  364:       // TODO(zhayu): find a way to avoid hard-coding cpu architecture here (b/65582760)
  365        String rawProfileFileName = "fdocontrolz_profile.profraw";

src\main\java\com\google\devtools\build\lib\rules\cpp\FeatureConfigurationForStarlark.java:
  32   */
  33: // TODO(b/129045294): Remove once cc_toolchain has target configuration.
  34  public class FeatureConfigurationForStarlark implements FeatureConfigurationApi {

src\main\java\com\google\devtools\build\lib\rules\cpp\LibrariesToLinkCollector.java:
  168        // pass the rpath to the linker.
  169:       // TODO(#14600): Fix this by using `-Xlinker` instead of `-Wl`.
  170        ImmutableList.Builder<String> execRoots = ImmutableList.builder();

  215  
  216:     // TODO(b/78347840): Figure out how to make these Artifacts.
  217      public NestedSet<LinkerInput> getExpandedLinkerInputs() {

  529                if (member.isTreeArtifact()) {
  530:                 // TODO(b/78189629): This object filegroup is expanded at action time but wrapped
  531                  // with --start/--end-lib. There's currently no way to force these objects to be

  536                } else {
  537:                 // TODO(b/78189629): These each need to be their own LibraryToLinkValue so they're
  538                  // not wrapped in --start/--end-lib (which lets the linker leave out objects with

  619      }
  620:     // TODO(bazel-team): The LTO final link can only work if there are individual .o files on
  621      // the command line. Rather than crashing, this should issue a nice error. We will get

src\main\java\com\google\devtools\build\lib\rules\cpp\LibraryToLink.java:
  220  
  221:   // TODO(plf): This is just needed for Go, do not expose to Starlark and try to remove it. This was
  222    // introduced to let a linker input declare that it needs debug info in the executable.

src\main\java\com\google\devtools\build\lib\rules\cpp\Link.java:
  307    static boolean useStartEndLib(LinkerInput linkerInput, ArchiveType archiveType) {
  308:     // TODO(bazel-team): Figure out if PicArchives are actually used. For it to be used, both
  309      // linkingStatically and linkShared must me true, we must be in opt mode and cpu has to be k8.

src\main\java\com\google\devtools\build\lib\rules\cpp\LinkBuildVariables.java:
  182              THINLTO_INDEXING_PARAM_FILE.getVariableName(), thinltoParamFile);
  183:         // TODO(b/33846234): Remove once all the relevant crosstools don't depend on the variable.
  184          buildVariables.addStringVariable("thinlto_optional_params_file", "=" + thinltoParamFile);

  186          buildVariables.addStringVariable(THINLTO_INDEXING_PARAM_FILE.getVariableName(), "");
  187:         // TODO(b/33846234): Remove once all the relevant crosstools don't depend on the variable.
  188          buildVariables.addStringVariable("thinlto_optional_params_file", "");

src\main\java\com\google\devtools\build\lib\rules\cpp\WriteBuildInfoHeaderAction.java:
  179    private String quote(String string) {
  180:     // TODO(bazel-team): This is doesn't really work if the string contains quotes. Or a newline.
  181      // Or a backslash. Or anything unusual, really.

src\main\java\com\google\devtools\build\lib\rules\cpp\proto\CcProtoAspect.java:
  391        helper.addCcLinkingContexts(CppHelper.getLinkingContextsFromDeps(deps));
  392:       // TODO(dougk): Configure output artifact with action_config
  393        // once proto compile action is configurable from the crosstool.

src\main\java\com\google\devtools\build\lib\rules\extra\ExtraActionFactory.java:
  76  
  77:     // TODO(b/234923262): Take exec_group into consideration when selecting sh tools
  78      PathFragment shExecutable = ShToolchain.getPathOrError(context.getExecutionPlatform());

src\main\java\com\google\devtools\build\lib\rules\genquery\GenQuery.java:
  172        // `query` which is necessary to maintain legacy behavior.
  173:       // TODO(b/123122592): Complete the migration and remove this divergence.
  174        queryOptions.includeNoDepDeps = false;

src\main\java\com\google\devtools\build\lib\rules\genquery\GenQueryPackageProvider.java:
  90    public String getBaseNameForLoadedPackage(PackageIdentifier packageName) {
  91:     // TODO(b/123795023): we should have the data here but we don't have all packages for Starlark
  92      //  loads present here.

src\main\java\com\google\devtools\build\lib\rules\genrule\GenRuleBase.java:
   96      AttributeMap attributeMap = ruleContext.attributes();
   97:     // TODO(pcloudy): This should match the execution platform instead of using OS.getCurrent()
   98      if (OS.getCurrent() == OS.WINDOWS) {

  232        default:
  233:         // TODO(b/234923262): Take exec_group into consideration when selecting sh tools
  234          PathFragment shExecutable = ShToolchain.getPathOrError(ruleContext.getExecutionPlatform());

src\main\java\com\google\devtools\build\lib\rules\genrule\GenRuleBaseRule.java:
  252          <!-- #END_BLAZE_RULE.ATTRIBUTE --> */
  253:         // TODO(bazel-team): find a location to document genfiles/binfiles, link to them from here.
  254          .add(

src\main\java\com\google\devtools\build\lib\rules\java\DeployArchiveBuilder.java:
  357      }
  358:     // TODO(bazel-team): Remove?  Resources not used as input to singlejar action
  359      inputs.addAll(attributes.getResources().values());

  381  
  382:     // TODO(kmb): Consider not using getArchiveInputs, specifically because we don't want/need to
  383      // transform anything but the runtimeClasspath and b/c we currently do it twice here and below

src\main\java\com\google\devtools\build\lib\rules\java\JavaBinary.java:
  320  
  321:     // TODO(bazel-team): if (getOptions().sourceJars) then make this a dummy prerequisite for the
  322      // DeployArchiveAction ? Needs a few changes there as we can't pass inputs

src\main\java\com\google\devtools\build\lib\rules\java\JavaCcInfoProvider.java:
  28  
  29:   // TODO(b/183579145): Replace CcInfo with only linking information.
  30    private final CcInfo ccInfo;

src\main\java\com\google\devtools\build\lib\rules\java\JavaCommon.java:
  499      // Last resort: Use the name and package name of the target.
  500:     // TODO(bazel-team): this should be fixed to use a source file from the dependencies to
  501      // determine the package of the Java class.

src\main\java\com\google\devtools\build\lib\rules\java\JavaCompilationArgsProvider.java:
  117     */
  118:   // TODO(b/11285003): disallow jar files in deps, require java_import instead
  119    @Deprecated

  228       */
  229:     // TODO(bazel-team): Remove when we get rid of JavaCompilationArtifacts.
  230      @CanIgnoreReturnValue

src\main\java\com\google\devtools\build\lib\rules\java\JavaCompilationHelper.java:
  249        builder.setAdditionalOutputs(attributes.getAdditionalOutputs());
  250:       // TODO(cushon): GraalVM/native-image doesn't support service-loading for Dagger SPI plugins
  251        builder.enableHeaderCompilerDirect(false);

  908                // Use default shell environment so that those can be found.
  909:               // TODO(dslomov): revisit this. If ijar is not msys-dependent, this is not needed.
  910                .useDefaultShellEnvironment()

src\main\java\com\google\devtools\build\lib\rules\java\JavaCompileAction.java:
  118      // which use the 'Turbine' mnemonic.
  119:     // TODO(b/230333695): consider renaming to a more descriptive name
  120      TURBINE("JavacTurbine");

  181      this.compilationType = compilationType;
  182:     // TODO(djasper): The only thing that is conveyed through the executionInfo is whether worker
  183      // mode is enabled or not. Investigate whether we can store just that.

  616    public final ImmutableMap<String, String> getIncompleteEnvironmentForTesting() {
  617:     // TODO(ulfjack): AbstractAction should declare getEnvironment with a return value of type
  618      // ActionEnvironment to avoid developers misunderstanding the purpose of this method. That

src\main\java\com\google\devtools\build\lib\rules\java\JavaCompileActionBuilder.java:
  179    public JavaCompileAction build() {
  180:     // TODO(bazel-team): all the params should be calculated before getting here, and the various
  181      // aggregation code below should go away.

  241  
  242:     // TODO(b/123076347): outputDepsProto should never be null if SJD is enabled
  243      if (strictJavaDeps == StrictDepsMode.OFF || outputs.depsProto() == null) {

  343          // make variables like $(execpath ...)" stringify those paths before we get to this class.
  344:         // TODO(https://github.com/bazelbuild/bazel/issues/6526): provide direct path stripping
  345          //   support for make variable expansion.

src\main\java\com\google\devtools\build\lib\rules\java\JavaCompileActionContext.java:
  31        Artifact jdepsFile, ActionExecutionContext actionExecutionContext) throws IOException {
  32:     // TODO(djasper): Investigate caching across builds.
  33      try {

src\main\java\com\google\devtools\build\lib\rules\java\JavaConfiguration.java:
  116  
  117:   // TODO(dmarting): remove once we have a proper solution for #2539
  118    private final boolean useLegacyBazelJavaTest;

  223    @Override
  224:   // TODO(bazel-team): this is the command-line passed options, we should remove from Starlark
  225    // probably.

src\main\java\com\google\devtools\build\lib\rules\java\JavaHelper.java:
  27  /** Utility methods for use by Java-related parts of Bazel. */
  28: // TODO(bazel-team): Merge with JavaUtil.
  29  public abstract class JavaHelper {

src\main\java\com\google\devtools\build\lib\rules\java\JavaInfo.java:
  160              .addProvider(JavaCcInfoProvider.class, JavaCcInfoProvider.merge(javaCcInfoProviders))
  161:             // TODO(b/65618333): add merge function to JavaGenJarsProvider. See #3769
  162:             // TODO(iirina): merge or remove JavaCompilationInfoProvider
  163              .setRuntimeJars(runtimeJars.build().toList())

  193    /** Returns the instance for the provided providerClass, or <tt>null</tt> if not present. */
  194:   // TODO(adonovan): rename these three overloads of getProvider to avoid
  195    // confusion with the unrelated no-arg Info.getProvider method.

  304    public Sequence<Artifact> getSourceJars() {
  305:     // TODO(#4221) change return type to NestedSet<Artifact>
  306      JavaSourceJarsProvider provider = providers.getProvider(JavaSourceJarsProvider.class);

src\main\java\com\google\devtools\build\lib\rules\java\JavaInfoBuildHelper.java:
  219    private Stream<NestedSet<Artifact>> fetchSourceJars(Iterable<JavaInfo> javaInfos) {
  220:     // TODO(b/123265803): This step should be only necessary if transitive source jar doesn't
  221      // include sourcejar at this level but they should.

src\main\java\com\google\devtools\build\lib\rules\java\JavaOptions.java:
  250  
  251:   // TODO(bazel-team): This flag should ideally default to true (and eventually removed). We have
  252    // been accidentally supplying JUnit and Hamcrest deps to java_test targets indirectly via the

  347  
  348:   // TODO(b/237004872) Remove this after rollout of bytecode_optimization_pass_actions.
  349    /** If true, the OPTIMIZATION stage of the bytecode optimizer will be split across two actions. */

  626      // Note validation actions don't run in host config, so no need copying flags related to that.
  627:     // TODO(b/171078539): revisit if relevant validations are run in host config
  628      JavaOptions host = (JavaOptions) getDefault();

src\main\java\com\google\devtools\build\lib\rules\java\JavaRuleClasses.java:
  81                    .value(javaToolchainTypeRequirement(env).toolchainType()))
  82:           .add( // TODO(b/245144242): Used by IDE integration, remove when toolchains are used
  83                attr(JAVA_TOOLCHAIN_ATTRIBUTE_NAME, LABEL)

src\main\java\com\google\devtools\build\lib\rules\java\JavaRuntime.java:
   42  public class JavaRuntime implements RuleConfiguredTargetFactory {
   43:   // TODO(lberki): This is incorrect but that what the Jvm configuration fragment did. We'd have the
   44    // the ability to do better if we knew what OS the BuildConfigurationValue refers to.

  103  
  104:     // TODO(cushon): clean up uses of java_runtime in data deps and remove this
  105      Runfiles runfiles =

src\main\java\com\google\devtools\build\lib\rules\java\JavaStarlarkCommon.java:
  228    @Override
  229:   // TODO(b/78512644): migrate callers to passing explicit javacopts or using custom toolchains, and
  230    // delete

  250  
  251:   // TODO(b/65113771): Remove this method because it's incorrect.
  252    @Override

src\main\java\com\google\devtools\build\lib\rules\java\JavaTargetAttributes.java:
  382  
  383:     // TODO(bazel-team): delete the following method - users should use the built
  384      // JavaTargetAttributes instead of accessing mutable state in the Builder.

src\main\java\com\google\devtools\build\lib\rules\java\JavaToolchainProvider.java:
  408      if (ruleContext != null) {
  409:       // TODO(b/78512644): require ruleContext to be non-null after java_common.default_javac_opts
  410        // is turned down

  469    /** Returns the input Java language level */
  470:   // TODO(cushon): remove this API; it bakes a deprecated detail of the javac API into Bazel
  471    @Override

  482    /** Returns the target Java language level */
  483:   // TODO(cushon): remove this API; it bakes a deprecated detail of the javac API into Bazel
  484    @Override

src\main\java\com\google\devtools\build\lib\rules\java\JavaToolchainRule.java:
  296                  .allowedFileTypes(FileTypeSet.ANY_FILE)
  297:                 // TODO(b/170769708): set explicitly in Bazel and remove this default
  298                  .value(env.getToolsLabel("//tools/jdk:proguard_whitelister"))

src\main\java\com\google\devtools\build\lib\rules\java\ProguardLibrary.java:
  131      } else {
  132:       // TODO(b/170769708): remove this branch and require java_toolchain.proguard_allowlister to
  133        // always be a _deploy.jar

src\main\java\com\google\devtools\build\lib\rules\nativedeps\NativeDepsHelper.java:
  346      }
  347:     // TODO(b/120206809): remove debugging info here (and in this whole filename construction).
  348      String linkstampsString = Integer.toString(linkstampsSize);

src\main\java\com\google\devtools\build\lib\rules\objc\AppleCrosstoolTransition.java:
  135        // this hack.
  136:       // TODO(b/112834725): Remove this branch by unifying the distinguisher and the platform type.
  137        return;

  169        // this hack.
  170:       // TODO(b/112834725): Remove this branch by unifying the distinguisher and the platform type.
  171        return;

src\main\java\com\google\devtools\build\lib\rules\objc\AppleStarlarkCommon.java:
  357  
  358:     // TODO(b/110264170): Remove this field after clients have been migrated to use a provider
  359      // defined in Starlark and propagated by rules_apple instead.

src\main\java\com\google\devtools\build\lib\rules\objc\CompilationArtifacts.java:
  37    static class Builder {
  38:     // TODO(bazel-team): Should these be sets instead of just iterables?
  39      private Iterable<Artifact> srcs = ImmutableList.of();

  90      Builder addPrecompiledSrcs(Iterable<Artifact> precompiledSrcs) {
  91:       // TODO(ulfjack): These are ignored *except* for a check below whether they are empty.
  92        this.precompiledSrcs = Iterables.concat(this.precompiledSrcs, precompiledSrcs);

src\main\java\com\google\devtools\build\lib\rules\objc\CompilationAttributes.java:
  43  /** Provides a way to access attributes that are common to all compilation rules. */
  44: // TODO(bazel-team): Delete and move into support-specific attributes classes once ObjcCommon is
  45  // gone.

src\main\java\com\google\devtools\build\lib\rules\objc\CompilationSupport.java:
  196    /** Returns information about the given rule's compilation artifacts. */
  197:   // TODO(bazel-team): Remove this information from ObjcCommon and move it internal to this class.
  198    static CompilationArtifacts compilationArtifacts(RuleContext ruleContext) {

  655     */
  656:   // TODO(ulfjack): Use NestedSet for objFiles.
  657    @CanIgnoreReturnValue

src\main\java\com\google\devtools\build\lib\rules\objc\IntermediateArtifacts.java:
  32  /** Factory class for generating artifacts which are used as intermediate output. */
  33: // TODO(bazel-team): This should really be named DerivedArtifacts as it contains methods for
  34  // final as well as intermediate artifacts.

src\main\java\com\google\devtools\build\lib\rules\objc\J2ObjcLibraryBaseRule.java:
  44    public RuleClass build(RuleClass.Builder builder, RuleDefinitionEnvironment env) {
  45:     // TODO(rduan): Add support for package prefixes.
  46      return builder

src\main\java\com\google\devtools\build\lib\rules\objc\MultiArchBinarySupport.java:
  578    public static AppleLinkingOutputs.TargetTriplet getTargetTriplet(BuildConfigurationValue config) {
  579:     // TODO(b/177442911): Use the target platform from platform info coming from split
  580      // transition outputs instead of inferring this based on the target CPU.

src\main\java\com\google\devtools\build\lib\rules\objc\MultiArchSplitTransitionProvider.java:
   51   */
   52: // TODO(https://github.com/bazelbuild/bazel/pull/7825): Rename to MultiArchSplitTransitionFactory.
   53  public class MultiArchSplitTransitionProvider

  122        platformType = getPlatformType(platformTypeString);
  123:       // TODO(b/37096178): This should be a mandatory attribute.
  124        if (Strings.isNullOrEmpty(minimumOsVersionString)) {

  168      private final PlatformType platformType;
  169:     // TODO(b/37096178): This should be a mandatory attribute.
  170      private final Optional<DottedVersion> minimumOsVersion;

src\main\java\com\google\devtools\build\lib\rules\objc\ObjcCommon.java:
   64   */
   65: // TODO(bazel-team): Decompose and subsume area-specific logic and data into the various *Support
   66  // classes. Make sure to distinguish rule output (providers, runfiles, ...) from intermediate,

  166      Builder addDirectCcCompilationContexts(Iterable<CcInfo> ccInfos) {
  167:       // TODO(waltl): Support direct CcCompilationContexts in CcCompilationHelper.
  168        Preconditions.checkState(

  300            .addDirectCcCompilationContexts(directCCompilationContexts)
  301:           // TODO(bazel-team): This pulls in stl via
  302            // CcCompilationHelper.getStlCcCompilationContext(), but probably shouldn't.

src\main\java\com\google\devtools\build\lib\rules\objc\ObjcConfiguration.java:
   55    private final String tvosSimulatorDevice;
   56:   // TODO(b/236152224): Delete after Starlark uses are migrated to CppConfiguration.
   57    private final boolean generateLinkmap;
   58    private final boolean runMemleaks;
   59:   // TODO(b/236152224): Delete after Starlark uses are migrated to CppConfiguration.
   60    private final ImmutableList<String> copts;

   62    private final ImmutableList<String> fastbuildOptions;
   63:   // TODO(b/236152224): Delete after Starlark uses are migrated to CppConfiguration.
   64    private final boolean enableBinaryStripping;

   98    public String getIosSimulatorDevice() {
   99:     // TODO(bazel-team): Deprecate in favor of getSimulatorDeviceForPlatformType(IOS).
  100      return iosSimulatorDevice;

  104    public DottedVersion getIosSimulatorVersion() {
  105:     // TODO(bazel-team): Deprecate in favor of getSimulatorVersionForPlatformType(IOS).
  106      return iosSimulatorVersion;

src\main\java\com\google\devtools\build\lib\rules\objc\ObjcProvider.java:
   79   */
   80: // TODO(adonovan): this is an info, not a provider; rename.
   81  @Immutable

  550     */
  551:   // TODO(b/65156211): Investigate subtraction generalized to NestedSet.
  552    @SuppressWarnings("unchecked") // Due to depending on Key types, when the keys map erases type.

  560      // 3. CcLinkingContext->LibraryToLink->getArtifact()
  561:     // TODO(cpeyser): Clean up objc-cc interop.
  562      HashSet<PathFragment> avoidLibrariesSet = new HashSet<>();

src\main\java\com\google\devtools\build\lib\rules\objc\ObjcRuleClasses.java:
  283  
  284:   // TODO(bazel-team): Restrict this to actual header files only.
  285    static final FileTypeSet HDRS_TYPE = FileTypeSet.ANY_FILE;

src\main\java\com\google\devtools\build\lib\rules\objc\Value.java:
  26   */
  27: // TODO(bazel-team): Replace with AutoValue once that is supported in bazel.
  28  public class Value<V extends Value<V>> {

src\main\java\com\google\devtools\build\lib\rules\python\PyCommon.java:
  135     */
  136:   // TODO(bazel-team): Can this be simplified to instead just be (transitivePythonSources -
  137    // dependencyTransitivePythonSources)?

  185  
  186:   // TODO(bazel-team): validateSources is the result of refactoring while preserving
  187    // legacy behavior across some (but not all) Google-internal uses of PyCommon. Ideally all call

  249     */
  250:   // TODO(bazel-team): Eliminate the fallback behavior by returning an appropriate py provider from
  251    // the relevant rules.

  273      List<Artifact> sourceFiles = new ArrayList<>();
  274:     // TODO(bazel-team): Need to get the transitive deps closure, not just the sources of the rule.
  275      for (TransitiveInfoCollection src :

  350        if (!builder.getOrder().isCompatible(imports.getOrder())) {
  351:         // TODO(brandjon): We should make order an invariant of the Python provider, and move this
  352          // check into PyInfo.

  499      // BazelPythonSemantics falls back on --python_path. See toolchain.bzl.
  500:     // TODO(#7844): Remove this hack when the autodetecting toolchain has a windows implementation.
  501      if (py2RuntimeInfo != null

  665      } else if (OS.getCurrent() == OS.WINDOWS) {
  666:       // TODO(bazel-team): Here we should check target platform instead of using OS.getCurrent().
  667        // On Windows, add the python stub launcher in the set of files to build.

  823        String ruleName = target.getName();
  824:       // TODO(blaze-team) Shouldn't the same check apply for all Python targets?
  825        if (ruleName.endsWith(".py")) {

src\main\java\com\google\devtools\build\lib\rules\python\PyInfo.java:
  87          depsetHasTypeAndCompatibleOrder(transitiveSources, Artifact.TYPE, Order.COMPILE_ORDER));
  88:     // TODO(brandjon): PyCommon currently requires COMPILE_ORDER, but we'll probably want to change
  89      // that to NAIVE_LINK (preorder). In the meantime, order isn't an invariant of the provider

src\main\java\com\google\devtools\build\lib\rules\python\PythonConfiguration.java:
  46  
  47:   // TODO(brandjon): Remove this once migration to PY3-as-default is complete.
  48    private final boolean py2OutputsAreSuffixed;
  49  
  50:   // TODO(brandjon): Remove this once migration to Python toolchains is complete.
  51    private final boolean useToolchains;

src\main\java\com\google\devtools\build\lib\rules\python\PythonOptions.java:
  201  
  202:   // TODO(b/230490091): Delete this flag (see also bazelbuild issue #7741)
  203    @Option(

  211  
  212:   // TODO(b/153369373): Delete this flag.
  213    @Option(

  252    public Map<OptionDefinition, SelectRestriction> getSelectRestrictions() {
  253:     // TODO(brandjon): Instead of referencing the python_version target, whose path depends on the
  254      // tools repo name, reference a standalone documentation page instead.

  312     */
  313:   // TODO(brandjon): Consider removing this mutator now that the various flags and semantics it
  314    // used to consider are gone. We'd revert to just setting the public option field directly.

src\main\java\com\google\devtools\build\lib\rules\python\PythonVersion.java:
  31  
  32:   // TODO(#6445): Remove PY2ONLY and PY3ONLY.
  33  

src\main\java\com\google\devtools\build\lib\rules\repository\NewRepositoryFileHandler.java:
  155          } else {
  156:           // TODO(pcloudy): Don't add absolute path into markerData once it's not supported
  157            fileKey = fileValue.realRootedPath().asPath().getPathString();

  219        } else {
  220:         // TODO(dmarting): deprecate using a path for the workspace_file attribute.
  221          PathFragment file = PathFragment.create(fileAttribute);

src\main\java\com\google\devtools\build\lib\rules\repository\RepositoryDelegatorFunction.java:
  167      if (targetDirValue == null) {
  168:       // TODO(bazel-team): If this returns null, we unnecessarily recreate the symlink above on the
  169        // second execution.

src\main\java\com\google\devtools\build\lib\rules\repository\RepositoryFunction.java:
  205        } else {
  206:         // TODO(pcloudy): Removing checking absolute path, they should all be absolute label.
  207          PathFragment filePathFragment = PathFragment.create(fileKey);

src\main\java\com\google\devtools\build\lib\rules\test\ExclusiveTestStrategy.java:
  61    public ListenableFuture<Void> getTestCancelFuture(ActionOwner owner, int shard) {
  62:     // TODO(ulfjack): Exclusive tests run sequentially, and this feature exists to allow faster
  63      //  aborts of concurrent actions. It's not clear what, if anything, we should do here.

src\main\java\com\google\devtools\build\lib\rules\test\StarlarkTestingModule.java:
  102      // are ERRORs and that have the rule definition as their location.
  103:     // TODO(brandjon): Instead of accumulating events here, consider registering the rule in the
  104      // BazelStarlarkContext, and exporting such rules after module evaluation in

src\main\java\com\google\devtools\build\lib\rules\test\TestSuite.java:
   55          new ArrayList<>(ruleContext.attributes().get("tags", Type.STRING_LIST));
   56:     // TODO(ulfjack): This is inconsistent with the other places that do test_suite expansion.
   57      tagsAttribute.remove("manual");

  107      for (TransitiveInfoCollection dep : ruleContext.getPrerequisites(attributeName)) {
  108:       // TODO(bazel-team): Maybe convert the TransitiveTestsProvider into an inner interface.
  109        TransitiveTestsProvider provider = dep.getProvider(TransitiveTestsProvider.class);

src\main\java\com\google\devtools\build\lib\runtime\BlazeCommandDispatcher.java:
  183      String otherClientDescription = "";
  184:     // TODO(ulfjack): Add lock acquisition to the profiler.
  185      synchronized (commandLock) {

  329  
  330:     // TODO(ulfjack): Move the profiler initialization as early in the startup sequence as possible.
  331      // Profiler setup and shutdown must always happen in pairs. Shutdown is currently performed in

src\main\java\com\google\devtools\build\lib\runtime\BlazeOptionHandler.java:
  130      Path workspacePath = workspace.getWorkspace();
  131:     // TODO(kchodorow): Remove this once spaces are supported.
  132      if (workspacePath.getPathString().contains(" ")) {

  201      Path workspaceDirectory = workspace.getWorkspace();
  202:     // TODO(ulfjack): The working directory is passed by the client as part of CommonCommandOptions,
  203      // and we can't know it until after we've parsed the options, so use the workspace for now.

  305        // Migration of --watchfs to a command option.
  306:       // TODO(ulfjack): Get rid of the startup option and drop this code.
  307        if (runtime.getStartupOptionsProvider().getOptions(BlazeServerStartupOptions.class).watchFS) {

src\main\java\com\google\devtools\build\lib\runtime\BlazeRuntime.java:
   178  
   179:   // TODO(b/1030062): If multiple commands can ever run simultaneously, this should be a set of
   180    //  command environments, with environments removed in some after-command hook.

   737    private void shutDownModulesOnCrash(DetailedExitCode exitCode) {
   738:     // TODO(b/167592709): remove verbose logging when bug resolved.
   739      logger.atInfo().log("Shutting down modules on crash: %s", blazeModules);

  1246                try {
  1247:                 // TODO(adonovan): opt: cache seen files, as the stack often repeats the same files.
  1248                  Path path = fs.getPath(PathFragment.create(loc.file()));

src\main\java\com\google\devtools\build\lib\runtime\BlazeServerStartupOptions.java:
  308  
  309:   // TODO(bazel-team): In order to make it easier to have local watchers in open source Bazel,
  310    // turn this into a non-startup option.

  361  
  362:   // TODO(ulfjack): Make this a command option.
  363    @Option(

  404  
  405:   // TODO(b/109764197): Add OptionDocumentationCategory.BAZEL_CLIENT_OPTIONS & remove the
  406    // experimental tag once this has been tested and is ready for use.

src\main\java\com\google\devtools\build\lib\runtime\BuildEventArtifactUploaderFactoryMap.java:
  34      if (name == null && !uploaders.values().isEmpty()) {
  35:       // TODO(b/110235226): We currently choose the strategy with alphabetically first strategy,
  36        // which happens to be backwards-compatible; we need to set

src\main\java\com\google\devtools\build\lib\runtime\BuildEventStreamer.java:
  737        // pattern expanded error, so we don't post the completion event.
  738:       // TODO(b/109727414): This is brittle. It would be better to always post one PatternExpanded
  739        // event for each pattern given on the command line instead of one event for all of them

src\main\java\com\google\devtools\build\lib\runtime\BuildSummaryStatsModule.java:
  115    private void markExecutionPhaseStarted() {
  116:     // TODO(ulfjack): Make sure to use the same clock as for commandStartMillis.
  117      executionStartMillis = BlazeClock.instance().currentTimeMillis();

src\main\java\com\google\devtools\build\lib\runtime\CommandEnvironment.java:
  446    private UUID computeCommandId(UUID idFromOptions, List<String> warnings) {
  447:     // TODO(b/67895628): Stop reading ids from the environment after the compatibility window has
  448      // passed.

  646    DetailedExitCode precompleteCommand(DetailedExitCode originalExit) {
  647:     // TODO(b/138456686): this event is deprecated but is used in several places. Instead of lifting
  648      //  the ExitCode to a DetailedExitCode, see if it can be deleted.

src\main\java\com\google\devtools\build\lib\runtime\CommandLineEvent.java:
  239            // Only add the options that were added by the command line.
  240:           // TODO(b/19881919) decide the format that option source information should take and then
  241            // add all options, tagged with the source, instead of filtering out the rc options.

src\main\java\com\google\devtools\build\lib\runtime\CommandPrecompleteEvent.java:
  20   */
  21: // TODO(buchgr): Remove this event as it's not useful anymore.
  22  @Deprecated

src\main\java\com\google\devtools\build\lib\runtime\CommonCommandOptions.java:
  163    // externally if required. Option wins over environment variable, if both are set.
  164:   // TODO(b/67895628) Stop reading ids from the environment after the compatibility window has
  165    // passed.

src\main\java\com\google\devtools\build\lib\runtime\CountingArtifactGroupNamer.java:
  51      // synchronized necessary only to ensure node names are chosen uniquely and compactly.
  52:     // TODO(adgar): consider dropping compactness and unconditionally increment an AtomicLong to
  53      // pick unique node names.

src\main\java\com\google\devtools\build\lib\runtime\CriticalPathComputer.java:
  269        Action oldAction = storedComponent.getAction();
  270:       // TODO(b/120663721) Replace this fragile reference equality check with something principled.
  271        if (oldAction != newAction && !Actions.canBeShared(actionKeyContext, newAction, oldAction)) {

src\main\java\com\google\devtools\build\lib\runtime\ExecutionGraphModule.java:
  370        nodeBuilder
  371:           // TODO(vanja) consider switching prettyPrint() to description()
  372            .setDescription(event.getActionMetadata().prettyPrint())

  476            } else {
  477:             // TODO(b/227635546): Remove the bug report once we capture all cases when it can
  478              //  fire.

src\main\java\com\google\devtools\build\lib\runtime\LoadingPhaseThreadsOption.java:
  50      public LoadingPhaseThreadCountConverter() {
  51:       // TODO(jmmv): Using the number of cores has proven to yield reasonable analysis times on
  52        // Mac Pros and MacBook Pros but we should probably do better than this. (We haven't made

  63        //
  64:       // TODO(jmmv): If tests care about this, it's them who should be setting a cap.
  65        if (TestType.isInTest()) {

src\main\java\com\google\devtools\build\lib\runtime\NamedArtifactGroup.java:
   91        } else {
   92:         // TODO(b/199940216): Can fileset metadata be properly handled here?
   93          artifacts.add(

  202  
  203:     // TODO(adonovan): define equals/hashCode. Consider:
  204      // //foo generates bar/ (a tree artifact), with a single child, bar/baz, with this child an

src\main\java\com\google\devtools\build\lib\runtime\ProjectFileSupport.java:
  65        }
  66:       // TODO(bazel-team): This is currently treated as a path relative to the workspace - if the
  67        // cwd is a subdirectory of the workspace, that will be surprising, and we should interpret it

src\main\java\com\google\devtools\build\lib\runtime\StarlarkOptionsParser.java:
  126    /** Parses all pre "--" residue for Starlark options. */
  127:   // TODO(blaze-configurability): This method somewhat reinvents the wheel of
  128    // OptionsParserImpl.identifyOptionAndPossibleArgument. Consider combining. This would probably

src\main\java\com\google\devtools\build\lib\runtime\TestResultAggregator.java:
  270    private void markIncomplete(boolean skipTargetsOnFailure) {
  271:     // TODO(bazel-team): (2010) Make NotRunTestResult support both tests failed to built and
  272      // tests with no status and post it here.

src\main\java\com\google\devtools\build\lib\runtime\TestSummary.java:
  628      ImmutableList.Builder<LocalFile> localFiles = ImmutableList.builder();
  629:     // TODO(b/199940216): Can we populate metadata for these files?
  630      for (Path path : getFailedLogs()) {

src\main\java\com\google\devtools\build\lib\runtime\UiStateTracker.java:
   871    protected String countActions() {
   872:     // TODO(djasper): Iterating over the actions here is slow, but it's only done once per refresh
   873      // and thus might be faster than trying to update these values in the critical path.

  1230      if (actionsCount == 0 || oldestAction == null) {
  1231:       // TODO(b/239693084): Improve the message here.
  1232        terminalWriter.normal().append(" checking cached actions");

src\main\java\com\google\devtools\build\lib\runtime\commands\AqueryCommand.java:
  79    public BlazeCommandResult exec(CommandEnvironment env, OptionsParsingResult options) {
  80:     // TODO(twerth): Reduce overlap with CqueryCommand.
  81      AqueryOptions aqueryOptions = options.getOptions(AqueryOptions.class);

src\main\java\com\google\devtools\build\lib\runtime\commands\CleanCommand.java:
   61      shortDescription = "Removes output files and optionally stops the server.",
   62:     // TODO(bazel-team): Remove this - we inherit a huge number of unused options.
   63      inherits = {BuildCommand.class})

  179    public static boolean canUseAsync(boolean async, boolean expunge, OS os, Reporter reporter) {
  180:     // TODO(dmarting): Deactivate expunge_async on non-Linux platform until we completely fix it
  181      // for non-Linux platforms (https://github.com/bazelbuild/bazel/issues/1906).

src\main\java\com\google\devtools\build\lib\runtime\commands\InfoCommand.java:
   85  @Command(name = "info",
   86:          // TODO(bazel-team): this is not really a build command, but needs access to the
   87           // configuration options to do its job

  162                  env.syncPackageLoading(optionsParsingResult);
  163:                 // TODO(bazel-team): What if there are multiple configurations? [multi-config]
  164                  BuildOptions buildOptions = runtime.createBuildOptions(optionsParsingResult);

src\main\java\com\google\devtools\build\lib\runtime\commands\PrintActionCommand.java:
  270  
  271:       // TODO(jvg): do we want to support ruleConfiguredTarget.getOutputArtifacts()?
  272        // We do for extra actions, but as we're past the action graph building phase,

src\main\java\com\google\devtools\build\lib\runtime\commands\QueryCommand.java:
  155          env.getReporter()
  156:             // TODO(bazel-team): this is a kludge to fix a bug observed in the wild. We should make
  157              // sure no null error messages ever get in.

src\main\java\com\google\devtools\build\lib\runtime\commands\TestCommand.java:
   70    /** Returns the name of the command to ask the project file for. */
   71:   // TODO(hdm): move into BlazeRuntime?  It feels odd to duplicate the annotation here.
   72    protected String commandName() {

  150      Collection<ConfiguredTarget> testTargets = buildResult.getTestTargets();
  151:     // TODO(bazel-team): don't handle isEmpty here or fix up a bunch of tests
  152      if (buildResult.getSuccessfulTargets() == null) {

  171      }
  172:     // TODO(bazel-team): the check above shadows NO_TESTS_FOUND, but switching the conditions breaks
  173      // more tests

src\main\java\com\google\devtools\build\lib\runtime\commands\info\BuildLanguageInfoItem.java:
  129      } else if (t == BuildType.LICENSE) {
  130:       // TODO(adonovan): need dual function of parseLicense.
  131        // Treat as empty list for now.
  132      } else if (t == BuildType.DISTRIBUTIONS) {
  133:       // TODO(adonovan): need dual function of parseDistributions.
  134        // Treat as empty list for now.

src\main\java\com\google\devtools\build\lib\runtime\commands\info\ClientEnv.java:
  37      for (Map.Entry<String, String> entry : env.getAllowlistedActionEnv().entrySet()) {
  38:       // TODO(bazel-team): as the syntax of our rc-files does not support to express new-lines in
  39        // values, we produce syntax errors if the value of the entry contains a newline character.

  42      for (Map.Entry<String, String> entry : env.getAllowlistedTestEnv().entrySet()) {
  43:       // TODO(bazel-team): as the syntax of our rc-files does not support to express new-lines in
  44        // values, we produce syntax errors if the value of the entry contains a newline character.

src\main\java\com\google\devtools\build\lib\runtime\commands\info\DefaultsPackageInfoItem.java:
  28   */
  29: // TODO(lberki): Try to remove this using an incompatible flag.
  30  @Deprecated

src\main\java\com\google\devtools\build\lib\runtime\mobileinstall\MobileInstallCommand.java:
  291      List<String> cmdLine = new ArrayList<>();
  292:     // TODO(bazel-team): Get the executable path from the filesToRun provider from the aspect.
  293      BuildConfigurationValue configuration =

src\main\java\com\google\devtools\build\lib\sandbox\AbstractSandboxSpawnRunner.java:
  219  
  220:     // TODO(b/62588075): Calculate wall time inside Subprocess instead?
  221      Duration wallTime = Duration.between(startTime, Instant.now());

  353        writablePaths.add(path);
  354:       // TODO(laszlocsomor): Remove if guard when path.resolveSymbolicLinks supports non-symlink
  355:       // TODO(laszlocsomor): Figure out why OS.getCurrent() != OS.WINDOWS is required, and remove it
  356        if (OS.getCurrent() != OS.WINDOWS || path.isSymbolicLink()) {

  380        //
  381:       // TODO(laszlocsomor): Remove if guard when path.resolveSymbolicLinks supports non-symlink
  382:       // TODO(laszlocsomor): Figure out why OS.getCurrent() != OS.WINDOWS is required, and remove it
  383        if (OS.getCurrent() != OS.WINDOWS || path.isSymbolicLink()) {

src\main\java\com\google\devtools\build\lib\sandbox\DockerSandboxedSpawnRunner.java:
  295        throws UserExecException, InterruptedException {
  296:     // TODO(philwo) docker run implicitly does a docker pull if the image does not exist locally.
  297      // Pulling an image can take a long time and a user might not be aware of that. We could check

  333                dockerfile.append(String.format("RUN [\"mkdir\", \"-p\", \"%s\"]\n", workDir));
  334:               // TODO(philwo) this will fail if a user / group with the given uid / gid already
  335                // exists

src\main\java\com\google\devtools\build\lib\sandbox\RealSandboxfsProcess.java:
  122  
  123:     // TODO(jmmv): Pass flags to enable sandboxfs' debugging support (--listen_address and --debug)
  124      // when requested by the user via --sandbox_debug.  Tricky because we have to figure out how to

src\main\java\com\google\devtools\build\lib\sandbox\SandboxfsSandboxedSpawn.java:
  199    public void copyOutputs(Path targetExecRoot) throws IOException {
  200:     // TODO(jmmv): If we knew the targetExecRoot when setting up the spawn, we may be able to
  201      // configure sandboxfs so that the output files are written directly to their target locations.

  371      // sandboxfs probably doesn't support symlinks.
  372:     // TODO(jmmv): This claim is simply not true. Figure out why this code snippet was added and
  373      // address the real problem.

src\main\java\com\google\devtools\build\lib\sandbox\SandboxHelpers.java:
  82     */
  83:   // TODO(b/150963503): We are using atomic file system moves for synchronization... but Bazel
  84    // should not be able to reach this state. Which means we should probably be doing some other

src\main\java\com\google\devtools\build\lib\sandbox\SandboxModule.java:
  407  
  408:     // TODO(philwo): Does this return the correct result if one of the elements intentionally ends
  409      // in white space?

  453          env.getXattrProvider(),
  454:         // TODO(buchgr): Replace singleton by a command-scoped RunfilesTreeUpdater
  455          RunfilesTreeUpdater.INSTANCE);

src\main\java\com\google\devtools\build\lib\sandbox\WindowsSandboxUtil.java:
  78      if (exitCode == 0) {
  79:       // TODO(rongjiecomputer): Validate the version number and ensure we support it. Would be nice
  80        // to reuse

src\main\java\com\google\devtools\build\lib\server\GrpcServerImpl.java:
  151     */
  152:   // TODO(ulfjack): Move FlowControl and its tests to top-level classes.
  153    @VisibleForTesting

  388      try {
  389:       // TODO(bazel-team): Remove the following check after upgrading netty to a version with a fix
  390        //   for https://github.com/netty/netty/issues/10402

  433      } catch (InterruptedException e) {
  434:       // TODO(lberki): Handle SIGINT in a reasonable way
  435        throw new IllegalStateException(e);

  502  
  503:     // TODO(b/63925394): This information needs to be passed to the GotOptionsEvent, which does not
  504      // currently have the explicit startup options. See Improved Command Line Reporting design doc

src\main\java\com\google\devtools\build\lib\shell\Command.java:
  185     */
  186:   // TODO(ulfjack): Throw a special exception if there was a timeout.
  187    public Command(

  383  
  384:     // TODO(ulfjack): This call blocks until all input is written. If stdinInput is large (or
  385      // unbounded), then the async calls can block for a long time, and the timeout is not properly

src\main\java\com\google\devtools\build\lib\skyframe\ActionExecutionFunction.java:
   859          throws InterruptedException, ActionExecutionException {
   860:       // TODO(b/160603797): For the sake of action key computation, we should not need
   861        //  state.filesetsInsideRunfiles. In fact, for the metadataHandler, we are guaranteed to not

   903        throws InterruptedException, ActionExecutionException {
   904:     // TODO(janakr): This code's assumptions are wrong in the face of Starlark actions with unused
   905      //  inputs, since ActionExecutionExceptions can come through here and should be aggregated. Fix.

  1441        // from transient ones (e.g. IO error).
  1442:       // TODO(bazel-team): Have ActionExecutionExceptions declare their transience.
  1443        super(e, Transience.TRANSIENT);

src\main\java\com\google\devtools\build\lib\skyframe\ActionInputMapHelper.java:
  183  
  184:     // TODO(janakr: properly handle exceptions coming from here, or prove they can never happen in
  185      //  practice.

src\main\java\com\google\devtools\build\lib\skyframe\ActionMetadataHandler.java:
  639  
  640:     // TODO(bazel-team): consider avoiding a 'stat' here when the symlink target hasn't changed
  641      // and is a source file (since changes to those are checked separately).

src\main\java\com\google\devtools\build\lib\skyframe\ActionTemplateExpansionFunction.java:
  96        // Expand the action template using the list of expanded input TreeFileArtifacts.
  97:       // TODO(rduan): Add a check to verify the inputs of expanded actions are subsets of inputs
  98        // of the ActionTemplate.

src\main\java\com\google\devtools\build\lib\skyframe\ArtifactFunction.java:
  468  
  469:     // TODO(bazel-team): when is this hit?
  470      BugReport.sendBugReport(

  475    /** Describes dependencies of derived artifacts. */
  476:   // TODO(b/19539699): extend this to comprehensively support all special artifact types (e.g.
  477    // middleman, etc).

src\main\java\com\google\devtools\build\lib\skyframe\ArtifactNestedSetKey.java:
  24  
  25:   // TODO(jhorvitz): Consider sharing the nestedSetToSkyKey map in ArtifactNestedSetFunction.
  26    public static ArtifactNestedSetKey create(NestedSet<Artifact> set) {

src\main\java\com\google\devtools\build\lib\skyframe\AspectCreationException.java:
  37    private final NestedSet<Cause> causes;
  38:   // TODO(b/138456686): if warranted by a need for finer-grained details, replace the constructors
  39    //  that specify the general Code.ASPECT_CREATION_FAILED

src\main\java\com\google\devtools\build\lib\skyframe\AspectFunction.java:
  384      } catch (DependencyEvaluationException e) {
  385:       // TODO(bazel-team): consolidate all env.getListener().handle() calls in this method, like in
  386        // ConfiguredTargetFunction. This encourages clear, consistent user messages (ideally without

  592      } catch (ToolchainException e) {
  593:       // TODO(katre): better error handling
  594        throw new AspectCreationException(

  795     */
  796:   // TODO(lberki,kmb): try to avoid this, maybe by recording the attribute name in AliasProvider
  797    private static Attribute getAttributeContainingAlias(Target originalTarget) {

src\main\java\com\google\devtools\build\lib\skyframe\BuildConfigurationFunction.java:
   90        // Herein lies a hack to apply platform mappings to the baseline options.
   91:       // TODO(blaze-configurability-team): this should become unnecessary once --platforms is marked
   92        //   as EXPLICIT_IN_OUTPUT_PATH

  147  
  148:     // TODO(blaze-configurability-team): As a mild performance update, getFirst already includes
  149      //   details of the corresponding option. Could incorporate this instead of hashChosenOptions

  215        BuildOptions toOptions, Iterable<String> chosenNative, Iterable<String> chosenStarlark) {
  216:     // TODO(blaze-configurability-team): A mild performance optimization would have this be global.
  217      ImmutableMap<String, OptionInfo> optionInfoMap = OptionInfo.buildMapFrom(toOptions);

  240        }
  241:       // TODO(blaze-configurability-team): The commandline option is legacy and can be removed
  242        //   after fixing up all the associated tests.

src\main\java\com\google\devtools\build\lib\skyframe\BuildDriverFunction.java:
  138        // Unconditionally check for action conflicts.
  139:       // TODO(b/214371092): Only check when necessary.
  140        try (SilentCloseable c =

src\main\java\com\google\devtools\build\lib\skyframe\BzlCompileFunction.java:
  50   */
  51: // TODO(adonovan): actually compile. The name is a step ahead of the implementation.
  52  public class BzlCompileFunction implements SkyFunction {

src\main\java\com\google\devtools\build\lib\skyframe\BzlCompileValue.java:
  48  //
  49: // TODO(adonovan): actually compile the code. The name is a step ahead of the implementation.
  50  public abstract class BzlCompileValue implements NotComparableSkyValue {

src\main\java\com\google\devtools\build\lib\skyframe\BzlLoadCycleReporter.java:
  129        AbstractLabelCycleReporter.printCycle(cycleInfo.getCycle(), cycleMessage, printer);
  130:       // TODO(bazel-team): it would be nice to pass the Location of the load Statement in the
  131        // BUILD file.

src\main\java\com\google\devtools\build\lib\skyframe\BzlLoadFunction.java:
   156          // top-level code in bzl files if the file were reparsed to an equivalent tree).
   157:         // TODO(adonovan): this will change once it truly compiles the code (soon).
   158          // (3) A BzlCompileValue node lets us avoid redoing work on a BzlLoadFunction Skyframe

   256     */
   257:   // TODO(brandjon): Pick one of the nouns "load" and "bzl" and use that term consistently.
   258    @Nullable

   379     */
   380:   // TODO(brandjon): Consider making this even more opaque and encapsulating more of the details of
   381    // inlining. E.g., merge beginLoad/finishLoad with child state tracking, and encapsulate

   680    private Root getBuiltinsRoot(String builtinsBzlPath) {
   681:     // TODO(#11437): Remove once injection can't be disabled.
   682      if (builtinsBzlPath.isEmpty()) {

   685  
   686:     // TODO(#11437): For the non-bundled case, should we consider interning the Root rather than
   687      // constructing a new one each time?

   703                    + "--experimental_builtins_bzl_path to %workspace%");
   704:       // TODO(brandjon): Here we return a root that is underneath a package root. Since the root is
   705        // itself not a package root, we don't get the benefit of any special DiffAwareness handling.

   884          // generation), so we just return an empty repo mapping.
   885:         // TODO(wyv): disallow fallback.
   886          return RepositoryMapping.ALWAYS_FALLBACK;

  1096     */
  1097:   // TODO(brandjon): It'd be nice to pass in a single Label argument that unifies requestingPackage
  1098    // and requestingFileDescription. But some callers of PackageFunction#loadBzlModules don't have

  1119                  String.format(
  1120:                     // TODO(brandjon): Consider whether we should try to report error messages (here
  1121                      // and elsewhere) using the literal text of the load() rather than the (already

  1147      if (key instanceof BzlLoadValue.KeyForBuild) {
  1148:       // TODO(#11437): Remove ability to disable injection by setting flag to empty string.
  1149        if (builtins

  1201    // Precondition: thread has a valid transitiveDigest.
  1202:   // TODO(adonovan): executeBzlFile would make a better public API than this function.
  1203    public static void execAndExport(

  1208      // and "export" any newly assigned exportable globals.
  1209:     // TODO(adonovan): change the semantics; see b/65374671.
  1210      thread.setPostAssignHook(

  1385        // Don't chain exception cause, just incorporate the message with a prefix.
  1386:       // TODO(bazel-team): This exception should hold a Location of the requesting file's load
  1387        // statement, and code that catches it should use the location in the Event they create.

  1395                "initialization of module '%s'%s failed",
  1396:               // TODO(brandjon): This error message drops the repo part of the label.
  1397                label.toPathFragment(),

src\main\java\com\google\devtools\build\lib\skyframe\BzlLoadValue.java:
   45    private final Module module; // .bzl module (and indirectly, the entire load DAG)
   46:   // TODO(brandjon): Is this field redundant with BazelModuleContext#bzlTransitiveDigest, accessible
   47    // from the Module as client data?

  215     */
  216:   // TODO(brandjon): Question: It looks like the chunk number doesn't play any role in deciding
  217    // whether or not a repo is available for load()ing. Are we tracking incremental dependencies

  281     */
  282:   // TODO(#11437): Prevent users from trying to declare a repo named "@_builtins".
  283    @Immutable

src\main\java\com\google\devtools\build\lib\skyframe\BzlmodRepoCycleReporter.java:
  85      //                   |___________________|___|
  86:     // TODO(andreisolo): Figure out how to detect and print this kind of cycles more specifically.
  87      if (Iterables.all(

src\main\java\com\google\devtools\build\lib\skyframe\BzlmodRepoRuleFunction.java:
  212      try {
  213:       // TODO(b/22193153, wyv): Determine whether bzl-visibility should apply at all to this type of
  214        // bzl load. As it stands, this call checks that bzlFile is visible to package @//.

src\main\java\com\google\devtools\build\lib\skyframe\CachedBzlLoadDataBuilderFactory.java:
  20  /** Factory class for producing a builder for {@link CachedBzlLoadData}. */
  21: // TODO(bazel-team): It's unclear why this needs to be public and whether we need it at all. Maybe
  22  // we can just inline it into BzlLoadFunction.

src\main\java\com\google\devtools\build\lib\skyframe\ConfiguredTargetFunction.java:
  143    private final RuleClassProvider ruleClassProvider;
  144:   // TODO(b/185987566): Remove this semaphore.
  145    private final AtomicReference<Semaphore> cpuBoundSemaphore;

  285  
  286:     // TODO(janakr): this call may tie up this thread indefinitely, reducing the parallelism of
  287      //  Skyframe. This is a strict improvement over the prior state of the code, in which we ran

  317        }
  318:       // TODO(ulfjack): ConfiguredAttributeMapper (indirectly used from computeDependencies) isn't
  319        // safe to use if there are missing config conditions, so we stop here, but only if there are

  369          NestedSet<Cause> causes = state.transitiveRootCauses.build();
  370:         // TODO(bazel-team): consider reporting the error in this class vs. exporting it for
  371          // BuildTool to handle. Calling code needs to be untangled for that to work and pass tests.

  521      }
  522:     // TODO(ulfjack): This tries to match the logic in TransitiveTargetFunction /
  523      // TargetMarkerFunction. Maybe we can merge the two?

  774     */
  775:   // TODO(b/213351014): Make the control flow of this helper function more readable. This will
  776    //   involve making a corresponding change to State to match the control flow.

  986            // The precise error is reported by the dependency that failed to load.
  987:           // TODO(gregce): beautify this error: https://github.com/bazelbuild/bazel/issues/11984.
  988            ctgValue, "errors encountered resolving select() keys for " + target.getLabel());

src\main\java\com\google\devtools\build\lib\skyframe\ConfiguredTargetKey.java:
  153    public final String toString() {
  154:     // TODO(b/162809183): consider reverting to less verbose toString when bug is resolved.
  155      MoreObjects.ToStringHelper helper =

src\main\java\com\google\devtools\build\lib\skyframe\ConfiguredValueCreationException.java:
  39    private final NestedSet<Cause> rootCauses;
  40:   // TODO(b/138456686): if warranted by a need for finer-grained details, replace the constructors
  41    //  that specify the general Code.CONFIGURED_VALUE_CREATION_FAILED

src\main\java\com\google\devtools\build\lib\skyframe\DirtinessCheckerUtils.java:
  51        } catch (IOException e) {
  52:         // TODO(bazel-team): An IOException indicates a failure to get a file digest or a symlink
  53          // target, not a missing file. Such a failure really shouldn't happen, so failing early

src\main\java\com\google\devtools\build\lib\skyframe\EnvironmentBackedRecursivePackageProvider.java:
  239        for (String packageName : lookup.getPackages().toList()) {
  240:         // TODO(bazel-team): Make RecursivePkgValue return NestedSet<PathFragment> so this transform
  241          // is unnecessary.

src\main\java\com\google\devtools\build\lib\skyframe\ExternalFilesHelper.java:
  144       */
  145:     // TODO(nharmata): Consider an alternative design where we have an OutputFileDiffAwareness. This
  146      // could work but would first require that we clean up all RootedPath usage.

src\main\java\com\google\devtools\build\lib\skyframe\ExternalPackageFunction.java:
  51      // This currently cannot be null due to a hack in ExternalPackageUtil.findWorkspaceFile()
  52:     // TODO(lberki): Remove that hack and handle the case when the WORKSPACE file is not found.
  53      SkyKey key = WorkspaceFileValue.key(workspacePath);

src\main\java\com\google\devtools\build\lib\skyframe\FilesetEntryFunction.java:
  160        // to satisfy this, since any specified exclusions with multiple segments will never match.
  161:       // TODO(b/64754128): Investigate if we could have made the exclude earlier before
  162        //                   unnecessarily iterating over all the files in an excluded directory.

src\main\java\com\google\devtools\build\lib\skyframe\FilesystemValueChecker.java:
  101     */
  102:   // TODO(bazel-team): Refactor these methods so that FilesystemValueChecker only operates on a
  103    // WalkableGraph.

  380            // Count the changed directory as one "file".
  381:           // TODO(bazel-team): There are no tests for this codepath.
  382            modifiedOutputsReceiver.reportModifiedOutputFile(

src\main\java\com\google\devtools\build\lib\skyframe\FileSystemValueCheckerInferringAncestors.java:
  345    private boolean listingHasEntriesOutsideOf(RootedPath path, Set<String> allAffectedEntries) {
  346:     // TODO(192010830): Try looking up BUILD files if there is no listing -- this is a lookup we
  347      //  can speculatively try since those files are often checked against.

src\main\java\com\google\devtools\build\lib\skyframe\GlobFunction.java:
  218          if (direntType == Dirent.Type.SYMLINK) {
  219:           // TODO(bazel-team): Consider extracting the symlink resolution logic.
  220            // For symlinks, look up the corresponding FileValue. This ensures that if the symlink

src\main\java\com\google\devtools\build\lib\skyframe\IncrementalArtifactConflictFinder.java:
  243  
  244:   // TODO(b/214389062) Fix the issue with SolibSymlinkAction before launch.
  245    private static Artifact getOwningArtifactFromTrie(Object trieNode) {

src\main\java\com\google\devtools\build\lib\skyframe\LocalRepositoryLookupFunction.java:
  155        } catch (PackageFunctionException e) {
  156:         // TODO(jcater): When WFF is rewritten to not throw a PFE, update this.
  157          throw new LocalRepositoryLookupFunctionException(

  207  
  208:       // TODO(bazel-team): This loop can be quadratic in the number of load() statements, consider
  209        // rewriting or unrolling.

src\main\java\com\google\devtools\build\lib\skyframe\MacOSXFsEventsDiffAwareness.java:
  75      // case; if you change init(), then you also need to update {@link #getCurrentView}.
  76:     // TODO(jmmv): This can break if the user interrupts as anywhere in this function.
  77      Preconditions.checkState(!opened);

src\main\java\com\google\devtools\build\lib\skyframe\PackageFunction.java:
   129     */
   130:   // TODO(adonovan): when we split PackageCompileFunction out, move this there, and make it
   131    // non-public. (Since CompiledBuildFile contains a Module (the prelude), when we split it out,

   483  
   484:     // TODO(adonovan): put BUILD compilation from BUILD execution in separate Skyframe functions
   485      // like we do for .bzl files, so that we don't need to recompile BUILD files each time their

   721      for (int i = 0; i < keys.size(); i++) {
   722:       // TODO(adonovan): if get fails, report the source location
   723        // in the corresponding programLoads[i] (see caller).

   745      // Starlark symbols -- see comments in BzlLoadFunction#computeInline.)
   746:     // TODO(brandjon): Note that using a fresh InliningState in each call to this function means
   747      // that we don't get sharing between the top-level callers -- namely, the callers that retrieve

  1113          for (SkyKey includeGlobKey : includesGlobKeys) {
  1114:           // TODO(bazel-team): NestedSet expansion here is suboptimal.
  1115            boolean foundMatch = false;

  1238  
  1239:     // TODO(adonovan): opt: evaluate splitting this part out as a separate Skyframe
  1240      // function (PackageCompileFunction, by analogy with BzlCompileFunction).

  1451              // and then reassign it later. (It is unclear why this is neccessary).
  1452:             // TODO(adonovan): remove this flag and make loads bind file-locally,
  1453              // as in .bzl files. One can always use a renaming load statement.

  1497      // used later during execution; the two environments must match.
  1498:     // TODO(#11437): Remove conditional once disabling injection is no longer allowed.
  1499      Map<String, Object> predeclared =

src\main\java\com\google\devtools\build\lib\skyframe\PackageLookupFunction.java:
  263  
  264:       // TODO(jcater): Consider parallelizing these lookups.
  265        LocalRepositoryLookupValue localRepository;

  274          // If the directory selected isn't part of a repository, that's an error.
  275:         // TODO(katre): Improve the error message given here.
  276          throw new PackageLookupFunctionException(

src\main\java\com\google\devtools\build\lib\skyframe\PerBuildSyscallCache.java:
  174        for (Dirent dirent : (Collection<Dirent>) result) { // unchecked cast
  175:         // TODO(djasper): Dealing with filesystem case is a bit of a code smell. Figure out a better
  176          // way to store Dirents, e.g. with names normalized.

  264      try {
  265:       // TODO(bazel-team): Consider storing the Collection of Dirent values more compactly by
  266        // reusing DirectoryEntryListingStateValue#CompactSortedDirents.

src\main\java\com\google\devtools\build\lib\skyframe\PlatformMappingValue.java:
  260      parser.parse(ImmutableList.copyOf(args));
  261:     // TODO(schmitt): Parse starlark options as well.
  262      return parser;

src\main\java\com\google\devtools\build\lib\skyframe\PrepareDepsOfPatternFunction.java:
  234        // calling DepsOfTargetPreparer#getTargetsInPackage.
  235:       // TODO (bazel-team): Consider replacing this with an isTarget method on the interface.
  236        return null;

src\main\java\com\google\devtools\build\lib\skyframe\RecursivePackageProviderBackedTargetPatternResolver.java:
   69  
   70:   // TODO(janakr): Move this to a more generic place and unify with SkyQueryEnvironment's value?
   71    static final int MAX_PACKAGES_BULK_GET = 1000;

  372          }
  373:         // TODO(b/121277360): Invoking the callback while holding onto the package
  374          // semaphore can lead to deadlocks.

  378          //
  379:         // TODO(b/168142585): Make this code strictly correct in the situation where the semaphore
  380          // is bounded.

src\main\java\com\google\devtools\build\lib\skyframe\RecursivePkgValueRootPackageExtractor.java:
  69        for (String packageName : lookup.getPackages().toList()) {
  70:         // TODO(bazel-team): Make RecursivePkgValue return NestedSet<PathFragment> so this transform
  71          // is unnecessary.

src\main\java\com\google\devtools\build\lib\skyframe\RepositoryMappingFunction.java:
  70                          StarlarkBuiltinsValue.BUILTINS_REPO,
  71:                         // TODO(wyv): Google internal tests that have blzmod enabled fail because
  72                          //  they try to access cpp tools targets in the main repo from inside the

src\main\java\com\google\devtools\build\lib\skyframe\SequencedSkyframeExecutor.java:
  923    public void deleteOldNodes(long versionWindowForDirtyGc) {
  924:     // TODO(bazel-team): perhaps we should come up with a separate GC class dedicated to maintaining
  925      // value garbage. If we ever do so, this logic should be moved there.

src\main\java\com\google\devtools\build\lib\skyframe\SkyframeActionExecutor.java:
   638        if (replayActionOutErr) {
   639:         // TODO(ulfjack): This assumes that the stdout/stderr files are unmodified. It would be
   640          //  better to integrate them with the action cache and rerun the action when they change.

  1000            // is rewound.
  1001:           // TODO(ulfjack): Change the uses of ActionStartedEvent and ActionCompletionEvent such
  1002            // that they can be reposted when rewinding and simplify this code path. Maybe also keep

  1049          if (useAsyncExecution) {
  1050:           // TODO(ulfjack): This causes problems in that REMOTE_EXECUTION segments now heavily
  1051            // overlap in the Json profile, which the renderer isn't able to handle. We should move

src\main\java\com\google\devtools\build\lib\skyframe\SkyframeBuildView.java:
  256  
  257:   // TODO(schmitt): This method assumes that the only option that can cause multiple target
  258    //  configurations is --cpu which (with the presence of split transitions) is no longer true.

  327        ImmutableSet<ConfiguredTarget> topLevelTargets, ImmutableSet<AspectKey> topLevelAspects) {
  328:     // TODO(bazel-team): Consider clearing packages too to save more memory.
  329      skyframeAnalysisWasDiscarded = true;

  942        BuildConfigurationKey configKey = actionLookupKey.getConfigurationKey();
  943:       // TODO(b/210710338) Replace with a more appropriate event.
  944        eventBus.post(

src\main\java\com\google\devtools\build\lib\skyframe\SkyframeErrorProcessor.java:
  450      // cases like action conflict or execution-related errors.
  451:     // TODO(b/249690006): Can we simplify things by moving aspects events here?
  452      if (errorKey.argument() instanceof TopLevelAspectsKey) {

  494        // order to keep backwards compatibility, we de-duplicate root cause labels here.
  495:       // TODO(ulfjack): Remove this code once we've migrated to the BEP.
  496        for (Cause rootCause : ctCause.getRootCauses().toList()) {

  517                          DetailedExitCode.of(createFailureDetail("Dependency cycle", Code.CYCLE))))
  518:                 // TODO(ulfjack): We need to report the dependency cycle here. How?
  519                  : NestedSetBuilder.emptySet(Order.STABLE_ORDER);

src\main\java\com\google\devtools\build\lib\skyframe\SkyframeExecutor.java:
   283  
   284:   // TODO(bazel-team): Figure out how to handle value builders that block internally. Blocking
   285    // operations may need to be handled in another (bigger?) thread pool. Also, we should detect

   375    // A Semaphore to limit the number of in-flight execution of certain SkyFunctions to prevent OOM.
   376:   // TODO(b/185987566): Remove this semaphore.
   377    private static final int DEFAULT_SEMAPHORE_SIZE = ResourceUsage.getAvailableProcessors();

   522      map.put(
   523:         SkyFunctions.BZL_COMPILE, // TODO rename
   524          new BzlCompileFunction(pkgFactory, getDigestFunction().getHashFunction()));

   985     */
   986:   // TODO(wyv): To be safe, fail early if we're in a multi-repo setup but this is not being tracked.
   987    @Nullable

  1277  
  1278:     // TODO(bazel-team): change ModifiedFileSet to work with RootedPaths instead of PathFragments.
  1279      Collection<FileStateKey> dirtyFileStateSkyKeys =

  1455  
  1456:     // TODO(gregce): cache invalid option errors in BuildConfigurationFunction, then use a dedicated
  1457      // accessor (i.e. not the event handler) to trigger the exception below.

  1616      //
  1617:     // TODO(chiwang): Re-evaluate this after action rewinding is implemented in
  1618      //  Bazel since we can treat that case as lost inputs.

  1863     */
  1864:   // TODO(ulfjack): Remove this legacy method after switching to the Skyframe-based implementation.
  1865    public BuildConfigurationValue getConfiguration(

  1914    // Keep this in sync with {@link PrepareAnalysisPhaseFunction#getConfigurations}.
  1915:   // TODO(ulfjack): Remove this legacy method after switching to the Skyframe-based implementation.
  1916    @Override

  2509  
  2510:   // TODO(janakr): Is there a better place for this?
  2511    public final DigestHashFunction getDigestFunction() {

  2769          new RegisteredToolchainsCycleReporter(),
  2770:         // TODO(ulfjack): The BzlLoadCycleReporter swallows previously reported cycles
  2771          //  unconditionally! Is that intentional?

src\main\java\com\google\devtools\build\lib\skyframe\SkyframeExecutorWrappingWalkableGraph.java:
  61    public static SkyframeExecutorWrappingWalkableGraph of(SkyframeExecutor skyframeExecutor) {
  62:     // TODO(janakr): Provide the graph in a more principled way.
  63      return new SkyframeExecutorWrappingWalkableGraph(skyframeExecutor.getEvaluator());

src\main\java\com\google\devtools\build\lib\skyframe\SkyframePackageManager.java:
  96      }
  97:     // TODO(bazel-team): Use a PackageLookupValue here [skyframe-loading]
  98:     // TODO(bazel-team): The implementation in PackageCache also checks for duplicate packages, see
  99      // BuildFileCache#getBuildFile [skyframe-loading]

src\main\java\com\google\devtools\build\lib\skyframe\StarlarkAspectFactory.java:
   57      } catch (RuleErrorException e) {
   58:       // TODO(bazel-team): Doesn't this double-log the message, if the exception was created by
   59        // RuleContext#throwWithRuleError?

  116              Object providers = struct.getValue(field);
  117:             // TODO(adonovan): can we be more specific than iterable, and use Sequence.cast?
  118              if (!(providers instanceof Iterable)) {

src\main\java\com\google\devtools\build\lib\skyframe\StarlarkBuildSettingsDetailsFunction.java:
  48    // Use the plain strings rather than reaching into the Alias class and adding a dependency edge.
  49:   // TODO(blaze-configurability-team): We can probably afford the edge now that this is
  50    //   inside of skyframe_cluster.

src\main\java\com\google\devtools\build\lib\skyframe\StarlarkBuiltinsFunction.java:
  36  
  37: // TODO(#11437): Update the design doc to change `@builtins` -> `@_builtins`.
  38  
  39: // TODO(#11437): Add support to BzlLoadCycleReporter to pretty-print cycles involving
  40  // @_builtins.
  41  
  42: // TODO(#11437): Add tombstone feature: If a native symbol is a tombstone object, this signals to
  43  // StarlarkBuiltinsFunction that the corresponding symbol *must* be defined by @_builtins.

  48  
  49: // TODO(#11437, #11954, #11983): To the extent that BUILD-loaded .bzls and WORKSPACE-loaded .bzls
  50  // have the same environment, builtins injection should apply to both of them, not just to

src\main\java\com\google\devtools\build\lib\skyframe\StarlarkBuiltinsValue.java:
  47     */
  48:   // TODO(#11437): Add actual enforcement that users cannot define a repo named "@_builtins".
  49    @SerializationConstant

src\main\java\com\google\devtools\build\lib\skyframe\TargetCycleReporter.java:
  107        Target nextTarget = getTargetForLabel(eventHandler, nextLabel);
  108:       // TODO(aranguyen): remove this code as a result of b/128716030
  109        // This is inefficient but it's no big deal since we only do this when there's a cycle.

src\main\java\com\google\devtools\build\lib\skyframe\TargetPatternFunction.java:
  78              for (Target target : partialResult) {
  79:               // TODO(b/156899726): This will go away as soon as we remove implicit outputs from
  80                //  cc_library completely. The only downside to doing this is that implicit outputs

src\main\java\com\google\devtools\build\lib\skyframe\TargetPatternPhaseFunction.java:
  328        }
  329:       // TODO(ulfjack): This is terribly inefficient.
  330        ResolvedTargets<Target> asTargets =

src\main\java\com\google\devtools\build\lib\skyframe\TargetPatternUtil.java:
   78  
   79:   // TODO(bazel-team): look into moving this into SignedTargetPattern itself.
   80    public static ImmutableList<SignedTargetPattern> parseAllSigned(

  100    /** Exception used when an error occurs in {@link #expandTargetPatterns}. */
  101:   // TODO(bazel-team): Consolidate this and TargetParsingException. Just have the latter store the
  102    //   original unparsed pattern too.

src\main\java\com\google\devtools\build\lib\skyframe\TestExpansionFunction.java:
  48   */
  49: // TODO(ulfjack): What about test_suite rules that include each other.
  50  final class TestExpansionFunction implements SkyFunction {

  93          // If strict mode is enabled, then give an error for any non-test, non-test-suite targets.
  94:         // TODO(ulfjack): We need to throw to end the process if we happen to be in --nokeep_going,
  95          // but we can't know whether or not we are at this point.

src\main\java\com\google\devtools\build\lib\skyframe\ToolchainResolutionFunction.java:
  452        }
  453:       // TODO(katre): track missing optional toolchains?
  454      }

src\main\java\com\google\devtools\build\lib\skyframe\WatchServiceDiffAwareness.java:
  173          if (kind == StandardWatchEventKinds.OVERFLOW) {
  174:           // TODO(bazel-team): find out when an overflow might happen, and maybe handle it more
  175            // gently.

src\main\java\com\google\devtools\build\lib\skyframe\WorkspaceFileFunction.java:
  243      // -- start of historical WorkspaceFileFunction --
  244:     // TODO(adonovan): reorganize and simplify.
  245  

src\main\java\com\google\devtools\build\lib\skyframe\WorkspaceStatusValue.java:
  29   */
  30: // TODO(bazel-team): This seems to be superfluous now, but it cannot be removed without making
  31  // PrecomputedValue public instead of package-private

src\main\java\com\google\devtools\build\lib\skyframe\actiongraph\v2\ActionGraphDump.java:
  178        SpawnAction spawnAction = (SpawnAction) action;
  179:       // TODO(twerth): This handles the fixed environment. We probably want to output the inherited
  180        // environment as well.

src\main\java\com\google\devtools\build\lib\skyframe\rewinding\ActionRewindStrategy.java:
  336      }
  337:     // TODO(b/19539699): tighten signatures for ActionInputDepOwnerMap to make this impossible.
  338      String message =

src\main\java\com\google\devtools\build\lib\skyframe\serialization\ArrayCodec.java:
  36      } catch (StackOverflowError e) {
  37:       // TODO(janakr): figure out if we need to handle this better and handle it better if so.
  38        throw new SerializationException("StackOverflow serializing array", e);

  50      } catch (StackOverflowError e) {
  51:       // TODO(janakr): figure out if we need to handle this better and handle it better if so.
  52        throw new SerializationException("StackOverflow deserializing array", e);

src\main\java\com\google\devtools\build\lib\skyframe\serialization\DeserializationContext.java:
  61  
  62:   // TODO(shahan): consider making codedIn a member of this class.
  63    @SuppressWarnings({"TypeParameterUnusedInFormals"})

src\main\java\com\google\devtools\build\lib\skyframe\serialization\LambdaCodec.java:
  65      try {
  66:       // TODO(janakr): We could cache these methods if retrieval shows up as a hotspot.
  67        writeReplaceMethod = objClass.getDeclaredMethod("writeReplace");

src\main\java\com\google\devtools\build\lib\skyframe\serialization\Memoizer.java:
  127   */
  128: // TODO(brandjon): Maybe make this more robust against a pathological cycle of immutable objects, so
  129  // that instead of failing with a stack overflow, we detect the cycle and throw

src\main\java\com\google\devtools\build\lib\skyframe\serialization\SerializationContext.java:
  79  
  80:   // TODO(shahan): consider making codedOut a member of this class.
  81    public void serialize(Object object, CodedOutputStream codedOut)

src\main\java\com\google\devtools\build\lib\skyframe\serialization\autocodec\AutoCodec.java:
  46  @Target(ElementType.TYPE)
  47: // TODO(janakr): remove once serialization is complete.
  48  @Retention(RetentionPolicy.RUNTIME)

src\main\java\com\google\devtools\build\lib\skyframe\serialization\autocodec\Marshallers.java:
  105  
  106:     // TODO(cpeyser): Refactor primitive handling from AutoCodecProcessor.java
  107      if (!(type instanceof DeclaredType)) {

src\main\java\com\google\devtools\build\lib\skyframe\serialization\strings\UnsafeStringCodec.java:
  45      // Don't memoize strings inside memoizing serialization, to preserve current behavior.
  46:     // TODO(janakr,brandjon,michajlo): Is it actually a problem to memoize strings? Doubt there
  47      // would be much performance impact from increasing the size of the identity map, and we

src\main\java\com\google\devtools\build\lib\standalone\StandaloneModule.java:
  52        BuildRequest buildRequest) {
  53:     // TODO(ulfjack): Move this to another module.
  54      registryBuilder.register(

  85              env.getXattrProvider(),
  86:             // TODO(buchgr): Replace singleton by a command-scoped RunfilesTreeUpdater
  87              RunfilesTreeUpdater.INSTANCE);

src\main\java\com\google\devtools\build\lib\starlarkbuildapi\ActionsInfoProviderApi.java:
  26      category = DocCategory.PROVIDER)
  27: // TODO(cparsons): Deprecate and remove this API.
  28  public interface ActionsInfoProviderApi extends ProviderApi {}

src\main\java\com\google\devtools\build\lib\starlarkbuildapi\ProtoInfoApi.java:
  55        structField = true)
  56:   // TODO(bazel-team): The difference between transitive imports and transitive proto sources
  57    // should never be used by Starlark or by an Aspect. One of these two should be removed,

src\main\java\com\google\devtools\build\lib\starlarkbuildapi\SplitTransitionProviderApi.java:
  20  public interface SplitTransitionProviderApi extends StarlarkValue {
  21:   // TODO(cparsons): Expose this explicitly to the build API.
  22  }

src\main\java\com\google\devtools\build\lib\starlarkbuildapi\StarlarkActionFactoryApi.java:
  338              name = "arguments",
  339:             // TODO(#13365): improve the @ParamType annotation once it can support multiple
  340              // contained types.

  404          @Param(
  405:             // TODO(bazel-team): The name here isn't accurate anymore.
  406              // This is technically experimental, so folks shouldn't be too attached,

  521              name = "arguments",
  522:             // TODO(#13365): improve the @ParamType annotation once it can support multiple
  523              // contained types.

  631          @Param(
  632:             // TODO(bazel-team): The name here isn't accurate anymore.
  633              // This is technically experimental, so folks shouldn't be too attached,

src\main\java\com\google\devtools\build\lib\starlarkbuildapi\StarlarkAttrModuleApi.java:
   91    String CONFIGURATION_ARG = "cfg";
   92:   // TODO(b/151742236): Update when new Starlark-based configuration framework is implemented.
   93    String CONFIGURATION_DOC =

  250                @ParamType(type = NativeComputedDefaultApi.class),
  251:               // TODO(adonovan): remove StarlarkFunction. It's undocumented,
  252                // unused by Google's .bzl files, and likely unused in Bazel.

  764        doc = "Creates a schema for a license attribute.",
  765:       // TODO(bazel-team): Implement proper license support for Starlark.
  766        parameters = {
  767:         // TODO(bazel-team): ensure this is the correct default value
  768          @Param(

src\main\java\com\google\devtools\build\lib\starlarkbuildapi\StarlarkBuildApiGlobals.java:
  28        name = "visibility",
  29:       // TODO(b/22193153): Link to a concepts page for bzl-visibility.
  30        doc =

  77        name = "configuration_field",
  78:       // TODO(cparsons): Provide a link to documentation for available StarlarkConfigurationFields.
  79        doc =

src\main\java\com\google\devtools\build\lib\starlarkbuildapi\StarlarkNativeModuleApi.java:
  66              doc = "The list of glob patterns to exclude."),
  67:         // TODO(bazel-team): accept booleans as well as integers? (and eventually migrate?)
  68          @Param(

src\main\java\com\google\devtools\build\lib\starlarkbuildapi\StarlarkRuleContextApi.java:
  344        doc = "Splits a shell command into a list of tokens.",
  345:       // TODO(cparsons): Look into flipping this to true.
  346        documented = false,

  536              doc = "The list of files to be added to the runfiles."),
  537:         // TODO(bazel-team): If we have a memory efficient support for lazy list containing
  538          // NestedSets we can remove this and just use files = [file] + list(set)

  606        name = "resolve_command",
  607:       // TODO(bazel-team): The naming here isn't entirely accurate (input_manifests is no longer
  608        // manifests), but this is experimental/should be opaque to the end user.

src\main\java\com\google\devtools\build\lib\starlarkbuildapi\StarlarkRuleFunctionsApi.java:
  231                      + "limit memory usage, the rule function imposes a cap on the size of attrs."),
  232:         // TODO(bazel-team): need to give the types of these builtin attributes
  233          @Param(

src\main\java\com\google\devtools\build\lib\starlarkbuildapi\android\AndroidBootstrap.java:
  97    public void addBindingsToBuilder(ImmutableMap.Builder<String, Object> builder) {
  98:     // TODO: Make an incompatible change flag to hide android_common behind
  99      // --experimental_google_legacy_api.

src\main\java\com\google\devtools\build\lib\starlarkbuildapi\android\AndroidResourcesInfoApi.java:
   93  
   94:   // TODO(b/132383435): remove this
   95    @StarlarkMethod(name = "validation_artifacts", doc = "", documented = false, structField = true)

  185            @Param(
  186:               // TODO(b/119560471): remove.
  187                name = "transitive_static_lib",

  199                defaultValue = "unbound"), // needed to allow removing any earlier parameters.
  200:           // TODO(b/132383435): remove this
  201            @Param(

src\main\java\com\google\devtools\build\lib\starlarkbuildapi\apple\AppleCommonApi.java:
  116    @StarlarkMethod(
  117:       // TODO(b/63899207): This currently does not match ObjcProvider.STARLARK_NAME as it requires
  118        // a migration of existing Starlark rules.

  369        useStarlarkThread = true)
  370:   // TODO(b/70937317): Iterate on, improve, and solidify this API.
  371    StructApi linkMultiArchBinary(

src\main\java\com\google\devtools\build\lib\starlarkbuildapi\config\ConfigGlobalLibraryApi.java:
  52              named = true,
  53:             // TODO(cparsons): The settings dict should take actual Label objects as keys and not
  54              // strings. Update the documentation.

src\main\java\com\google\devtools\build\lib\starlarkbuildapi\cpp\CcModuleApi.java:
  401              defaultValue = "False"),
  402:         // TODO(b/65151735): Remove once we migrate crosstools to features
  403          @Param(

  511              defaultValue = "None"),
  512:         // TODO(b/65151735): Remove once we migrate crosstools to features
  513          @Param(

  522              defaultValue = "True"),
  523:         // TODO(b/65151735): Remove once we migrate crosstools to features
  524          @Param(

  547              defaultValue = "False"),
  548:         // TODO(b/65151735): Remove once we migrate crosstools to features
  549          @Param(

  981  
  982:   // TODO(b/65151735): Remove when cc_flags is entirely set from features.
  983    // This should only be called from the cc_flags_supplier rule.

src\main\java\com\google\devtools\build\lib\starlarkbuildapi\cpp\GoWrapCcHelperApi.java:
  72        })
  73:   // TODO(b/113797843): Not written in Starlark because of GoRunfilesProvider.
  74    public RunfilesApi starlarkGetGoRunfiles(StarlarkRuleContextT starlarkRuleContext)

src\main\java\com\google\devtools\build\lib\starlarkbuildapi\cpp\PyWrapCcHelperApi.java:
   67        })
   68:   // TODO(plf): PyExtension is not in Starlark.
   69    public Sequence<String> getPyExtensionLinkopts(StarlarkRuleContextT starlarkRuleContext)

   79        })
   80:   // TODO(plf): Not written in Starlark because of PyCommon.
   81    public Depset getTransitivePythonSources(StarlarkRuleContextT starlarkRuleContext, FileT pyFile)

   91        })
   92:   // TODO(plf): Not written in Starlark because of PythonRunfilesProvider.
   93    public RunfilesApi getPythonRunfiles(

  104        })
  105:   // TODO(plf): PyWrapCcInfo is not written in Starlark because several native rules use it.
  106    public PyWrapCcInfoApi<FileT> getPyWrapCcInfo(

src\main\java\com\google\devtools\build\lib\starlarkbuildapi\cpp\WrapCcHelperApi.java:
  109        })
  110:   // TODO(plf): Not written in Starlark because of PythonRunfilesProvider.
  111    public WrapCcIncludeProviderT getWrapCcIncludeProvider(

  152        })
  153:   // TODO(plf): Write in Starlark when all 3 SWIG rules are in Starlark.
  154    public void registerSwigAction(

src\main\java\com\google\devtools\build\lib\starlarkbuildapi\java\JavaCommonApi.java:
  471        })
  472:   // TODO(b/78512644): migrate callers to passing explicit javacopts or using custom toolchains, and
  473    // delete

src\main\java\com\google\devtools\build\lib\starlarkbuildapi\java\JavaConfigurationApi.java:
  36        doc = "The default flags for the Java compiler.")
  37:   // TODO(bazel-team): this is the command-line passed options, we should remove from Starlark
  38    // probably.

src\main\java\com\google\devtools\build\lib\starlarkdebug\module\StarlarkDebuggerOptions.java:
  23  /** Configuration options for Starlark debugging. */
  24: // TODO(laurentlb): Rename the flags (remove 'experimental' and replace 'skylark' with 'starlark')
  25  // when the interpreter code is more stable.

src\main\java\com\google\devtools\build\lib\starlarkdebug\server\DebuggerSerialization.java:
   35    static Value getValueProto(ThreadObjectMap objectMap, String label, Object value) {
   36:     // TODO(bazel-team): prune cycles, and provide a way to limit breadth/depth of children reported
   37      boolean hasChildren = hasChildren(value);

   39          .setLabel(label)
   40:         // TODO(bazel-team): omit type details for non-Starlark values
   41          .setType(Starlark.type(value))

   75        // assuming Structure's have at least one child as a temporary optimization
   76:       // TODO(bazel-team): remove once child-listing logic is moved to StarlarkValue
   77        return true;

   98      }
   99:     // TODO(bazel-team): move child-listing logic to StarlarkValue where practical
  100      if (value instanceof Structure) {

  127        ThreadObjectMap objectMap, StarlarkValue starlarkValue) {
  128:     StarlarkSemantics semantics = StarlarkSemantics.DEFAULT; // TODO(adonovan): obtain from thread.
  129:     // TODO(adonovan): would the debugger be content with Starlark.{dir,getattr}
  130      // instead of getAnnotatedField{,Names}, if we filtered out BuiltinCallables?

src\main\java\com\google\devtools\build\lib\starlarkdebug\server\DebugServerTransport.java:
  37        throws IOException {
  38:     // TODO(bazel-team): reject all connections after the first
  39      eventHandler.handle(Event.progress("Waiting for debugger..."));

src\main\java\com\google\devtools\build\lib\starlarkdebug\server\ThreadHandler.java:
  279      // serially
  280:     // TODO(bazel-team): support asynchronous replies, and use finer-grained locks
  281      try {

  303  
  304:       // TODO(adonovan): opt: don't parse and resolve the expression every time we hit a breakpoint
  305        // (!).
  306        ParserInput input = ParserInput.fromString(content, "<debug eval>");
  307:       // TODO(adonovan): the module or call frame should be a parameter to doEvaluate.
  308        Module module = Module.ofInnermostEnclosingStarlarkFunction(thread);

  356  
  357:     // TODO(bazel-team): if contention becomes a problem, consider changing 'threads' to a
  358      // concurrent map, and synchronizing on individual entries

src\main\java\com\google\devtools\build\lib\unix\UnixFileSystem.java:
  258        // be thrown.
  259:       // TODO(bazel-team): Extract the exception-construction code and make it visible separately in
  260        // FilesystemUtils to avoid having to do a duplicate stat call.

src\main\java\com\google\devtools\build\lib\util\CommandFailureUtils.java:
   97  
   98:   // TODO(bazel-team): (2010) Add proper escaping. We can't use ShellUtils.shellEscape() as it is
   99    // incompatible with CMD.EXE syntax, but something else might be needed.

  103      public void describeCommandBeginIsolate(StringBuilder message) {
  104:       // TODO(bazel-team): Implement this.
  105      }

  108      public void describeCommandEndIsolate(StringBuilder message) {
  109:       // TODO(bazel-team): Implement this.
  110      }

  134      public void describeCommandExec(StringBuilder message) {
  135:       // TODO(bazel-team): Implement this if possible for greater efficiency.
  136      }

src\main\java\com\google\devtools\build\lib\util\CustomExitCodePublisher.java:
  31   */
  32: // TODO(b/138456686): When the Bazel server is completely converted to use FailureDetail messages
  33  //  for its failure modes, this publishing mechanism and the file it creates can probably be

src\main\java\com\google\devtools\build\lib\util\DetailedExitCode.java:
  45    public static ExitCode getExitCode(FailureDetail failureDetail) {
  46:     // TODO(mschaller): Consider specializing for unregistered exit codes here, if absolutely
  47      //  necessary.

src\main\java\com\google\devtools\build\lib\util\Fingerprint.java:
   81    public Fingerprint() {
   82:     // TODO(b/112460990): Use the value from DigestHashFunction.getDefault(), but check for
   83      // contention.

  289     */
  290:   // TODO(b/150312032): Deprecate this method.
  291    @CanIgnoreReturnValue

  341    public static String getHexDigest(String input) {
  342:     // TODO(b/112460990): This convenience method should
  343      // use the value from DigestHashFunction.getDefault(). However, this gets called during class

src\main\java\com\google\devtools\build\lib\util\LoggingUtil.java:
  32  public final class LoggingUtil {
  33:   // TODO(bazel-team): this class is a thin wrapper around Logger and could probably be discarded.
  34    private static Future<Logger> remoteLogger;

src\main\java\com\google\devtools\build\lib\util\PathFragmentFilter.java:
  57  
  58:       // TODO(bazel-team): (2010) Both lists could be optimized not to include unnecessary
  59        // entries - e.g.  entry 'a/b/c' is not needed if 'a/b' is also specified and 'a/b' on

src\main\java\com\google\devtools\build\lib\util\ProcessUtils.java:
  46    public static int getpid() {
  47:     // TODO(ulfjack): Use ProcessHandle.current().getPid() here.
  48      if (OS.getCurrent() == OS.WINDOWS) {

src\main\java\com\google\devtools\build\lib\util\ResourceFileLoader.java:
  65    public static String resolveResource(Class<?> relativeToClass, String resourceName) {
  66:     // TODO(bazel-team): use relativeToClass.getPackage().getName().
  67      String className = relativeToClass.getName();

src\main\java\com\google\devtools\build\lib\versioning\SemVer.java:
  28   */
  29: // TODO(jmmv): Would be nice to take com.google.devtools.build.lib.rules.apple.DottedVersion and
  30  // build the oddities of that scheme on top of this, given that the differences are minimal.

src\main\java\com\google\devtools\build\lib\vfs\FileSystem.java:
  413  
  414:       // TODO(bazel-team): (2009) ideally, throw ENOTDIR if dir is not a dir, but that
  415        // would require twice as many stats, or a much more convoluted

src\main\java\com\google\devtools\build\lib\vfs\FileSystemUtils.java:
  325    public static void ensureSymbolicLink(Path link, PathFragment target) throws IOException {
  326:     // TODO(bazel-team): (2009) consider adding the logic for recovering from the case when
  327      // we have already created a parent directory symlink earlier.

src\main\java\com\google\devtools\build\lib\vfs\JavaIoFileSystem.java:
  483        public long getNodeId() {
  484:         // TODO(bazel-team): Consider making use of attributes.fileKey().
  485          return -1;

src\main\java\com\google\devtools\build\lib\vfs\UnixGlob.java:
  272            // avoiding crashes, treat '(' and ')' as a safe no-op when compiling to regexp.
  273:           // TODO(b/154003471): change this behavior and start treating '(' and ')' as literal
  274            // characters to match in a glob pattern. This change will require an incompatible flag.

  525  
  526:       // TODO(adonovan): validate pattern unconditionally, before I/O (potentially breaking change).
  527        List<String[]> splitPatterns = checkAndSplitPatterns(patterns);

  873      }
  874:     // TODO(adonovan): validate pattern unconditionally (potentially breaking change).
  875      List<String[]> splitPatterns = checkAndSplitPatterns(complexPatterns);

src\main\java\com\google\devtools\build\lib\vfs\inmemoryfs\InMemoryFileSystem.java:
  701        try {
  702:         // TODO(bazel-team): (2009) test with symbolic links.
  703  

src\main\java\com\google\devtools\build\lib\windows\WindowsFileSystem.java:
   46    public String getFileSystemType(PathFragment path) {
   47:     // TODO(laszlocsomor): implement this properly, i.e. actually query this information from
   48      // somewhere (java.nio.Filesystem? System.getProperty? implement JNI method and use WinAPI?).

  201            public long getNodeId() {
  202:             // TODO(bazel-team): Consider making use of attributes.fileKey().
  203              return -1;

src\main\java\com\google\devtools\build\lib\worker\RecordingInputStream.java:
  120      String input = new String(bytes, UTF_8);
  121:     // TODO: Why do we get so much noise?
  122      if (Utf8.isWellFormed(bytes)

src\main\java\com\google\devtools\build\lib\worker\WorkerMetricsCollector.java:
   76    MemoryCollectionResult collectMemoryUsageByPid(OS os, ImmutableSet<Long> processIds) {
   77:     // TODO(b/181317827): Support Windows.
   78      if (os != OS.LINUX && os != OS.DARWIN) {

  204  
  205:   // TODO(wilwell): add exception if we couldn't collect the metrics.
  206    public ImmutableList<WorkerMetric> collectMetrics() {

  296  
  297:   // TODO(b/238416583) Add deregister function
  298  }

src\main\java\com\google\devtools\build\lib\worker\WorkerModule.java:
  165              env.getLocalResourceManager(),
  166:             // TODO(buchgr): Replace singleton by a command-scoped RunfilesTreeUpdater
  167              RunfilesTreeUpdater.INSTANCE,

src\main\java\com\google\devtools\build\lib\worker\WorkerMultiplexer.java:
  142        Path workDir, Set<PathFragment> workerFiles, SandboxInputs inputFiles) throws IOException {
  143:     // TODO: Make blaze clean remove the workdir.
  144      if (this.process == null) {

  209        String id = workerKey.getMnemonic() + "-" + workerKey.hashCode();
  210:       // TODO(larsrc): Consider moving sender/receiver threads into separate classes.
  211        this.requestSender =

  351        // now contains garbage, and this request is lost.
  352:       // TODO(b/177637516): Signal that this action failed for presumably transient reasons.
  353        report("Failed to send request " + request.getRequestId());

  357        }
  358:       // TODO(b/177637516): Leave process in a moribound state so pending responses can be returned.
  359        destroyProcess();

  403  
  404:     // TODO(b/151767359): When allowing cancellation, just remove responses that have no matching
  405      // entry in responseChecker.

  452  
  453:   // TODO: Check if this can be removed
  454    @VisibleForTesting

src\main\java\com\google\devtools\build\lib\worker\WorkerOptions.java:
  62      public Map.Entry<String, Integer> convert(String input) throws OptionsParsingException {
  63:       // TODO(steinman): Make auto value return a reasonable multiplier of host capacity.
  64        if (input == null || "null".equals(input) || "auto".equals(input)) {

src\main\java\com\google\devtools\build\lib\worker\WorkerPool.java:
  132  
  133:   // TODO (b/242835648) filter throwed exceptions better
  134    void evictWithPolicy(EvictionPolicy<Worker> evictionPolicy) throws InterruptedException {

  161  
  162:     // TODO(b/244297036): move highPriorityWorkerMnemonics logic to the ResourceManager.
  163      if (highPriorityWorkerMnemonics.contains(key.getMnemonic())) {

src\main\java\com\google\devtools\build\lib\worker\WorkerSpawnRunner.java:
  512  
  513:   // TODO (b/214919266) Remove this after filpping the flag.
  514    // LINT.IfChange(classic)

src\main\java\com\google\devtools\build\lib\worker\WorkRequestHandler.java:
  337      }
  338:     // TODO(b/220878242): Give the outstanding requests a chance to send a "shutdown" response,
  339      // but also try to kill stuck threads. For now, we just interrupt the remaining threads.

  360              : "singleplex-request";
  361:     // TODO(larsrc): See if this can be handled with a queue instead, without introducing more
  362      // race conditions.

src\main\java\com\google\devtools\build\skydoc\rendering\MarkdownRenderer.java:
  44  public class MarkdownRenderer {
  45:   // TODO(kendalllane): Refactor MarkdownRenderer to take in something other than filepaths.
  46    private final String headerTemplateFilename;

src\main\java\com\google\devtools\build\skydoc\rendering\proto\stardoc_output.proto:
  110    // unidentifiable, for example, if the provider is part of a namespace.
  111:   // TODO(kendalllane): Fix documentation of providers from namespaces.
  112    repeated string provider_name = 1;

src\main\java\com\google\devtools\build\skyframe\AbstractParallelEvaluator.java:
  741            evaluatorContext.getVisitor().preventNewEvaluations();
  742:           // TODO(b/166268889): Remove when fixed.
  743            if (childErrorInfo.getException() instanceof IOException) {

  749  
  750:         // TODO(bazel-team): This code is not safe to interrupt, because we would lose the state in
  751          // newDirectDeps.
  752  
  753:         // TODO(bazel-team): An ill-behaved SkyFunction can throw us into an infinite loop where we
  754          // add more dependencies on every run. [skyframe-core]

  765          if (newDeps.isEmpty() && externalDeps == null) {
  766:           // TODO(bazel-team): This means a bug in the SkyFunction. What to do?
  767            checkState(

  986  
  987:     // TODO(b/19539699): rdeps of children have to be handled here. If the graph does not keep
  988      // edges, nothing has to be done, since there are no reverse deps to keep consistent. If the

src\main\java\com\google\devtools\build\skyframe\CyclesReporter.java:
  79      for (CycleInfo cycleInfo : cycles) {
  80:       // TODO(janakr): if this assertion is never hit, remove topLevelKey as an argument to method.
  81        if (!cycleInfo.getTopKey().equals(topLevelKey)) {

src\main\java\com\google\devtools\build\skyframe\DelegatingWalkableGraph.java:
  144        // means that SkyQuery may be traversing edges irrelevant for query evaluation.
  145:       // TODO(bazel-team): Get rid of this wasted work. One approach is to hardcode the Skyframe
  146        // *type* graph structure, and follow only edges for relevant node types. This would work, but

src\main\java\com\google\devtools\build\skyframe\InvalidatingNodeVisitor.java:
  153      } catch (IllegalStateException e) {
  154:       // TODO(mschaller): Remove this wrapping after debugging the invalidation-after-OOMing-eval
  155        // problem. The wrapping provides a stack trace showing what caused the invalidation.

  292            state.visitedKeysAcrossInterruptions.keySet();
  293:       // TODO(b/150299871): this is uninterruptible.
  294        try (AutoProfiler ignored =

src\main\java\com\google\devtools\build\skyframe\MemoizingEvaluator.java:
  82     */
  83:   // TODO(bazel-team): Replace all usages of getValues, getDoneValues, getExistingValue,
  84    // and getExistingErrorForTesting with usages of WalkableGraph. Changing the getValues usages

src\main\java\com\google\devtools\build\skyframe\ParallelEvaluator.java:
  230      // because we actually did succeed.
  231:     // TODO(bazel-team): Maybe report root causes during the build for lower latency.
  232      return constructResult(skyKeys, bubbleErrorInfo, catastrophe);

  461        }
  462:       // TODO(b/166268889, b/172223413): remove when fixed.
  463        if (completedRun

src\main\java\com\google\devtools\build\skyframe\ReverseDepsUtility.java:
   76      consolidations.add(KeyToConsolidate.create(reverseDep, op, entry));
   77:     // TODO(janakr): Should we consolidate more aggressively? This threshold can be customized.
   78      if (consolidations.size() >= currentReverseDepSize) {

  146  
  147:     // TODO(bazel-team): Unfortunately, we need to make a copy here right now to be on the safe side
  148      // wrt. thread-safety. The parents of a node get modified when any of the parents is deleted,

src\main\java\com\google\devtools\build\skyframe\SimpleCycleDetector.java:
  279        // out.
  280:       // TODO(janakr): If graph implementations start using these hints for not-done nodes, we may
  281        // have to change this.

src\main\java\com\google\devtools\build\skyframe\SkyFunction.java:
  247       */
  248:     // TODO(jhorvitz): Delete this method now that it has no benefit over getValuesAndExceptions.
  249      SkyframeIterableResult getOrderedValuesAndExceptions(Iterable<? extends SkyKey> depKeys)

src\main\java\com\google\devtools\build\skyframe\SkyFunctionEnvironment.java:
  347        if (valueOrNullMarker == NULL_MARKER) {
  348:         // TODO(mschaller): handle registered deps that transitioned from done to dirty during eval
  349          // But how? Restarting the current node may not help, because this dep was *registered*, not

  812                .getErrorInfoToUse(skyKey, value != null, childErrorInfos);
  813:       // TODO(b/166268889, b/172223413): remove when fixed.
  814        if (errorInfo != null && errorInfo.getException() instanceof IOException) {

src\main\java\com\google\devtools\common\options\BoolOrEnumConverter.java:
  60        } catch (OptionsParsingException eBoolean) {
  61:         // TODO(b/111883901): Rethrowing the exception from the enum converter does not report the
  62          // allowable boolean values.

src\main\java\com\google\devtools\common\options\Converters.java:
  341  
  342:     // TODO(bazel-team): if this class never actually contains duplicates, we could s/List/Set/
  343      // here.

src\main\java\com\google\devtools\common\options\GenericTypeHelper.java:
  79     */
  80:   // TODO(bazel-team): also check enclosing classes and indirectly implemented
  81    // interfaces, which can also contribute type variables. This doesn't happen

src\main\java\com\google\devtools\common\options\IsolatedOptionsData.java:
  45   */
  46: // TODO(b/159980134): Can this be folded into OptionsData?
  47  @Immutable

src\main\java\com\google\devtools\common\options\OptionDefinition.java:
  46  
  47:   // TODO(b/65049598) make ConstructionException checked, which will make this checked as well.
  48    static class NotAnOptionException extends ConstructionException {

src\main\java\com\google\devtools\common\options\OptionEffectTag.java:
  15  
  16: // TODO(bazel-team) - remove the transition-period waive of compatibility requirements.
  17  /**

src\main\java\com\google\devtools\common\options\OptionsParser.java:
  72  
  73:   // TODO(b/65049598) make ConstructionException checked.
  74    /**

src\main\java\com\google\devtools\common\options\OptionsParserImpl.java:
  712          if (optionDefinition != null) {
  713:           // TODO(bazel-team): Add tests for these cases.
  714            if (!optionDefinition.usesBooleanValueSyntax()) {

src\main\java\com\google\devtools\common\options\OptionsParsingResult.java:
  64     */
  65:   // TODO(b/150222792): make this aware of starlark options.
  66    List<ParsedOptionDescription> asCompleteListOfParsedOptions();

  75     */
  76:   // TODO(b/150222792): make this aware of Starlark options. This might be tricky because we don't
  77    // store Starlark option values that are explicitly specified to the same value as the default.

  87     */
  88:   // TODO(b/150222792): make this aware of Starlark options.
  89    List<ParsedOptionDescription> asListOfCanonicalOptions();

  94     */
  95:   // TODO(b/150222792): make this aware of Starlark options
  96    List<OptionValueDescription> asListOfOptionValues();

src\main\java\com\google\devtools\common\options\OptionsUsage.java:
  148      for (String paragraph : NEWLINE_SPLITTER.split(in)) {
  149:       // TODO(ccalvarin) break iterators expect hyphenated words to be line-breakable, which looks
  150        // funny for --flag

  268          for (String exp : expansion) {
  269:           // TODO(jingwen): We link to the expanded flags here, but unfortunately we don't
  270            // currently guarantee that all flags are only printed once. A flag in an OptionBase that

  364      } else {
  365:       // TODO(bazel-team): add more types. Maybe even move the completion type
  366        // to the @Option annotation?

src\main\java\com\google\devtools\common\options\ParsedOptionDescription.java:
  108    @Deprecated
  109:   // TODO(b/65646296) Once external dependencies are cleaned up, use getCanonicalForm()
  110    String getDeprecatedCanonicalForm() {

src\main\java\net\starlark\java\annot\ParamType.java:
  36     */
  37:   // TODO(#13365): make this a data structure so we can represent a {@link
  38    // net.starlark.java.eval.Sequence} of types {@code A} or {@code B} intermixed, a {@link

src\main\java\net\starlark\java\annot\StarlarkAnnotations.java:
  158        Class<?> classObj, Method signatureToMatch) {
  159:     // TODO(b/79877079): This method validates several invariants of @StarlarkMethod. These
  160      // invariants should be verified in annotation processor or in test, and left out of this

src\main\java\net\starlark\java\annot\StarlarkBuiltin.java:
  53   */
  54: // TODO(adonovan): rename to StarlarkType now that that name is available again.
  55  @Target({ElementType.TYPE})

src\main\java\net\starlark\java\annot\StarlarkMethod.java:
   88   */
   89: // TODO(adonovan): rename to StarlarkAttribute and factor Starlark{Method,Field} as subinterfaces.
   90  @Keep

  135     */
  136:   // TODO(adonovan): consider using a simpler type than Param here. All that's needed at run-time
  137    // is a boolean. The doc tools want a name and doc string, but the rest is irrelevant and

src\main\java\net\starlark\java\annot\processor\StarlarkMethodProcessor.java:
  194  
  195:   // TODO(adonovan): obviate these checks by separating field/method interfaces.
  196    private void checkStructFieldAnnotation(ExecutableElement method, StarlarkMethod annot) {

src\main\java\net\starlark\java\cmd\Main.java:
   83          // which can be multiline, in which case we must wait for a blank line.
   84:         // TODO(adonovan): parse a compound statement, like the Python and
   85          //   go.starlark.net REPLs. This requires a new grammar production, and

  132        } catch (EvalException ex) {
  133:         // TODO(adonovan): provide a SourceReader. Requires that we buffer the
  134          // entire history so that line numbers don't reset in each chunk.

src\main\java\net\starlark\java\eval\BuiltinFunction.java:
   33   */
   34: // TODO(adonovan): support annotated static methods.
   35  @StarlarkBuiltin(

  362      // If the flag is True, it must be a deprecation flag. Otherwise it's an experimental flag.
  363:     // TODO(adonovan): is that assumption sound?
  364      if (semantics.getBool(flag)) {

src\main\java\net\starlark\java\eval\CallUtils.java:
  139        if (descriptor.isStructField() && fields.put(callable.name(), descriptor) != null) {
  140:         // TODO(b/72113542): Validate with annotation processor instead of at runtime.
  141          throw new IllegalArgumentException(

src\main\java\net\starlark\java\eval\CpuProfiler.java:
  187    //
  188:   // TODO(adonovan): opt: a more efficient implementation of routing would be
  189    // to use, instead of a pipe from the signal handler to the routing thread,

  405          Location loc = fn.getLocation();
  406:         String filename = loc.file(); // TODO(adonovan): make WORKSPACE-relative
  407          String name = fn.getName();

  443        if (fn instanceof StarlarkFunction) {
  444:         // TODO(adonovan): when we use a byte code representation
  445          // of function bodies, mix the program counter fr.pc into fnAddr.
  446:         // TODO(adonovan): even cleaner: treat each function's byte
  447          // code segment as its own Profile.Mapping, indexed by pc.

src\main\java\net\starlark\java\eval\Debug.java:
  24  /** Debugger API. */
  25: // TODO(adonovan): move Debugger to Debug.Debugger.
  26  public final class Debug {

src\main\java\net\starlark\java\eval\Dict.java:
  124      this.mutability = mutability;
  125:     // TODO(bazel-team): Memory optimization opportunity: Make it so that a call to
  126      // `mutability.freeze()` causes `contents` here to become an ImmutableMap. Benchmarks show that

  218        useStarlarkThread = true)
  219:   // TODO(adonovan): This method is named get2 as a temporary workaround for a bug in
  220    // StarlarkAnnotations.getStarlarkMethod. The two 'get' methods cause it to get

  263      }
  264:     // TODO(adonovan): improve error; this ain't Python.
  265      throw Starlark.errorf("KeyError: %s", Starlark.repr(key));

  650            || !valueType.isAssignableFrom(e.getValue().getClass())) {
  651:         // TODO(adonovan): change message to "found <K2, V2> entry",
  652          // without suggesting that the entire dict is <K2, V2>.

  733  
  734:   // TODO(adonovan): make mutability exception a subclass of (unchecked)
  735    // UnsupportedOperationException, allowing the primary Dict operations

src\main\java\net\starlark\java\eval\Eval.java:
  354        throws EvalException, InterruptedException {
  355:     // TODO(adonovan): lock/unlock rhs during iteration so that
  356      // assignments fail when the left side aliases the right,

  455      // list += iterable  behaves like  list.extend(iterable)
  456:     // TODO(b/141263526): following Python, allow list+=iterable (but not list+iterable).
  457      if (op == TokenKind.PLUS && x instanceof StarlarkList && y instanceof StarlarkList) {

  502        case INT_LITERAL:
  503:         // TODO(adonovan): opt: avoid allocation by saving
  504          // the StarlarkInt in the IntLiteral (a temporary hack

  649        }
  650:       // TODO(adonovan): opt: if value.size is known, preallocate (and skip if empty).
  651        ArrayList<Object> list = new ArrayList<>();

src\main\java\net\starlark\java\eval\EvalException.java:
  141        () -> {
  142:         // TODO(adonovan): opt: cache seen files, as the stack often repeats the same files.
  143          return loc -> {

src\main\java\net\starlark\java\eval\EvalUtils.java:
  458        Object result = ((StarlarkIndexable) object).getIndex(semantics, key);
  459:       // TODO(bazel-team): We shouldn't have this fromJava call here. If it's needed at all,
  460        // it should go in the implementations of StarlarkIndexable#getIndex that produce non-Starlark

src\main\java\net\starlark\java\eval\HasBinary.java:
  31   */
  32: // TODO(adonovan): rename BinaryOperand?
  33  public interface HasBinary extends StarlarkValue {

src\main\java\net\starlark\java\eval\JNI.java:
  26        // fails with an utterly uninformative error.
  27:       // TODO(adonovan): remove try/catch once that test is fixed.
  28      }

src\main\java\net\starlark\java\eval\MethodLibrary.java:
  590      }
  591:     // TODO(adonovan): support arbitrary integers.
  592      return new RangeList(start, stop, step);

  654        parameters = {
  655:         // TODO(adonovan): remove. See https://github.com/bazelbuild/starlark/issues/47.
  656          @Param(

  663              named = true),
  664:         // TODO(adonovan): remove. See https://github.com/bazelbuild/starlark/issues/47.
  665          @Param(

src\main\java\net\starlark\java\eval\ParamDescriptor.java:
   48      this.name = name;
   49:     // TODO(adonovan): apply the same validation logic to the default value
   50      // as we do to caller-supplied values (see BuiltinFunction.checkParamValue).

  108      StringBuilder buf = new StringBuilder();
  109:     // TODO(b/200065655#comment3): Remove when we have an official way for package defaults.
  110      ImmutableList<Class<?>> allowedClassesFiltered =

src\main\java\net\starlark\java\eval\Printer.java:
   28   */
   29: // TODO(adonovan): disallow printing of objects that are not Starlark values.
   30  public class Printer {

  253          if (c < 32) {
  254:           // TODO(bazel-team): support \x escapes
  255            return this.append(String.format("\\x%02x", (int) c));

  312      // whose constructor can take and display arbitrary error message, hence its use below.
  313:     // TODO(adonovan): this suggests we're using the wrong exception. Throw IAE?
  314  

src\main\java\net\starlark\java\eval\Starlark.java:
  140    /** Reports whether a Starlark value is assumed to be deeply immutable. */
  141:   // TODO(adonovan): eliminate the concept of querying for immutability. It is currently used for
  142    // only one purpose, the precondition for adding an element to a Depset, but Depsets should check

  802     */
  803:   // TODO(adonovan): move to StarlarkAnnotations; it's a static property of the annotations.
  804    public static ImmutableMap<Method, StarlarkMethod> getMethodAnnotations(Class<?> clazz) {

  838      Class<?> cls = v.getClass();
  839:     // TODO(adonovan): rather than silently skip the selfCall method, reject it.
  840      for (Map.Entry<String, MethodDescriptor> e :

  881    /** Variant of {@link #execFile} that creates a module for the given predeclared environment. */
  882:   // TODO(adonovan): is this needed?
  883    public static Object execFile(

  948    /** Variant of {@link #eval} that creates a module for the given predeclared environment. */
  949:   // TODO(adonovan): is this needed?
  950    public static Object eval(

src\main\java\net\starlark\java\eval\StarlarkFloat.java:
  150      //
  151:     // TODO(adonovan): round the value to the minimal precision required
  152      // to avoid ambiguity. This requires computing the decimal digit

src\main\java\net\starlark\java\eval\StarlarkFunction.java:
   78  
   79:   // TODO(adonovan): many functions would be simpler if
   80    // parameterNames excluded the *args and **kwargs parameters,

  181    public void repr(Printer printer) {
  182:     // TODO(adonovan): use the file name instead. But that's a breaking Bazel change.
  183      Object clientData = module.getClientData();

  368      String sep = "";
  369:     // TODO(adonovan): include *, ** tokens.
  370      for (String param : getParameterNames()) {

src\main\java\net\starlark\java\eval\StarlarkIndexable.java:
  37     */
  38:   // TODO(brandjon): Consider replacing this subinterface by changing StarlarkIndexable's methods'
  39    // signatures to take StarlarkThread in place of StarlarkSemantics.

src\main\java\net\starlark\java\eval\StarlarkInt.java:
  518        // (High-Order Half of 64-Bit Product) extended to 128 bits.
  519:       // TODO(adonovan): use Math.multiplyHigh when Java 9 becomes available.
  520        long xlo = xl & 0xFFFFFFFFL;

src\main\java\net\starlark\java\eval\StarlarkList.java:
  278  
  279:   // TODO(adonovan): StarlarkValue has 3 String methods yet still we need this fourth. Why?
  280    @Override

  499                @ParamType(type = StarlarkInt.class),
  500:               @ParamType(type = NoneType.class), // TODO(adonovan): this is wrong
  501              },
  502              defaultValue = "None",
  503:             named = true, // TODO(adonovan): this is wrong
  504              doc = "The start index of the list portion to inspect."),

  508                @ParamType(type = StarlarkInt.class),
  509:               @ParamType(type = NoneType.class), // TODO(adonovan): this is wrong
  510              },
  511              defaultValue = "None",
  512:             named = true, // TODO(adonovan): this is wrong
  513              doc = "The end index of the list portion to inspect.")

  536                @ParamType(type = StarlarkInt.class),
  537:               @ParamType(type = NoneType.class), // TODO(adonovan): this is not what Python3 does
  538              },

src\main\java\net\starlark\java\eval\StarlarkSemantics.java:
  84  
  85:   // TODO(bazel-team): This exists solely for BuiltinsInternalModule#getFlag, which allows a
  86    // (privileged) Starlark caller to programmatically retrieve a flag's value without knowing its

src\main\java\net\starlark\java\eval\StarlarkThread.java:
   91     */
   92:   // TODO(adonovan): expose a public API for this if we can establish a stronger semantics. (There
   93    // are other ways besides polling for evaluation to be interrupted, such as calling certain

  182      public ImmutableMap<String, Object> getLocals() {
  183:       // TODO(adonovan): provide a more efficient API.
  184        ImmutableMap.Builder<String, Object> env = ImmutableMap.builder();

src\main\java\net\starlark\java\eval\StarlarkValue.java:
   28     */
   29:   // TODO(brandjon): We can consider adding a StarlarkSemantics param to repr(), to match str() and
   30    // debugPrint(). Counterargument is that it's nice to have a supported way of stringifying a

   69    /** Reports whether the value is deeply immutable. */
   70:   // TODO(adonovan): eliminate this concept. All uses really need to know is, is it hashable?,
   71    // because Starlark values must have stable hashes: a hashable value must either be immutable or

  100      // a struct containing a list is hashable.
  101:     // TODO(adonovan): fix this inconsistency. Requires a Bazel incompatible change.
  102      if (!this.isImmutable()) {

src\main\java\net\starlark\java\eval\StringModule.java:
  487      }
  488:     // TODO(adonovan): fix: support non-ASCII characters. Requires that Bazel stop abusing Latin1.
  489      return Character.toUpperCase(self.charAt(0)) + Ascii.toLowerCase(self.substring(1));

  677          @Param(
  678:             // TODO(b/67740837): clarify whether this is named or positional.
  679              name = "keepends",

  700      }
  701:     // TODO(adonovan): spec should state that result is mutable,
  702      // as in Python[23] and go.starlark.net.

  886    public Sequence<String> elems(String self) {
  887:     // TODO(adonovan): opt: return a new type that is lazily iterable.
  888      char[] chars = self.toCharArray();

src\main\java\net\starlark\java\eval\Structure.java:
  34     */
  35:   // TODO(adonovan): rename "getField".
  36    @Nullable

src\main\java\net\starlark\java\eval\Tuple.java:
  187  
  188:   // TODO(adonovan): StarlarkValue has 3 String methods yet still we need this fourth. Why?
  189    @Override

  203     */
  204:   // TODO(adonovan): move this somewhere more appropriate.
  205    static <T> ImmutableList<T> wrapImmutable(Object[] array) {

src\main\java\net\starlark\java\lib\json\Json.java:
  221        // unpaired surrogates to U+FFFD in the output.
  222:       // TODO(adonovan): if we ever get an isPrintable(codepoint)
  223        // function, use uXXXX escapes for non-printables.

  639      // given invalid JSON, it produces garbage output.
  640:     // TODO(adonovan): factor Decoder and Indenter using a
  641      // validating state machine, without loss of efficiency.

src\main\java\net\starlark\java\syntax\AssignmentStatement.java:
  25    private final Expression lhs; // = IDENTIFIER | DOT | INDEX | LIST_EXPR
  26:   @Nullable private final TokenKind op; // TODO(adonovan): make this mandatory even when '='.
  27    private final int opOffset;

src\main\java\net\starlark\java\syntax\ForStatement.java:
  49    /** Returns the iterable value. */
  50:   // TODO(adonovan): rename to getIterable.
  51    public Expression getCollection() {

src\main\java\net\starlark\java\syntax\Identifier.java:
  104     */
  105:   // TODO(adonovan): remove this function in due course.
  106    // - Resolver makes one pass to discover bindings than another to resolve uses.

src\main\java\net\starlark\java\syntax\Lexer.java:
   42    // raw and value are defined only for STRING, INT, FLOAT, IDENTIFIER, and COMMENT.
   43:   // TODO(adonovan): rename s/xyz/tokenXyz/
   44    TokenKind kind;

  125      if (openParenStackDepth == 0) {
  126:       // TODO(adonovan): fix: the input ')' should not report an indentation error.
  127        error("indentation error", pos - 1);

  528      // Keep consistent with Identifier.isValid.
  529:     // TODO(laurentlb): Handle Unicode letters.
  530      int oldPos = pos - 1;

  611  
  612:     // TODO(adonovan): cleanup: replace break after setToken with return,
  613      // and eliminate null-check of this.kind.

  796    //
  797:   // TODO(adonovan): make this the precondition for all scan functions;
  798    // currenly most assume their argument c has been consumed already.

  939  
  940:   // TODO(adonovan): don't retain comments unconditionally.
  941    private void addComment(int start, int end) {

src\main\java\net\starlark\java\syntax\ListExpression.java:
  21  
  22:   // TODO(adonovan): split class into {List,Tuple}Expression, as a tuple may have no parens.
  23    // Materialize all source-level expressions as a separate ParenExpression so that we can roundtrip

src\main\java\net\starlark\java\syntax\NodePrinter.java:
   28    // Constructor exposed to legacy tests.
   29:   // TODO(adonovan): rewrite the tests not to care about the indent parameter.
   30    NodePrinter(StringBuilder buf, int indent) {

  260            BinaryOperatorExpression binop = (BinaryOperatorExpression) expr;
  261:           // TODO(bazel-team): retain parentheses in the syntax tree so we needn't
  262            // conservatively emit them here.

  429  
  430:           // TODO(adonovan): record the raw text of string (and integer) literals
  431            // so that we can use the syntax tree for source modification tools.

  474            UnaryOperatorExpression unop = (UnaryOperatorExpression) expr;
  475:           // TODO(bazel-team): retain parentheses in the syntax tree so we needn't
  476            // conservatively emit them here.

src\main\java\net\starlark\java\syntax\Parser.java:
  101  
  102:   // TODO(adonovan): opt: compute this by subtraction.
  103    private static final Map<TokenKind, TokenKind> augmentedAssignments =

  168      return kind == TokenKind.STRING
  169:         ? "\"" + value + "\"" // TODO(adonovan): do proper quotation
  170          : value == null ? kind.toString() : value.toString();

  299    // It returns the end offset of the terminating token.
  300:   // TODO(adonovan): always used with makeErrorExpression. Combine and simplify.
  301    private int syncPast(EnumSet<TokenKind> terminatingTokens) {

  380      checkForbiddenKeywords();
  381:     // TODO(adonovan): move this to lexer so we see the first token too.
  382      if (DEBUGGING) {

  456      if (token.kind == TokenKind.EQUALS) {
  457:       nextToken(); // TODO: save token pos?
  458        Expression expr = parseTest();

  620            // parenthesized expression: (e)
  621:           // TODO(adonovan): materialize paren expressions (for fidelity).
  622            if (token.kind == TokenKind.RPAREN) {

src\main\java\net\starlark\java\syntax\Program.java:
  34  
  35:     // TODO(adonovan): compile here.
  36      this.body = body;

  40  
  41:   // TODO(adonovan): eliminate once Eval no longer needs access to syntax.
  42    public Resolver.Function getResolvedFunction() {

src\main\java\net\starlark\java\syntax\Resolver.java:
   47  
   48:   // TODO(adonovan):
   49    // - use "keyword" (not "named") and "required" (not "mandatory") terminology everywhere,

  132      private final ImmutableList<Binding> freevars;
  133:     private final ImmutableList<String> globals; // TODO(adonovan): move to Program.
  134  

  256       */
  257:     // TODO(adonovan): eliminate when we switch to compiler.
  258      public ImmutableList<Statement> getBody() {

  288       */
  289:     // TODO(adonovan): remove this when we remove Bazel's "export" hack,
  290      // or switch to a compiled representation of function bodies.

  330    // Realistically, most clients will use an eval.Module.
  331:   // TODO(adonovan): move into test/ tree.
  332    public static Module moduleWithPredeclared(String... names) {

  789      int numKeywordOnlyParams = 0;
  790:     // TODO(adonovan): opt: when all Identifiers are resolved to bindings accumulated
  791      // in the function, params can be a prefix of the function's array of bindings.

  888  
  889:     // TODO(adonovan): factor out bindLocal/bindGlobal cases
  890      // and simply the condition below.

src\main\java\net\starlark\java\syntax\StringLiteral.java:
  49    public int getEndOffset() {
  50:     // TODO(adonovan): when we switch to compilation,
  51      // making syntax trees ephemeral, we can afford to

  79    public static String unquote(String s) {
  80:     // TODO(adonovan): once we have byte compilation, make this function
  81      // independent of the Lexer, which should only validate string literals

src\main\java\net\starlark\java\syntax\SyntaxError.java:
  91        if (errors.size() > 1) {
  92:         // TODO(adonovan): say ("+ n more errors") to avoid ambiguity.
  93          return String.format("%s (+ %d more)", first, errors.size() - 1);

src\main\java\net\starlark\java\syntax\UnaryOperatorExpression.java:
  54      // "not False in mylist", which evaluates to opposite results in the case that mylist is empty.
  55:     // TODO(adonovan): record parentheses explicitly in syntax tree.
  56      return (op == TokenKind.NOT ? "not " : op.toString()) + x;

src\main\native\unix_jni.cc:
   230  
   231: // TODO(bazel-team): split out all the FileSystem class's native methods
   232  // into a separate source file, fsutils.cc.

  1136  
  1137:   // TODO(bazel-team): on ERANGE, try again with larger buffer.
  1138    jbyte value[4096];

src\main\native\windows\file.h:
  145  // or remove this prefix.)
  146: // TODO(laszlocsomor): update GetLongPath so it succeeds even if the path does
  147  // not (fully) exist.

src\main\native\windows\processes-jni.cc:
  455    NativeProcess* result = new NativeProcess();
  456:   // TODO(philwo) The `Create` method returns false in case of an error. But
  457    // there seems to be no good way to signal an error at this point to Bazel.

src\main\protobuf\build.proto:
   84    // is not yet released.
   85:   // TODO(bazel-team): Make this field required once a version of Blaze is
   86    // released that outputs this field.

  397    // loaded .bzl files.
  398:   // TODO(bazel-team): Rename this field.
  399    repeated string subinclude = 3;

src\main\protobuf\command_server.proto:
  132    // this time.
  133:   // TODO(mschaller): remove experimental warning
  134    failure_details.FailureDetail failure_detail = 9;

src\main\protobuf\crosstool_config.proto:
   85    //
   86:   // TODO(bazel-team): Write more elaborate documentation and add a link to it.
   87    message FlagGroup {

  368    // needs the tool.
  369:   // TODO(b/27903698) migrate to ActionConfig.
  370    repeated ToolPath tool_path = 9;

  372    // Feature flags.
  373:   // TODO(bazel-team): Sink those into 'Feature' instances.
  374    // Legacy field, ignored by Bazel.

  422    // defaults to "rcsD".
  423:   // TODO(b/37271982): Remove after blaze with ar action_config release
  424    repeated string ar_flag = 47;

src\main\protobuf\failure_details.proto:
    78  // this time.
    79: // TODO(mschaller): remove experimental warning
    80  message FailureDetail {

   224      NO_USABLE_STRATEGY_FOUND = 11 [(metadata) = { exit_code: 1 }];
   225:     // TODO(b/138456686): this code should be deprecated when SpawnResult is
   226      //   refactored to prohibit undetailed failures

   507    // - DEPRECATED_LOCAL_RESOURCES_USED (instead: 2?)
   508:   // TODO(b/138456686): Revise these after the (intentionally non-breaking)
   509    //  initial rollout of FailureDetail-based encoding.

   763      ILLEGAL_ABSOLUTE_PATH = 5 [(metadata) = { exit_code: 1 }];
   764:     // TODO(b/166268889): this code should be deprecated in favor of more finely
   765      //  resolved loading-phase codes.

   796    //    documented for (a)query.
   797:   // TODO(b/138456686): Revise these after the (intentionally non-breaking)
   798    //  initial rollout of FailureDetail-based encoding.

  1169      LOAD_FAILURE = 1 [(metadata) = { exit_code: 1 }];
  1170:     // TODO(b/138456686): this code should be deprecated in favor of more finely
  1171      //   resolved loading-phase codes.

src\main\tools\process-tools.cc:
  93    if (gracefully) {
  94:     // TODO(jmmv): If we truly want to offer graceful termination, we should
  95      // probably only send SIGTERM to the process group leader and allow it to

src\main\tools\process-wrapper-windows.cc:
  17  int main(int argc, char** argv) {
  18:   // TODO(bazel-team): implement this program.
  19    std::cout << "ERROR: process-wrapper is not yet implemented on Windows."

src\test\cpp\bazel_startup_options_test.cc:
  87  
  88: // TODO(#4502 related cleanup) This test serves as a catalog of the valid
  89  // options - make this test check that the list is complete, that no options are

src\test\cpp\option_processor_test.cc:
  49    void TearDown() override {
  50:     // TODO(bazel-team): The code below deletes all the files in the workspace
  51      // but it intentionally skips directories. As a consequence, there may be

src\test\cpp\rc_file_test.cc:
  100    void TearDown() override {
  101:     // TODO(bazel-team): The code below deletes all the files in the workspace
  102      // and other rc-related directories, but it intentionally skips directories.

  916  
  917: // TODO(b/112908763): Somehow, in the following tests, we end with a relative
  918  // path written in the import line on Windows. Figure out what's going on and

src\test\cpp\rc_options_test.cc:
  470  
  471: // TODO(b/34811299) The tests below identify ways that '\' used as a line
  472  // continuation is broken. This is on top of user-reported cases where an

src\test\cpp\startup_options_test.cc:
  89  
  90: // TODO(bazel-team): remove the ifdef guard once the implementation of
  91  // GetOutputRoot is stable among the different platforms.

src\test\cpp\test_util.cc:
  20  
  21: // TODO(b/31290599): We should not only check that the options are registered,
  22  // but also that they are parsed. StartupOptions* options would need to be

src\test\cpp\workspace_layout_test.cc:
  41    void TearDown() override {
  42:     // TODO(bazel-team): The code below deletes all the files in the workspace
  43      // but it intentionally skips directories. As a consequence, there may be

src\test\cpp\util\file_posix_test.cc:
   99    // srcdir shouldn't be writable.
  100:   // TODO(ulfjack): Fix this!
  101    //  string srcdir = JoinPath(test_src_dir, "x/y/z");

  130    // These perms will force a chmod()
  131:   // TODO(ulfjack): Fix this!
  132    //  ok = MakeDirectories(symlink, 0000);

  147    string path = JoinPath(tmp_dir, "x/y/z");
  148:   // TODO(ulfjack): Fix this!
  149    //  ASSERT_LE(0, fork());

src\test\java\com\google\devtools\build\android\AndroidDataMergerTest.java:
  1059  
  1060:     // TODO(corysmith): Make conflict uris for a single prefix and error
  1061      ParsedAndroidData transitiveDependency =

src\test\java\com\google\devtools\build\android\DataResourceXmlTest.java:
  1037    public void writeMacroXmlResource() throws Exception {
  1038:     // TODO(b/193025750): The current version of the layoutlib prebuilt used by Bazel does not
  1039      // contain the macro type.

  1050    public void writeOverlayableXmlResource() throws Exception {
  1051:     // TODO(b/193025750): The current version of the layoutlib prebuilt used by Bazel does not
  1052      // contain the overlayable type.

src\test\java\com\google\devtools\build\android\r8\CompatDexBuilderTest.java:
  104  
  105:     // TODO(sgjesse): Validate by running methods of Class1 and Class2.
  106      // https://r8.googlesource.com/r8/+/5ee92486c896b918efb62e69bff5dfa79f30e7c2/src/test/java/com/android/tools/r8/compatdexbuilder/CompatDexBuilderTests.java#95

src\test\java\com\google\devtools\build\android\r8\DexingKeyR8Test.java:
  51  
  52:   // TODO(rules-android): Write a test that asserts the DexingKeyR8 class considers all relevant
  53    // fields from CompatDexBuilder (see DX's tests for {@link DexingOptions} with @{link

src\test\java\com\google\devtools\build\android\r8\desugar\DesugarBasicTest.java:
  113        forAllClasses(jar, desugarInfoCollector);
  114:       // TODO(b/153971249): The class file version of desugared class files should be Java 7.
  115        // assertThat(lambdaUse.getMajorCfVersion()).isEqualTo(V1_7);

  126      forAllClasses(desugaredClasspath, desugarInfoCollector);
  127:     // TODO(b/153971249): The class file version of desugared class files should be Java 7.
  128      // assertThat(lambdaUse.getMajorCfVersion()).isEqualTo(V1_7);

src\test\java\com\google\devtools\build\docgen\StarlarkDocumentationTest.java:
  109  
  110:   // TODO(bazel-team): come up with better Starlark specific tests.
  111    @Test

src\test\java\com\google\devtools\build\lib\analysis\AnalysisCachingTest.java:
  177      if (getInternalTestExecutionMode() != InternalTestExecutionMode.NORMAL) {
  178:       // TODO(b/67529176): conflicts not detected.
  179        return;

  226      if (getInternalTestExecutionMode() != InternalTestExecutionMode.NORMAL) {
  227:       // TODO(b/67529176): conflicts not detected.
  228        return;

  242      if (getInternalTestExecutionMode() != InternalTestExecutionMode.NORMAL) {
  243:       // TODO(b/67529176): conflicts not detected.
  244        return;

  272      if (getInternalTestExecutionMode() != InternalTestExecutionMode.NORMAL) {
  273:       // TODO(b/67529176): conflicts not detected.
  274        return;

  295      if (getInternalTestExecutionMode() != InternalTestExecutionMode.NORMAL) {
  296:       // TODO(b/67529176): conflicts not detected.
  297        return;

  332      if (getInternalTestExecutionMode() != InternalTestExecutionMode.NORMAL) {
  333:       // TODO(b/67529176): conflicts not detected.
  334        return;

  423      if (getInternalTestExecutionMode() != InternalTestExecutionMode.NORMAL) {
  424:       // TODO(b/67412276): cycles not properly handled.
  425        return;

src\test\java\com\google\devtools\build\lib\analysis\AnalysisFailureReportingTest.java:
   47  
   48:   // TODO(mschaller): The below is closer now because of e.g. DetailedExitCode/FailureDetail.
   49    // original(ulfjack): Don't check for exact error message wording; instead, add machine-readable

  274  
  275:   // TODO(ulfjack): Add more tests for
  276    // - a target that has multiple analysis errors (in the target itself)

src\test\java\com\google\devtools\build\lib\analysis\AspectTest.java:
  218      if (getInternalTestExecutionMode() != TestConstants.InternalTestExecutionMode.NORMAL) {
  219:       // TODO(b/67651960): fix or justify disabling.
  220        return;

  377      if (getInternalTestExecutionMode() != TestConstants.InternalTestExecutionMode.NORMAL) {
  378:       // TODO(b/67651960): fix or justify disabling.
  379        return;

src\test\java\com\google\devtools\build\lib\analysis\BuildViewTest.java:
   556      if (getInternalTestExecutionMode() != InternalTestExecutionMode.NORMAL) {
   557:       // TODO(b/67651960): fix or justify disabling.
   558        return;

   606      if (getInternalTestExecutionMode() != InternalTestExecutionMode.NORMAL) {
   607:       // TODO(b/67412276): handle cycles properly.
   608        return;

   627      if (getInternalTestExecutionMode() != InternalTestExecutionMode.NORMAL) {
   628:       // TODO(b/67651960): fix or justify disabling (also b/67412276: handle cycles properly).
   629        return;

   651      if (getInternalTestExecutionMode() != InternalTestExecutionMode.NORMAL) {
   652:       // TODO(b/67412276): handle cycles properly.
   653        return;

   671      // instance of this check (which varies depending on whether Skyframe loading phase is enabled).
   672:     // TODO(gregce): Fix above and uncomment the below. Note that the duplicate doesn't make it into
   673      // real user output (it only affects tests).

   784      if (getInternalTestExecutionMode() != InternalTestExecutionMode.NORMAL) {
   785:       // TODO(b/67412276): handle cycles properly.
   786        return;

   797      if (getInternalTestExecutionMode() != InternalTestExecutionMode.NORMAL) {
   798:       // TODO(b/67412276): handle cycles properly.
   799        return;

   814      if (getInternalTestExecutionMode() != InternalTestExecutionMode.NORMAL) {
   815:       // TODO(b/67651960): fix or justify disabling.
   816        return;

  1005      if (getInternalTestExecutionMode() != InternalTestExecutionMode.NORMAL) {
  1006:       // TODO(b/67651960): fix or justify disabling.
  1007        return;

  1025      if (getInternalTestExecutionMode() != InternalTestExecutionMode.NORMAL) {
  1026:       // TODO(b/67412276): handle cycles properly.
  1027        return;

  1067      if (getInternalTestExecutionMode() != InternalTestExecutionMode.NORMAL) {
  1068:       // TODO(b/67412276): handle cycles properly.
  1069        return;

  1089      if (getInternalTestExecutionMode() != InternalTestExecutionMode.NORMAL) {
  1090:       // TODO(b/67412276): handle cycles properly.
  1091        return;

  1162      if (getInternalTestExecutionMode() != InternalTestExecutionMode.NORMAL) {
  1163:       // TODO(b/67651960): fix or justify disabling.
  1164        return;

  1179      if (getInternalTestExecutionMode() != InternalTestExecutionMode.NORMAL) {
  1180:       // TODO(b/67651960): fix or justify disabling.
  1181        return;

  1196      if (getInternalTestExecutionMode() != InternalTestExecutionMode.NORMAL) {
  1197:       // TODO(b/67651960): fix or justify disabling.
  1198        return;

  1216      if (getInternalTestExecutionMode() != InternalTestExecutionMode.NORMAL) {
  1217:       // TODO(b/67651960): fix or justify disabling.
  1218        return;

src\test\java\com\google\devtools\build\lib\analysis\CircularDependencyTest.java:
  230    /** A late bound dependency which depends on the 'dep' label if the 'define' is in --defines. */
  231:   // TODO(b/65746853): provide a way to do this without passing the entire configuration
  232    private static final LabelLateBoundDefault<BuildConfigurationValue> LATE_BOUND_DEP =

src\test\java\com\google\devtools\build\lib\analysis\ConfigurationsForLateBoundTargetsTest.java:
  123      assertThat(getConfiguredTarget("//foo:foo", getHostConfiguration())).isNotNull();
  124:     // TODO(b/203203933) Fix LateboundDefault-s to return exec configuration
  125      ImmutableList<ConfiguredTarget> deps =

src\test\java\com\google\devtools\build\lib\analysis\OutputFileConfiguredTargetTest.java:
  108      assertThat(hostSrc3.getConfiguration()).isEqualTo(getConfiguration(hostGeneratedFileConsumer3));
  109:     // TODO(gregce): enable below for Bazel tests, which for some reason realize the same instance
  110      //    assertThat(hostSrc3.getConfiguration())

src\test\java\com\google\devtools\build\lib\analysis\RunfilesTest.java:
  457  
  458:   // TODO(kchodorow): remove this once the default workspace name is always set.
  459    @Test

src\test\java\com\google\devtools\build\lib\analysis\StarlarkAttrTransitionProviderTest.java:
  1265  
  1266:     // TODO(blaze-configurability-team): When "affected by starlark transition" is gone,
  1267      //    will be equal and thus getTransitionDirectoryNameFragment can be equal.

  1574    // the default out of the starlark map (In StarlarkTransition#validate)
  1575:   // TODO(bazel-team): This can be optimized. Make these the same configuration.
  1576    @Test

  1625    /** See comment above {@link FunctionTransitionUtil#updateOutputDirectoryNameFragment} */
  1626:   // TODO(bazel-team): This can be optimized. Make these the same configuration.
  1627    @Test

  2333  
  2334:     // TODO(blaze-configurability-team): There is a bug in BuildViewTestCase that it does not audit
  2335      //   these Starlark options at all (i.e. check they are the right type or that values at default

  2366    public void testOptionConversionDynamicMode() {
  2367:     // TODO(waltl): check that dynamic_mode is parsed properly.
  2368    }

  2371    public void testOptionConversionCrosstoolTop() throws Exception {
  2372:     // TODO(waltl): check that crosstool_top is parsed properly.
  2373    }

src\test\java\com\google\devtools\build\lib\analysis\StarlarkExecGroupTest.java:
  382      assertThat(execGroups).hasExecGroup("watermelon");
  383:     // TODO(https://github.com/bazelbuild/bazel/issues/14726): Add tests of optional toolchains.
  384      assertThat(execGroups).execGroup("watermelon").hasToolchainType("//rule:toolchain_type_1");

src\test\java\com\google\devtools\build\lib\analysis\StarlarkRuleTransitionProviderTest.java:
  1106  
  1107:   // TODO(blaze-configurability): We probably want to eventually turn this off. Flip this test when
  1108    // this isn't allowed anymore.

src\test\java\com\google\devtools\build\lib\analysis\constraints\ConstraintsTest.java:
  1060    public void staticCheckingOnSelectsTemporarilyDisabled() throws Exception {
  1061:     // TODO(bazel-team): update this test once static checking on selects is implemented. When
  1062      // that happens, the union of all deps in the select must support the environments in the

src\test\java\com\google\devtools\build\lib\analysis\starlark\ArgsParamFileTest.java:
  50    /** Initializes args with a mix of "flags" and "positional arguments. */
  51:   // TODO(bazel-team): Consider rewriting this setup as Starlark code
  52    @Before

src\test\java\com\google\devtools\build\lib\analysis\starlark\StarlarkCustomCommandLineTest.java:
   74  
   75:     // TODO(b/167696101): Fail arguments computation when we are missing the directory from inputs.
   76      commandLine.addToFingerprint(actionKeyContext, EMPTY_EXPANDER, fingerprint);

  173  
  174:     // TODO(b/167696101): Fail arguments computation when we are missing the directory from inputs.
  175      assertThat(customCommandLine.arguments(EMPTY_EXPANDER)).isEmpty();

src\test\java\com\google\devtools\build\lib\analysis\testing\RuleClassSubject.java:
  81  
  82:   // TODO(blaze-team): Add more useful methods.
  83  }

src\test\java\com\google\devtools\build\lib\analysis\testing\StarlarkDefinedAspectSubject.java:
  84  
  85:   // TODO(blaze-team): Add more useful methods.
  86  }

src\test\java\com\google\devtools\build\lib\analysis\util\BuildViewForTesting.java:
  266  
  267:   // TODO(janakr): pass the configuration in as a parameter here.
  268    public Collection<ConfiguredTarget> getDirectPrerequisitesForTesting(

  353        Multimap<Label, DependencyKey> dependencyKeys, ConfiguredTargetAndData configuredTarget) {
  354:     // TODO(blaze-configurability): Figure out how to map the ConfiguredTarget back to the correct
  355      // DependencyKey when there are more than one.

  518      } catch (NoSuchPackageException | NoSuchTargetException e) {
  519:       // TODO(bazel-team): refactor this method so we actually throw an exception here (likely
  520        // {@link TransitionException}. Every version of getConfiguredTarget runs through this

src\test\java\com\google\devtools\build\lib\analysis\util\BuildViewTestBase.java:
  87      assertContainsEventWithFrequency(badpkgBuildFile.asFragment().getPathString(), 1);
  88:     // TODO(nharmata): This test currently only works because each BuildViewTest#update call
  89      // dirties all FileNodes that are in error. There is actually a skyframe bug with cycle

src\test\java\com\google\devtools\build\lib\analysis\util\BuildViewTestCase.java:
   441      List<String> allArgs = new ArrayList<>();
   442:     // TODO(dmarting): Add --stamp option only to test that requires it.
   443      allArgs.add("--stamp"); // Stamp is now defaulted to false.

   452  
   453:     // TODO(blaze-configurability): It would be nice to be able to do some starlark options loading
   454      // to ensure that the values given in this map are the right types for their keys.
   455:     // TODO(blaze-configurability): It is actually incorrect that build options are potentially
   456      // being explicitly set to their default values. In production, Starlark options set to their

   774    protected RuleContext getRuleContextForStarlark(ConfiguredTarget target) throws Exception {
   775:     // TODO(bazel-team): we need this horrible workaround because CachingAnalysisEnvironment
   776      // only works with StoredErrorEventListener despite the fact it accepts the interface

  1030     */
  1031:   // TODO(bazel-team): Should we work around b/26382502 by asserting here that the result is not
  1032    // null?

  1441      // Fall back: some tests don't actually need an artifact with an owner.
  1442:     // TODO(janakr): the tests that are passing in nonsense here should be changed.
  1443      return view.getArtifactFactory().getDerivedArtifact(rootRelativePath, root, owner);

  1974      } catch (Exception e) {
  1975:       // TODO(b/36585204): Clean this up
  1976        throw new RuntimeException(e);

  2058      if (!doAnalysis) {
  2059:       // TODO(bazel-team): What's supposed to happen in this case?
  2060        return null;

src\test\java\com\google\devtools\build\lib\analysis\util\TestAspects.java:
  978  
  979:   // TODO(b/65746853): provide a way to do this without passing the entire configuration
  980    private static final LabelListLateBoundDefault<?> PLUGINS_LABEL_LIST =

src\test\java\com\google\devtools\build\lib\bazel\commands\ModqueryExecutorTest.java:
  236  
  237:   // TODO(andreisolo): Add more eventual edge-case tests for the #expandAndPrune core method
  238  }

src\test\java\com\google\devtools\build\lib\bazel\repository\starlark\StarlarkRepositoryIntegrationTest.java:
  167      invalidatePackages();
  168:     // TODO(adonovan): make it easier to write loading-phase only WORKSPACE tests.
  169      AssertionError ex =

src\test\java\com\google\devtools\build\lib\bazel\rules\android\BazelAndroidLocalTestTest.java:
   33  
   34:   // TODO(b/161709111): With platforms, all tests fail with
   35    // "no attribute `$android_sdk_toolchain_type`" on AspectAwareAttributeMapper.

   96    public void testDeployJar() throws Exception {
   97:     // TODO(jingwen): Implement actual test.
   98    }

  101    public void testInferredJavaPackageFromPackageName() throws Exception {
  102:     // TODO(jingwen): Implement actual test.
  103    }

  106    public void testFeatureFlagPolicyIsNotUsedIfFlagValuesNotUsed() throws Exception {
  107:     // TODO(jingwen): Implement actual test.
  108    }

src\test\java\com\google\devtools\build\lib\bazel\rules\android\ndkcrosstools\AndroidNdkCrosstoolsTest.java:
  162          for (ToolPath toolpath : toolchain.getToolPathList()) {
  163:           // TODO(tmsriram): Not all crosstools contain llvm-profdata tool yet, remove
  164            // the check once llvm-profdata becomes always available.

src\test\java\com\google\devtools\build\lib\bazel\rules\python\BazelPyBinaryConfiguredTargetTest.java:
   97  
   98:   // TODO(#8169): Delete tests of the legacy --python_top / --python_path behavior.
   99  

  168  
  169:   // TODO(brandjon): Move generic toolchain tests that don't access legacy behavior to
  170    // PyExecutableConfiguredtargetTestBase. Asserting on the chosen PyRuntimeInfo is problematic to

src\test\java\com\google\devtools\build\lib\bazel\rules\python\BazelPythonConfigurationTest.java:
  79          "--python_top=//mypkg:my_py_runtime");
  80:     // TODO(#7901): Also test that --python_path is disallowed (once implemented). Currently we
  81      // still need it to communicate the location of python.exe on Windows from the client to the

src\test\java\com\google\devtools\build\lib\blackbox\tests\workspace\BazelEmbeddedStarlarkBlackBoxTest.java:
  120      // On Mac, set host config to use PY2 because our CI Mac workers don't have a Python 3 runtime.
  121:     // TODO(https://github.com/bazelbuild/continuous-integration/issues/578): Remove this
  122      // workaround.

  145  
  146:   // TODO(ichern) test tar quoting
  147  }

src\test\java\com\google\devtools\build\lib\blackbox\tests\workspace\WorkspaceBlackBoxTest.java:
  254    }
  255:   // TODO(ichern) move other tests from workspace_test.sh here.
  256  

src\test\java\com\google\devtools\build\lib\bugreport\BugReportTest.java:
   69   */
   70: // TODO(b/222158599): Remove handling for GoogleTestSecurityManager.
   71  @RunWith(TestParameterInjector.class)

  196  
  197:     // TODO(b/222158599): This should always be ExitException.
  198      SecurityException e = assertThrows(SecurityException.class, () -> BugReport.handleCrash(t));

  216  
  217:     // TODO(b/222158599): This should always be ExitException.
  218      SecurityException e =

src\test\java\com\google\devtools\build\lib\buildeventservice\BazelBuildEventServiceModuleTest.java:
  445  
  446:   // TODO(b/246912214): Deflake this by fixing the threading model to match the upstream gRPC
  447    // changes in https://github.com/grpc/grpc-java/pull/9319 that affect InProcessTransport.

  470  
  471:   // TODO(b/246912214): Deflake this by fixing the threading model to match the upstream gRPC
  472    // changes in https://github.com/grpc/grpc-java/pull/9319 that affect InProcessTransport.

src\test\java\com\google\devtools\build\lib\buildtool\BuildResultTestCase.java:
  132  
  133:     // TODO(bazel-team): figure out why error message is non-deterministic with Skyframe full.
  134      // LOADING_AND_ANALYSIS loading_and_analysis cleanup.

src\test\java\com\google\devtools\build\lib\buildtool\EnvironmentRestrictedBuildTest.java:
  36      if (mergedSkyframeAnalysisExecution) {
  37:       // TODO(b/223761810): Add --nobuild after Skymeld supports it.
  38        addOptions("--experimental_merged_skyframe_analysis_execution");

src\test\java\com\google\devtools\build\lib\buildtool\QueryIntegrationTest.java:
  446      }
  447:     // TODO(janakr): We emit duplicate events: in the ErrorPrintingTargetEdgeErrorObserver and in
  448      //  TransitiveTargetFunction. Should be able to remove one of them, most likely

  562      assertSuccessfulExitCode(result);
  563:     // TODO(b/151165647): fix the heuristic that incorrectly creates generator_location by//
  564      //  relativizing package name "p" relative to /foo/tmp/ regardless of segment boundaries.
  565:     // TODO(b/151151653): the output should contain only workspace-relative paths.
  566      String workspaceDir = getWorkspace().toString();

src\test\java\com\google\devtools\build\lib\buildtool\util\BuildIntegrationTestCase.java:
  208      events.setFailFast(false);
  209:     // TODO(mschaller): This will ignore any attempt by Blaze modules to provide a filesystem;
  210      // consider something better.

  573      runtimeWrapper.addOptions(TestConstants.PRODUCT_SPECIFIC_FLAGS);
  574:     // TODO(rosica): Remove this once g3 is migrated.
  575      runtimeWrapper.addOptions("--noincompatible_use_specific_tool_files");
  576:     // TODO(rosica): Remove this once g3 is migrated.
  577      runtimeWrapper.addOptions("--noincompatible_make_thinlto_command_lines_standalone");

src\test\java\com\google\devtools\build\lib\cmdline\LabelTest.java:
  388      assertSyntaxError(INVALID_TARGET_NAME, "//foo:./bar/baz");
  389:     // TODO(bazel-team): enable when we have removed the "Workaround" in Label
  390      // that rewrites broken Labels by removing the trailing '.'

src\test\java\com\google\devtools\build\lib\dynamic\DynamicSpawnStrategyTest.java:
  881      if (true) {
  882:       // TODO(b/177406907): jmmv@: I spent *days* trying to make these tests work reliably with the
  883        // new dynamic spawn scheduler implementation but I keep encountering tricky race conditions

src\test\java\com\google\devtools\build\lib\events\EventTestTemplate.java:
  19  // Without 'public', tests fail in the guts of junit reflection.
  20: // TODO(adonovan): copy this code into all subclasses.
  21  // This is yet another terrible use of 'extends'.

src\test\java\com\google\devtools\build\lib\events\util\EventCollectionApparatus.java:
  60    public void initExternal(Reporter reporter) {
  61:     // TODO(ulfjack): Changes to the EventCollectionApparatus are not reflected in the external
  62      // reporter, i.e., this is a one-shot change. Maybe we should store the external reporter here?

  93    /** An exception thrown by {@link #FAIL_FAST_HANDLER}. */
  94:   // TODO(bazel-team): Possibly extend RuntimeException instead of IllegalArgumentException.
  95    public static class FailFastException extends IllegalArgumentException {

src\test\java\com\google\devtools\build\lib\exec\StandaloneTestStrategyTest.java:
  326      ExecutionOptions executionOptions = Options.getDefaults(ExecutionOptions.class);
  327:     // TODO(ulfjack): Update this test for split xml generation.
  328      executionOptions.splitXmlGeneration = false;

src\test\java\com\google\devtools\build\lib\exec\local\LocalSpawnRunnerTest.java:
   133      // Rigged to act on supplied filesystem (e.g. InMemoryFileSystem) for testing purposes
   134:     // TODO(b/70572634): Update FileSystem abstraction to support createTempDirectory() from
   135      // the java.nio.file.Files package.

   370    public void vanillaZeroExit() throws Exception {
   371:     // TODO(#3536): Make this test work on Windows.
   372      // The Command API implicitly absolutizes the path, and we get weird paths on Windows:

   423    public void testParamFiles() throws Exception {
   424:     // TODO(#3536): Make this test work on Windows.
   425      // The Command API implicitly absolutizes the path, and we get weird paths on Windows:

   507    public void noProcessWrapper() throws Exception {
   508:     // TODO(#3536): Make this test work on Windows.
   509      // The Command API implicitly absolutizes the path, and we get weird paths on Windows:

   551    public void nonZeroExit() throws Exception {
   552:     // TODO(#3536): Make this test work on Windows.
   553      // The Command API implicitly absolutizes the path, and we get weird paths on Windows:

   660  
   661:     // TODO(ulfjack): Maybe we should only lock after checking?
   662      assertThat(policy.lockOutputFilesCalled).isTrue();

   948    public void hasExecutionStatistics_whenOptionIsEnabled() throws Exception {
   949:     // TODO(b/62588075) Currently no process-wrapper or execution statistics support in Windows.
   950      assumeTrue(OS.getCurrent() != OS.WINDOWS);

  1021    public void hasNoExecutionStatistics_whenOptionIsDisabled() throws Exception {
  1022:     // TODO(b/62588075) Currently no process-wrapper or execution statistics support in Windows.
  1023      assumeTrue(OS.getCurrent() != OS.WINDOWS);

  1085    public void relativePath() throws Exception {
  1086:     // TODO(#3536): Make this test work on Windows.
  1087      // The Command API implicitly absolutizes the path, and we get weird paths on Windows:

src\test\java\com\google\devtools\build\lib\generatedprojecttest\BuildFileContentsGeneratorTest.java:
  76    public void testContentsSyntax() throws IOException {
  77:     // TODO(blaze-team): (2012) write various simple generator examples to test the generated syntax
  78      TestProjectBuilder builder = new TestProjectBuilder("tmp");

src\test\java\com\google\devtools\build\lib\generatedprojecttest\util\RuleSetUtils.java:
  74        List<Attribute> li = new ArrayList<>(input.getAttributes());
  75:       // TODO(bazel-team): after the API migration we shouldn't check srcs separately
  76        boolean emptySrcsAllowed = input.hasAttr("srcs", BuildType.LABEL_LIST)

src\test\java\com\google\devtools\build\lib\generatedprojecttest\util\TestProjectBuilder.java:
  25  
  26: // TODO(blaze-team): (2012) generate valid parameterized BUILD rules.
  27: // TODO(blaze-team): (2012) generate any required src or data or other files.
  28  

src\test\java\com\google\devtools\build\lib\graph\DigraphConcurrentTest.java:
  118  
  119:       // TODO(dbabkin): think about moving this interrupt callback logic to common library or make
  120        // research, may be one exists already in any open source project.

src\test\java\com\google\devtools\build\lib\metrics\MetricsCollectorTest.java:
  501    public void testUsedHeapSizePostBuild() throws Exception {
  502:     // TODO(bazel-team): Fix recording used heap size on Windows.
  503      Assume.assumeTrue(OS.getCurrent() != OS.WINDOWS);

src\test\java\com\google\devtools\build\lib\packages\BazelStarlarkEnvironmentTest.java:
  54  
  55:   // TODO(#11954): We want BUILD- and WORKSPACE-loaded bzl files to have the exact same environment.
  56    // In the meantime these two tests help avoid regressions.

src\test\java\com\google\devtools\build\lib\packages\ConfigurationFragmentPolicyTest.java:
  122          .isTrue();
  123:     // TODO(b/140641941): .isFalse() when dynamic configurations care which configuration a fragment
  124      // was specified for

  127      assertThat(policy.isLegalConfigurationFragment(FragmentB.class)).isTrue();
  128:     // TODO(b/140641941): .isFalse() when dynamic configurations care which configuration a fragment
  129      // was specified for

src\test\java\com\google\devtools\build\lib\packages\NativeExistingRulesTest.java:
  449          ")",
  450:         // TODO(b/249397668): simplifying this to `json_encode = json.encode` etc. causes a
  451          // NoCodecException. Need to investigate.

  575          ")",
  576:         // TODO(b/249397668): simplifying this to `json_encode = json.encode` etc. causes a
  577          // NoCodecException. Need to investigate.

src\test\java\com\google\devtools\build\lib\packages\PackageFactoryTest.java:
   517  
   518:   // TODO(bazel-team): This is really a test for GlobCache.
   519    @Test

  1334     */
  1335:   // TODO(adonovan): these tests would be cleaner if they did print(glob(...)) as a side effect
  1336    // of package loading so that the caller of loadPackage can extract and return the value,

src\test\java\com\google\devtools\build\lib\packages\PackageGroupTest.java:
  116  
  117:   // TODO(brandjon): It'd be nice to include a test here that you can cross repositories via
  118    // `includes`: if package_group //:A includes package_group @repo//:B that has "//foo" in its

  299              "@other//z",
  300:             // TODO(#16323): When parsing is fixed, change this "//..." to "@other//...".
  301              "//...");

  313              "@other//z",
  314:             // TODO(#16323): When parsing is fixed, change this "//..." to "@other//...".
  315              "//...");

src\test\java\com\google\devtools\build\lib\packages\RuleClassTest.java:
   543  
   544:     // TODO(blaze-team): (2009) refactor to use assertContainsEvent
   545      Iterator<String> expectedMessages = Arrays.asList(

  1285  
  1286:     // TODO(https://github.com/bazelbuild/bazel/issues/14726): Add tests of optional toolchains.
  1287      ruleClassBuilder.addExecGroups(

src\test\java\com\google\devtools\build\lib\packages\RuleFactoryTest.java:
  232    /** Tests mandatory attribute definitions for test rules. */
  233:   // TODO(ulfjack): Remove this check when we switch over to the builder
  234    // pattern, which will always guarantee that these attributes are present.

src\test\java\com\google\devtools\build\lib\packages\RuleTest.java:
  39      Rule genRule = (Rule) getTarget("//namecollide:hello_world");
  40:     assertThat(genRule.containsErrors()).isFalse(); // TODO: assertTrue
  41      assertContainsEvent(

src\test\java\com\google\devtools\build\lib\packages\TypeTest.java:
  171      List<?> listOfCases = Lists.newArrayList("bad", "true", "auto", "false");
  172:     // TODO(adonovan): add booleans true, false to this list; see b/116691720.
  173      for (Object entry : listOfCases) {

src\test\java\com\google\devtools\build\lib\packages\WorkspaceFactoryTestHelper.java:
  36  /** Parses a WORKSPACE file with the given content. */
  37: // TODO(adonovan): delete this junk class.
  38  final class WorkspaceFactoryTestHelper {

src\test\java\com\google\devtools\build\lib\packages\util\BazelMockCcSupport.java:
  41    protected String getRealFilesystemCrosstoolTopPath() {
  42:     // TODO(b/195425240): Make real-filesystem mode work.
  43      return "";

  47    protected String[] getRealFilesystemTools(String crosstoolTop) {
  48:     // TODO(b/195425240): Make real-filesystem mode work.
  49      return new String[0];

  85    protected boolean shouldUseRealFileSystemCrosstool() {
  86:     // TODO(b/195425240): Workaround for lack of real-filesystem support.
  87      return false;

src\test\java\com\google\devtools\build\lib\packages\util\MockCcSupport.java:
  241    /** Writes a basic toolchain definition to keep the CC tests working. */
  242:   // TODO(cc-rules): Remove this when crosstool provides its own toolchain definitions.
  243    private void writeToolchainsForRealFilesystemTools(

src\test\java\com\google\devtools\build\lib\packages\util\MockObjcSupport.java:
   99  
  100:     // TODO(b/68751876): Set --apple_crosstool_top and --crosstool_top using the
  101      // AppleCrosstoolTransition

  219      // package with a few lingering dependencies.
  220:     // TODO(b/64537078): Move these dependencies underneath the tools workspace.
  221      if (TestConstants.TOOLS_REPOSITORY_SCRATCH.length() > 0) {

src\test\java\com\google\devtools\build\lib\packages\util\MockProtoSupport.java:
  185          "           srcs = [ 'context.go' ])");
  186:     // TODO(b/77901188): remove once j_p_l migration is complete
  187      config.create(

src\test\java\com\google\devtools\build\lib\pkgcache\CompileOneDependencyTransformerTest.java:
  327    public void testConfigurableSrcs() throws Exception {
  328:     // TODO(djasper): We currently flatten the contents of configurable attributes, which might not
  329      // always do the right thing. In this situation it is actually good as compiling "foo_select"

src\test\java\com\google\devtools\build\lib\pkgcache\PackageLoadingTest.java:
  324  
  325:     // TODO(bazel-team): (2009) test BUILD file moves in the other direction too.
  326    }

src\test\java\com\google\devtools\build\lib\pkgcache\TargetPatternEvaluatorTest.java:
  58    public final void createFiles() throws Exception {
  59:     // TODO(ulfjack): Also disable the implicit C++ outputs in Google's internal version.
  60      boolean hasImplicitCcOutputs =

src\test\java\com\google\devtools\build\lib\profiler\memory\AllocationTrackerTest.java:
  105      // using thread-local storage.
  106:     // TODO(b/149023294): update this when we use a compiled representation.
  107      exec(

src\test\java\com\google\devtools\build\lib\query2\cquery\BuildOutputFormatterCallbackTest.java:
  59      this.options = new CqueryOptions();
  60:     // TODO(bazel-team): reduce the confusion about these two seemingly similar settings.
  61      // options.aspectDeps impacts how proto and similar output formatters output aspect results.

src\test\java\com\google\devtools\build\lib\query2\cquery\GraphOutputFormatterCallbackTest.java:
  149  
  150:   // TODO(b/203203933): Replace "host" with "exec" throughout this test.
  151    @Test

src\test\java\com\google\devtools\build\lib\query2\cquery\ProtoOutputFormatterCallbackTest.java:
  63      this.options = new CqueryOptions();
  64:     // TODO(bazel-team): reduce the confusion about these two seemingly similar settings.
  65      // options.aspectDeps impacts how proto and similar output formatters output aspect results.

src\test\java\com\google\devtools\build\lib\query2\cquery\TransitionsOutputFormatterTest.java:
  238      options.transitions = verbosity;
  239:     // TODO(blaze-configurability): Test late-bound attributes.
  240      TransitionsOutputFormatterCallback callback =

src\test\java\com\google\devtools\build\lib\query2\testutil\AbstractQueryTest.java:
  1087      EvalThrowsResult result = evalThrows("//a:all", false);
  1088:     // TODO(mschaller): evalThrows's message can be non-deterministic if events are too. It probably
  1089      //  needs to be refactored to deal with underlying event non-determinism, because fixing query

  1361    public void testGraphOrderOfWildcards() throws Exception {
  1362:     // TODO(blaze-team): (2009) we could use some helpers for graph order tests.
  1363      writeFile(

  1389      if (!expected.equals(subgraph)) {
  1390:       // TODO(blaze-team): (2009) make this a utility method of Digraph.
  1391        System.err.println("Expected:");

src\test\java\com\google\devtools\build\lib\remote\GrpcCacheClientTest.java:
  1068  
  1069:     // TODO(ishikhman): add proper vaildation and flip to false
  1070      assertThat(GrpcCacheClient.isRemoteCacheOptions(options)).isTrue();

  1077  
  1078:     // TODO(ishikhman): add proper vaildation and flip to false
  1079      assertThat(GrpcCacheClient.isRemoteCacheOptions(options)).isTrue();

src\test\java\com\google\devtools\build\lib\remote\RemoteExecutionServiceTest.java:
  1651  
  1652:     // TODO: Would like to check that NestedSet.getNonLeaves() is only called once per node, but
  1653      //       cannot Mockito.spy on NestedSet as it is final.

src\test\java\com\google\devtools\build\lib\remote\RemoteSpawnRunnerTest.java:
  226      assertThat(requestCaptor.getValue().getExecutionPolicy().getPriority()).isEqualTo(2);
  227:     // TODO(olaola): verify that the uploaded action has the doNotCache set.
  228  

src\test\java\com\google\devtools\build\lib\remote\options\RemoteOptionsTest.java:
  67  
  68:     // TODO(buchgr): Use assertThrows once Bazel starts using junit > 4.13
  69      try {

src\test\java\com\google\devtools\build\lib\rules\android\AndroidBinaryTest.java:
  4805          "    manifest = 'AndroidManifest.xml',",
  4806:         // TODO(b/75051107): Remove the following line when fixed.
  4807          "    incremental_dexing = 0,",

src\test\java\com\google\devtools\build\lib\rules\android\AndroidDataBindingV2Test.java:
  1263      if (platformBasedToolchains()) {
  1264:       // TODO(b/161709111): With platforms, the below fails with
  1265        // "no attribute `$android_sdk_toolchain_type`" on AspectAwareAttributeMapper.

  1302      if (platformBasedToolchains()) {
  1303:       // TODO(b/161709111): With platforms, the below fails with
  1304        // "no attribute `$android_sdk_toolchain_type`" on AspectAwareAttributeMapper.

src\test\java\com\google\devtools\build\lib\rules\android\AndroidInstrumentationTestTest.java:
  119  
  120:   // TODO(ajmichael): Share this with AndroidDeviceTest.java
  121    private void setupTargetDevice() throws Exception {

src\test\java\com\google\devtools\build\lib\rules\android\AndroidLibraryTest.java:
  1956      if (platformBasedToolchains()) {
  1957:       // TODO(b/161709111): With platform, the call to sdk below produces a NullPointerException.
  1958        return;

src\test\java\com\google\devtools\build\lib\rules\android\AndroidPlatformsTest.java:
  124          (CppLinkAction) getGeneratingAction(getPrerequisiteArtifacts(x86Binary, "deps").get(0));
  125:     // TODO(blaze-team): replace with the commented line below when platform-based resolution works.
  126      assertThat(x86Link.getLinkCommandLine().getLinkerPathString()).isEqualTo("/usr/bin/mock-ar");

  135          (CppLinkAction) getGeneratingAction(getPrerequisiteArtifacts(armBinary, "deps").get(0));
  136:     // TODO(blaze-team): replace with the commented line below when platform-based resolution works.
  137      assertThat(armLink.getLinkCommandLine().getLinkerPathString()).isEqualTo("/usr/bin/mock-ar");

src\test\java\com\google\devtools\build\lib\rules\android\AndroidStarlarkTest.java:
  342      if (platformBasedToolchains()) {
  343:       // TODO(b/161709111): fails to find a matching Android toolchain.
  344        if (true) {

src\test\java\com\google\devtools\build\lib\rules\config\ConfigFeatureFlagTest.java:
  389      assertThat(getConfiguredTarget("//test:top")).isNull();
  390:     // TODO(b/140635901): when configurationError is implemented, switch to testing for that
  391      assertContainsEvent(

src\test\java\com\google\devtools\build\lib\rules\cpp\CcBinaryThinLtoTest.java:
  865      assertThat(backendAction.getArguments()).contains("acopt");
  866:     // TODO(b/122303926): Remove when nocopts are removed, or uncomment and fix if not removing.
  867      // assertThat(backendAction.getArguments()).doesNotContain("nocopt1");

src\test\java\com\google\devtools\build\lib\rules\cpp\CppLinkActionTest.java:
  321        // Skip the test on Windows.
  322:       // TODO(#7524): This test should work on Windows just fine, investigate and fix.
  323        return;

  371        // Skip the test on Windows.
  372:       // TODO(#7524): This test should work on Windows just fine, investigate and fix.
  373        return;

src\test\java\com\google\devtools\build\lib\rules\cpp\StarlarkCcCommonTest.java:
  1088    // test.
  1089:   // TODO(b/109917616): Remove pkgSuffix argument when bzl files are not cached within single test
  1090    private Sequence<String> commandLineForVariables(

src\test\java\com\google\devtools\build\lib\rules\cpp\proto\CcProtoLibraryTest.java:
  278  
  279:   // TODO(carmi): test blacklisted protos. I don't currently understand what's the wanted behavior.
  280  

src\test\java\com\google\devtools\build\lib\rules\java\JavaCompileActionTestHelper.java:
  23  
  24: // TODO(djasper): Investigate removing this class and moving the functions to JavaCompileAction.
  25  /**

src\test\java\com\google\devtools\build\lib\rules\java\JavaRuntimeTest.java:
  201    // bypass default toolchain flags added by BuildViewTestCase#useConfiguration
  202:   // TODO(cushon): delete this helper method once useConfiguration stops passing toolchain flags
  203    private void useConfigurationInternal(String... args) throws Exception {

src\test\java\com\google\devtools\build\lib\rules\java\proto\StarlarkJavaLiteProtoLibraryTest.java:
  232    @Ignore
  233:   // TODO(elenairina): Enable this test when proguard specs are supported in the Starlark version of
  234    // java_lite_proto_library OR delete this if Proguard support will be removed from Java rules.

  419    @Ignore
  420:   // TODO(elenairina): Enable this test when proto_java is returned from the aspect in Starlark
  421    // version of java_lite_proto_library.

src\test\java\com\google\devtools\build\lib\rules\objc\ApplePlatformsToolchainSelectionTest.java:
  102    public void testToolchainSelectionMacOs() throws Exception {
  103:     // TODO(b/210057756): Modify AppleConfiguration such that apple_platform_type is not needed for
  104      // platforms.

  143    public void testToolchainSelectionIosDevice() throws Exception {
  144:     // TODO(b/210057756): Modify AppleConfiguration such that apple_platform_type is not needed for
  145      // platforms.

src\test\java\com\google\devtools\build\lib\rules\objc\ObjcLibraryTest.java:
   222          "--macos_minimum_os=9.10.11",
   223:         // TODO(b/36126423): Darwin should imply macos, so the
   224          // following line should not be necessary.

  1014          .inOrder();
  1015:     // TODO: Add tests for //bin:bin once experimental_objc_binary is implemented
  1016    }

src\test\java\com\google\devtools\build\lib\rules\platform\PlatformTest.java:
  38    @Test
  39:   // TODO(https://github.com/bazelbuild/bazel/issues/6849): Remove this test when the functionality
  40    // is removed, but until then it still needs to be verified.

src\test\java\com\google\devtools\build\lib\rules\proto\ProtoInfoStarlarkApiTest.java:
  39    public void setUp() throws Exception {
  40:     useConfiguration("--proto_compiler=//proto:compiler"); // TODO check do we need that.
  41      scratch.file("proto/BUILD", "licenses(['notice'])", "exports_files(['compiler'])");

src\test\java\com\google\devtools\build\lib\rules\python\PyBinaryConfiguredTargetTest.java:
  209  
  210:   // TODO(brandjon): Add tests for content of stub Python script (particularly for choosing python
  211    // 2 or 3).

src\test\java\com\google\devtools\build\lib\rules\python\PythonVersionSelectTest.java:
  68  
  69:   // TODO(brandjon): Delete this test case when we delete these flags.
  70    @Test

src\test\java\com\google\devtools\build\lib\runtime\BlazeCommandDispatcherTest.java:
  557      assertThat(outErr.outAsLatin1()).isEqualTo("stdout");
  558:     // TODO(bazel-team): Fix inconsistent line breaks that make the regex match necessary.
  559      assertThat(outErr.errAsLatin1())

  600      assertThat(outErr.outAsLatin1()).isEqualTo("stdout");
  601:     // TODO(bazel-team): Fix inconsistent line breaks that make the regex match necessary.
  602      assertThat(outErr.errAsLatin1())

src\test\java\com\google\devtools\build\lib\runtime\SynchronizedOutputStreamTest.java:
  92  
  93:   // TODO(b/154242266): Make BES handle binary data correctly.
  94    @Ignore("b/154242266 - BES doesn't handle binary stdout/err correctly")

src\test\java\com\google\devtools\build\lib\sandbox\BaseRealSandboxfsProcessTest.java:
  122        //
  123:       // TODO(jmmv): This has become pretty awful. Should rethink unit testing.
  124        for (String response : responses) {

src\test\java\com\google\devtools\build\lib\sandbox\ProcessWrapperSandboxedSpawnRunnerTest.java:
   43    public void processWrapperSandboxedSpawnRunner_canRunEcho() throws Exception {
   44:     // TODO(b/62588075) Currently no process-wrapper support in windows.
   45      assumeTrue(OS.getCurrent() != OS.WINDOWS);

   88    public void hasExecutionStatistics_whenOptionIsEnabled() throws Exception {
   89:     // TODO(b/62588075) Currently no process-wrapper or execution statistics support in Windows.
   90      assumeTrue(OS.getCurrent() != OS.WINDOWS);

  161    public void hasNoExecutionStatistics_whenOptionIsDisabled() throws Exception {
  162:     // TODO(b/62588075) Currently no process-wrapper support in Windows.
  163      assumeTrue(OS.getCurrent() != OS.WINDOWS);

src\test\java\com\google\devtools\build\lib\sandbox\SpawnRunnerTestUtil.java:
  47  
  48: // TODO(b/62588075): Use this class for the LocalSpawnRunnerTest as well.
  49  /**

src\test\java\com\google\devtools\build\lib\shell\CommandUsingLinuxSandboxTest.java:
   70    public void testLinuxSandboxedCommand_echo() throws Exception {
   71:     // TODO(b/62588075) Currently no linux-sandbox tool support in Windows.
   72      assumeTrue(OS.getCurrent() != OS.WINDOWS);
   73:     // TODO(b/62588075) Currently no linux-sandbox tool support in MacOS.
   74      assumeTrue(OS.getCurrent() != OS.DARWIN);

  110        throws CommandException, IOException, InterruptedException {
  111:     // TODO(b/62588075) Currently no linux-sandbox tool support in Windows.
  112      assumeTrue(OS.getCurrent() != OS.WINDOWS);
  113:     // TODO(b/62588075) Currently no linux-sandbox tool support in MacOS.
  114      assumeTrue(OS.getCurrent() != OS.DARWIN);

  124        throws CommandException, IOException, InterruptedException {
  125:     // TODO(b/62588075) Currently no linux-sandbox tool support in Windows.
  126      assumeTrue(OS.getCurrent() != OS.WINDOWS);
  127:     // TODO(b/62588075) Currently no linux-sandbox tool support in MacOS.
  128      assumeTrue(OS.getCurrent() != OS.DARWIN);

  138        throws CommandException, IOException, InterruptedException {
  139:     // TODO(b/62588075) Currently no linux-sandbox tool support in Windows.
  140      assumeTrue(OS.getCurrent() != OS.WINDOWS);
  141:     // TODO(b/62588075) Currently no linux-sandbox tool support in MacOS.
  142      assumeTrue(OS.getCurrent() != OS.DARWIN);

src\test\java\com\google\devtools\build\lib\shell\ExecutionStatisticsTestUtil.java:
  49  
  50:     // TODO(b/110456205) This check fails under very heavy load, investigate why and re-enable it
  51      // Duration systemTimeUpperBound = systemTimeToSpend.plusSeconds(9);

  67  
  68:     // TODO(b/110456205) This check fails under very heavy load, investigate why and re-enable it
  69      // assertThat(systemTime).isAtMost(systemTimeUpperBound);

src\test\java\com\google\devtools\build\lib\skyframe\BuiltinsInjectionTest.java:
  451  
  452:   // TODO(#11437): Remove once disabling is not allowed.
  453    @Test

  470  
  471:   // TODO(#11437): Remove once disabling is not allowed.
  472    @Test

  487  
  488:   // TODO(#11954): Once WORKSPACE- and BUILD-loaded bzls use the exact same environments, we'll want
  489    // to apply injection to both. This is for uniformity, not because we actually care about builtins

  712  
  713:   // TODO(#11437): Verify whether this works for native-defined aspects as well.
  714  

src\test\java\com\google\devtools\build\lib\skyframe\FilesystemValueCheckerTest.java:
  1224    @Test
  1225:   // TODO(b/154337187): Remove the following annotation to re-enable once this test is de-flaked.
  1226    @Ignore

  1231    @Test
  1232:   // TODO(b/154337187): Remove the following annotation to re-enable once this test is de-flaked.
  1233    @Ignore

  1252    @Test
  1253:   // TODO(b/154337187): Remove the following annotation to re-enable once this test is de-flaked.
  1254    @Ignore

  1272    @Test
  1273:   // TODO(b/154337187): Remove the following annotation to re-enable once this test is de-flaked.
  1274    @Ignore

  1286  
  1287:   // TODO(bazel-team): Add some tests for FileSystemValueChecker#changedKeys*() methods.
  1288    // Presently these appear to be untested.

src\test\java\com\google\devtools\build\lib\skyframe\LocalDiffAwarenessIntegrationTest.java:
  106    public void changedFile_detectsChange() throws Exception {
  107:     // TODO(b/238606809): Understand why these tests are flaky on Mac. Probably real watchfs bug?
  108      assume().that(OS.getCurrent()).isNotEqualTo(OS.DARWIN);

  120    public void changedFile_statFails_throwsError() throws Exception {
  121:     // TODO(b/238606809): Understand why these tests are flaky on Mac. Probably real watchfs bug?
  122      assume().that(OS.getCurrent()).isNotEqualTo(OS.DARWIN);

src\test\java\com\google\devtools\build\lib\skyframe\LocalRepositoryLookupFunctionTest.java:
  315  
  316:   // TODO(katre): Add tests for the following exceptions
  317    // While reading dir/WORKSPACE:

src\test\java\com\google\devtools\build\lib\skyframe\PackageFunctionTest.java:
  1526  
  1527:     // TODO(brandjon): Invert this test once the prelude is a module instead of a syntactic
  1528      // mutation on BUILD files.

src\test\java\com\google\devtools\build\lib\skyframe\RecursiveFilesystemTraversalFunctionTest.java:
  691      // in the collection of files.
  692:     // TODO(#15901): Empty directories currently aren't representable as tree artifact contents and
  693      //  thus aren't tested here.

src\test\java\com\google\devtools\build\lib\skyframe\StarlarkBuiltinsFunctionTest.java:
  53  
  54:   // TODO(#11437): Add tests for predeclared env of BUILD (and WORKSPACE?) files, once
  55    // StarlarkBuiltinsFunction manages that functionality.

src\test\java\com\google\devtools\build\lib\skyframe\TimestampBuilderMediumTest.java:
  69  
  70:   // TODO(blaze-team): (2009) :
  71    // - test timestamp monotonicity is not required (i.e. set mtime backwards)

src\test\java\com\google\devtools\build\lib\skyframe\ToolchainResolutionFunctionTest.java:
  89  
  90:   // TODO(katre): Add further tests for optional/mandatory/mixed toolchains.
  91  

src\test\java\com\google\devtools\build\lib\skyframe\rewinding\RewindingTest.java:
  31  /** Tests for action rewinding on non-incremental builds. */
  32: // TODO(b/228090759): Add back actionFromPreviousBuildReevaluated when incrementality is supported.
  33  @RunWith(TestParameterInjector.class)

  66     */
  67:   // TODO(b/195425240): Remove once CPP compilation on bazel is supported. Assumptions that
  68    // generated headers are always under k8-opt will need to be relaxed to support other platforms.

src\test\java\com\google\devtools\build\lib\skyframe\rewinding\RewindingTestsHelper.java:
  617  
  618:     // TODO(b/228090759): Verify that deps are correct (see assertion that used to be here).
  619  

src\test\java\com\google\devtools\build\lib\starlark\StarlarkDefinedAspectsTest.java:
  6622  
  6623:     // TODO(b/206127051): This currently crashes with an IllegalStateException.
  6624      update(ImmutableList.of("test/defs.bzl%aspect_a", "test/defs.bzl%aspect_b"), "//test:bin");

src\test\java\com\google\devtools\build\lib\starlark\StarlarkIntegrationTest.java:
   435    // Precondition: 'expr' must have a 2-space indent and an error at column 12. Ugh.
   436:   // TODO(adonovan): rewrite this and similar tests as assertions over the error data
   437    // structure, not its formatting.

  2192  
  2193:     // TODO(cparsons): Verify implicit action registration via AnalysisTestResultInfo.
  2194    }

src\test\java\com\google\devtools\build\lib\starlark\StarlarkRuleClassFunctionsTest.java:
  1456    public void testStructCreation() throws Exception {
  1457:     // TODO(fwe): cannot be handled by current testing suite
  1458      ev.exec("x = struct(a = 1, b = 2)");

  1463    public void testStructFields() throws Exception {
  1464:     // TODO(fwe): cannot be handled by current testing suite
  1465      ev.exec("x = struct(a = 1, b = 2)");

  1548    public void testStructConcatenationFieldNames() throws Exception {
  1549:     // TODO(fwe): cannot be handled by current testing suite
  1550      ev.exec(

  1559    public void testStructConcatenationFieldValues() throws Exception {
  1560:     // TODO(fwe): cannot be handled by current testing suite
  1561      ev.exec(

  1582    public void testConditionalStructConcatenation() throws Exception {
  1583:     // TODO(fwe): cannot be handled by current testing suite
  1584      ev.exec(

src\test\java\com\google\devtools\build\lib\starlark\StarlarkRuleContextTest.java:
  2255      return linesAsString(
  2256:         // TODO(b/153667498): Just passing fail to map_each parameter of Args.add_all does not work.
  2257          "def fail_with_message(s):",

src\test\java\com\google\devtools\build\lib\starlark\StarlarkRuleImplementationFunctionsTest.java:
  205  
  206:   // TODO(adonovan): move these tests of Starlark interpreter core into net/starlark/java.
  207  

src\test\java\com\google\devtools\build\lib\starlark\util\BazelEvaluationTestCase.java:
   51  /** BazelEvaluationTestCase is a helper class for tests of Bazel loading-phase evaluation. */
   52: // TODO(adonovan): this helper class might be somewhat handy for testing core Starlark, but its
   53  // widespread use in tests of Bazel features greatly hinders the improvement of Bazel's loading

   84  
   85:   // TODO(adonovan): don't let subclasses inherit vaguely specified "helpers".
   86    // Separate all the tests clearly into tests of the scanner, parser, resolver,

   94    /** Updates a global binding in the module. */
   95:   // TODO(adonovan): rename setGlobal.
   96    @CanIgnoreReturnValue

  102    /** Returns the value of a global binding in the module. */
  103:   // TODO(adonovan): rename getGlobal.
  104    public Object lookup(String varname) throws Exception {

  126      // for testing rule implementation functions. It has phase LOADING, for example.
  127:     // TODO(adonovan): stop creating threads in tests. This is the responsibility of the
  128      // production code. Tests should provide only files and commands.

src\test\java\com\google\devtools\build\lib\testutil\BuildRuleWithDefaultsBuilder.java:
  211          if (BuildType.isLabelType(attribute.getType())) {
  212:           // TODO(bazel-team): actually an empty list would be fine in the case where
  213            // attribute instanceof ListType && !attribute.isNonEmpty(), but BuildRuleBuilder

  231          }
  232:         // TODO(bazel-team): populate for other data types
  233        } else if (heuristics) {

src\test\java\com\google\devtools\build\lib\testutil\TestConstants.java:
  134            "--host_platform=@local_config_platform//:host",
  135:           // TODO(#7849): Remove after flag flip.
  136            "--incompatible_use_toolchain_resolution_for_java_rules");

src\test\java\com\google\devtools\build\lib\testutil\TestRuleClassProvider.java:
   77      addStandardRules(builder);
   78:     // TODO(b/174773026): Eliminate TestingDummyRule/MockToolchainRule from this class, push them
   79      // down into the tests that use them. It's better for tests to avoid spooky mocks at a distance.

  105  
  106:   // TODO(bazel-team): The logic for the "minimal" rule class provider is currently split between
  107    // TestRuleClassProvider and BuiltinsInjectionTest's overrides of BuildViewTestCase setup helpers.

  113    public static void addMinimalRules(ConfiguredRuleClassProvider.Builder builder) {
  114:     // TODO(bazel-team): See also TrimmableTestConfigurationFragments#installFragmentsAndNativeRules
  115      // for alternative/additional setup. Consider factoring that one to use this method.

src\test\java\com\google\devtools\build\lib\testutil\UnknownRuleConfiguredTarget.java:
  42        throws InterruptedException, RuleErrorException, ActionConflictException {
  43:     // TODO(bazel-team): (2009) why isn't this an error?  It would stop the build more promptly...
  44      context.ruleWarning("cannot build " + context.getRule().getRuleClass() + " rules");

src\test\java\com\google\devtools\build\lib\util\ThreadUtilsTest.java:
  34  public class ThreadUtilsTest {
  35:   // TODO(b/150299871): inspecting the output of GoogleLogger or mocking it seems too hard for now.
  36    @Test

src\test\java\com\google\devtools\build\lib\vfs\DigestHashFunctionsTest.java:
  34    public static Collection<DigestHashFunction[]> hashFunctions() {
  35:     // TODO(b/112537387): Remove the array-ification and return Collection<DigestHashFunction>. This
  36      // is possible in Junit4.12, but 4.11 requires the array. Bazel 0.18 will have Junit4.12, so

src\test\java\com\google\devtools\build\lib\vfs\FileSystemTest.java:
  259  
  260:   // TODO(bazel-team): (2011) Put in a setLastModifiedTime into the various objects
  261    // and clobber the current time of the object we're currently handling.

src\test\java\com\google\devtools\build\lib\windows\WindowsFileSystemTest.java:
  97      assertThat(juncBadPath.exists(Symlinks.NOFOLLOW)).isTrue();
  98:     // TODO(bazel-team): fix https://github.com/bazelbuild/bazel/issues/1690 and uncomment the
  99      // assertion below.

src\test\java\com\google\devtools\build\skydoc\SkydocTest.java:
  54  @RunWith(JUnit4.class)
  55: // TODO(adonovan): Skydoc's tests should not depend on the analysis phase of Blaze.
  56  public final class SkydocTest extends BuildViewTestCase {

src\test\java\com\google\devtools\build\skyframe\GraphTester.java:
  183    public static class TestFunction {
  184:     // TODO(bazel-team): We could use a multiset here to simulate multi-pass dependency discovery.
  185      private final Set<Pair<SkyKey, SkyValue>> deps = new LinkedHashSet<>();

  285      public TestFunction setHasError(boolean hasError) {
  286:       // TODO(bazel-team): switch to an enum for hasError.
  287        this.hasError = hasError;

src\test\java\com\google\devtools\build\skyframe\MemoizingEvaluatorTest.java:
  2571  
  2572:   // TODO(mschaller): Enable test with other modes.
  2573:   // TODO(janakr): Test would actually pass if there was no invalidation/subsequent re-evaluation
  2574    // because duplicate reverse deps aren't detected until the child is dirtied, which isn't awesome.

  4413      if (includeTransientError) {
  4414:       // TODO(bazel-team): We can do better here once we implement change pruning for errors.
  4415        assertThat(tester.getEnqueuedValues()).containsExactly(topKey, transientErrorKey);

src\test\java\com\google\devtools\common\options\OptionsTest.java:
  88    public void paragraphFill() throws Exception {
  89:     // TODO(bazel-team): don't include trailing space after last word in line.
  90      String input = "The quick brown fox jumps over the lazy dog.";

src\test\java\net\starlark\java\eval\Benchmarks.java:
   33  
   34: // TODO(adonovan): document how to obtain a Java CPU profile.
   35  
   36: // TODO(adonovan): mitigate the effects of JVM warmup.
   37  // (See Oracle's JMH; we can't use it directly because it

  262        // Keep doubling the number of iterations until we exceed the deadline.
  263:       // TODO(adonovan): opt: extrapolate and predict the number of iterations
  264        // in the remaining time budget, being wary of extrapolation error.

src\test\java\net\starlark\java\eval\EvaluationTest.java:
  360  
  361:     // TODO(fwe): cannot be handled by current testing suite
  362      // list

src\test\java\net\starlark\java\eval\EvaluationTestCase.java:
  29  /** Helper class for tests that evaluate Starlark code. */
  30: // TODO(adonovan): simplify this class out of existence.
  31  // Most of its callers should be using the script-based test harness in net.starlark.java.eval.
  32: // TODO(adonovan): extended only by StarlarkFlagGuardingTest; specialize that one test instead.
  33  class EvaluationTestCase {

  50  
  51:   // TODO(adonovan): don't let subclasses inherit vaguely specified "helpers".
  52    // Separate all the tests clearly into tests of the scanner, parser, resolver,

  55    /** Updates a global binding in the module. */
  56:   // TODO(adonovan): rename setGlobal.
  57    @CanIgnoreReturnValue

  63    /** Returns the value of a global binding in the module. */
  64:   // TODO(adonovan): rename getGlobal.
  65    final Object lookup(String varname) throws Exception {

  84    // and return the module's client data value.
  85:   // TODO(adonovan): only used in StarlarkFlagGuardingTest; move there.
  86    protected Object newModuleHook(ImmutableMap.Builder<String, Object> predeclared) {

src\test\java\net\starlark\java\eval\Examples.java:
  91      // Compile the program, with additional predeclared environment bindings.
  92:     // TODO(adonovan): supply Starlark.UNIVERSE somehow.
  93      Program prog = Program.compileFile(file, Resolver.moduleWithPredeclared("zero", "square"));

  96  
  97:     // TODO(adonovan): when supported, show how the compiled program can be
  98      // saved and reloaded, to avoid repeating the cost of parsing and

src\test\java\net\starlark\java\eval\ScriptTest.java:
   55  
   56:   // TODO(adonovan): improve this test driver (following go.starlark.net):
   57    //

  252            //
  253:           // TODO(adonovan): the old logic checks only that each error is matched
  254            // by at least one expectation. Instead, ensure that errors

src\test\java\net\starlark\java\eval\StarlarkEvaluationTest.java:
    42  // There is no clear distinction between this and EvaluationTest.
    43: // TODO(adonovan): reorganize.
    44  @RunWith(JUnit4.class)

   924  
   925:   // TODO(adonovan): move this and all tests that use it to ResolverTest.
   926    private void assertResolutionError(String expectedError, final String... lines) throws Exception {

  1817    @Test
  1818:   // TODO(adonovan): move to ResolverTest.
  1819    public void testTypo() throws Exception {

src\test\java\net\starlark\java\eval\StarlarkListTest.java:
  30  /** Tests of StarlarkList's Java API. */
  31: // TODO(adonovan): duplicate/share these tests for Tuple where applicable.
  32  @RunWith(JUnit4.class)

src\test\java\net\starlark\java\eval\StarlarkThreadDebuggingTest.java:
   35  
   36:   // TODO(adonovan): rewrite these tests at a higher level.
   37  

  125  
  126:     // TODO(adonovan): more tests:
  127      // - a stack containing functions defined in different modules.

src\test\java\net\starlark\java\syntax\FileLocationsTest.java:
  20  /** Tests for {@link FileLocations}. */
  21: // TODO(adonovan): express this test in terms of the public API.
  22  @RunWith(JUnit4.class)

src\test\java\net\starlark\java\syntax\LexerTest.java:
   32  
   33:   // TODO(adonovan): make these these tests less unnecessarily stateful.
   34  

  269  
  270:     // TODO(adonovan): add tests for 0b binary literals
  271  

  614     */
  615:   // TODO(adonovan): move to ParserTest
  616    static SyntaxError assertContainsError(List<SyntaxError> errors, String substr) {

src\test\java\net\starlark\java\syntax\ParserTest.java:
  72        }
  73:       // TODO(adonovan): return these, and eliminate a stateful field.
  74        events.addAll(file.errors());

src\test\java\net\starlark\java\syntax\StarlarkFileTest.java:
  23  /** Tests of StarlarkFile parsing. */
  24: // TODO(adonovan): move tests of parsing into ParserTest.
  25  @RunWith(JUnit4.class)

  54    public void testImplicitStringConcatenationFails() throws Exception {
  55:     // TODO(adonovan): move to ParserTest.
  56      StarlarkFile file = parseFile("a = 'foo' 'bar'");

src\test\shell\integration\java_integration_test.sh:
  704      String cp = System.getProperty("java.class.path");
  705:     String[] jars = cp.split(":");  // TODO(bazel-team): this is ";" on Windows
  706      boolean singlejar

src\test\shell\integration\spend_cpu_time_windows.cc:
  17  int main(int argc, char** argv) {
  18:   // TODO(bazel-team): implement this program.
  19    std::cout << "ERROR: spend_cpu_time is not yet implemented on Windows."

src\tools\android\java\com\google\devtools\build\android\AndroidCompiledDataDeserializer.java:
   126    //
   127:   // TODO(b/143116130): aapt2 should just use protobuf directly instead of this custom
   128    // layer on top.

   321    /** Maintains state for all references in each package of a resource table. */
   322:   // TODO(b/112848607): Remove this!  This machinery is all really for pretty-printing styleables,
   323    // and only ever used for emitting XML with tools:keep attributes.

   394  
   395:   // TODO(b/146498565): remove this and use 'Configuration' directly, which is typesafe and free.
   396    private static List<String> convertToQualifiers(Configuration protoConfig) {

   955        } else {
   956:         // TODO(b/148817379): this next block of lines is forming an int with holes in it.
   957          int characterCount = byteBuffer.get(stringOffset) & 0xFFFF;

  1040        }
  1041:       // TODO(b/146647897): make resources private by default
  1042        return impliedPrivateResources.contains(resourceName)

src\tools\android\java\com\google\devtools\build\android\AndroidDataMerger.java:
  66        }
  67:       // TODO(corysmith): Is there a filesystem hash we can use?
  68        if (one.getFileSize() != two.getFileSize()) {

src\tools\android\java\com\google\devtools\build\android\AndroidDataSerializer.java:
  95      // can be associated with a value size.
  96:     // TODO(corysmith): Tune the size of the byte array.
  97      ByteArrayOutputStream valuesOutputStream = new ByteArrayOutputStream(2048);

src\tools\android\java\com\google\devtools\build\android\AndroidManifestProcessor.java:
  106     */
  107:   // TODO(corysmith): Extract manifest processing.
  108    public Path mergeManifest(

src\tools\android\java\com\google\devtools\build\android\AndroidParsedDataDeserializer.java:
  110  
  111:     // TODO(corysmith): Make this a lazy read of the values.
  112      for (Map.Entry<DataKey, KeyValueConsumer<DataKey, ?>> entry : keys.entrySet()) {

  120          // Skip files that were filtered out during analysis.
  121:         // TODO(asteinb): Properly filter out these files from android_library symbol files during
  122          // analysis instead, and remove this list.

  125        if (protoValue.hasXmlValue()) {
  126:         // TODO(corysmith): Figure out why the generics are wrong.
  127          // If I use Map<DataKey, KeyValueConsumer<DataKey, ? extends DataValue>>, I can put

src\tools\android\java\com\google\devtools\build\android\AndroidResourceMerger.java:
   29  /** Collects all the functionality for an action to merge resources. */
   30: // TODO(bazel-team): Turn into an instance object, in order to use an external ExecutorService.
   31  public class AndroidResourceMerger {

  169      Stopwatch timer = Stopwatch.createStarted();
  170:     // TODO(b/74333698): Always check the contents of conflicting resources
  171      try {

src\tools\android\java\com\google\devtools\build\android\AndroidResourceProcessor.java:
  196  
  197:   // TODO(bazel-team): Clean up this method call -- 18 params is too many.
  198    /**

src\tools\android\java\com\google\devtools\build\android\DataResourceXml.java:
   94      try {
   95:       // TODO(corysmith): Make the xml parsing more readable.
   96        for (StartElement resources = XmlResourceValues.moveToResources(eventReader);

  107                    // This is intentionally putting the "package" in the wrong place!
  108:                   // TODO: FullyQualifiedName.Factory#create has a overload which accepts "package".
  109                    : attribute.getName().getPrefix() + ":" + attribute.getName().getLocalPart();

  171    @SuppressWarnings("deprecation")
  172:   // TODO(corysmith): Update proto to use get<>Map
  173    public static DataValue from(SerializeFormat.DataValue protoValue, DataSource source)

  263        default:
  264:         // TODO(b/193025750): The current version of the layoutlib prebuilt used by Bazel does not
  265          // contain the macro type. This work around allows using macro resource types internally

  325        default:
  326:         // TODO(b/193025750): The current version of the layoutlib prebuilt used by Bazel does not
  327          // contain the macro type. This work around allows using macro resource types internally

  428  
  429:   // TODO(corysmith): Clean up all the casting. The type structure is unclean.
  430    @Override

src\tools\android\java\com\google\devtools\build\android\DataSource.java:
  95    /** Selects which DataSource should be considered the authoritative source of a value. */
  96:   // TODO(corysmith): Combine the sources so that we know both of the originating libraries.
  97    // For now, prefer sources that have explicit definitions (values/ and not layout/), since the

src\tools\android\java\com\google\devtools\build\android\DependencySymbolFileProvider.java:
  41      if (separatorIndex == -1) {
  42:       // TODO(laszlocsomor): remove support for ":" after 2018-02-28 (about 6 months from now).
  43        // Everyone should have updated to newer Bazel versions by then.

src\tools\android\java\com\google\devtools\build\android\FullyQualifiedName.java:
   57   */
   58: // TODO(b/146498565): remove and/or replace.  For normal resources this can just be a ResourceName
   59  // with Configuration, and the latter can come from aapt2 directly.  tools:* attributes should be a

   72    private final String pkg;
   73:   // TODO(b/146498565): use com.android.aapt.ConfigurationOuterClass.Configuration.
   74    private final ImmutableList<String> qualifiers;

  113      String pkg = rawPkg.isEmpty() ? DEFAULT_PACKAGE : rawPkg;
  114:     // TODO(corysmith): Address the GC thrash this creates by managing a simplified, mutable key to
  115      // do the instance check.

  197    public String toPrettyString() {
  198:     // TODO(corysmith): Add package when we start tracking it.
  199      return String.format(

  212     */
  213:   // TODO(corysmith): Combine this with toPathString to clean up the interface of FullyQualifiedName
  214    // logically, the FullyQualifiedName should just be able to provide the relative path string for

  683      private static String getSourceExtension(Path source) {
  684:       // TODO(corysmith): Find out if there is a filename parser utility.
  685        String fileName = source.getFileName().toString();

src\tools\android\java\com\google\devtools\build\android\MergeConflict.java:
  100          && primary.compareMergePriorityTo(overwritten) == 0
  101:         // TODO: SourceChecker can probably be removed, since the only no-op use is from AAR
  102          // generation (which shouldn't need to do these checks anyway).

src\tools\android\java\com\google\devtools\build\android\ParsedAndroidData.java:
  205      private V overwrite(K key, V overwriter, V overwritee) {
  206:       // TODO(corysmith): Cleanup type system.
  207        @SuppressWarnings("unchecked")

src\tools\android\java\com\google\devtools\build\android\ResourceProcessorBusyBox.java:
  260      } catch (Exception e) {
  261:       // TODO(jingwen): consider just removing this block.
  262        logger.log(Level.SEVERE, "Error during processing", e);

src\tools\android\java\com\google\devtools\build\android\ValidateAndLinkResourcesAction.java:
   53          deprecationWarning = "Use --resources.")
   54:     // TODO(b/64570523): Still used by blaze. Will be removed as part of the command line cleanup.
   55      @Deprecated

   77          deprecationWarning = "Use --resources.")
   78:     // TODO(b/64570523): Still used by blaze. Will be removed as part of the command line cleanup.
   79      @Deprecated

   91  
   92:     // TODO(b/64570523): remove this flag when it is no longer used.
   93      @Option(

  170        CompiledResources resources =
  171:           // TODO(b/64570523): Remove when the flags are standardized.
  172            Optional.ofNullable(options.resources)

  191  
  192:       // TODO(b/146663858): distinguish direct/transitive deps for "strict deps".
  193:       // TODO(b/128711690): validate AndroidManifest.xml
  194        checkVisibilityOfResourceReferences(

src\tools\android\java\com\google\devtools\build\android\XmlResourceValues.java:
  294  
  295:   // TODO(corysmith): Replace this with real escaping system, preferably a performant high level xml
  296    // writing library. See AndroidDataWritingVisitor TODO.

  342    /* XML helper methods follow. */
  343:   // TODO(corysmith): Move these to a wrapper class for XMLEventReader.
  344  

  396          Characters characters = nextEvent.asCharacters();
  397:         // TODO(corysmith): Turn into a warning with the Path is available to add to it.
  398          // This case is when unexpected characters are thrown into the xml. Best case, it's a

src\tools\android\java\com\google\devtools\build\android\ZipFilterAction.java:
  241  
  242:     // TODO(jingwen): Remove --errorOnHashMismatch when Blaze release with --checkHashMismatch
  243      // is checked in.

src\tools\android\java\com\google\devtools\build\android\aapt2\Aapt2ConfigOptions.java:
  138  
  139:   // TODO(b/136572475, b/112848607): remove this option
  140    @Option(

src\tools\android\java\com\google\devtools\build\android\aapt2\CompiledResources.java:
  39     */
  40:   // TODO(b/143382754): aapt2 should be serializing these directly.
  41    public static final String ATTRIBUTES_FILE_EXTENSION = ".attributes";

src\tools\android\java\com\google\devtools\build\android\aapt2\ProtoApk.java:
  427  
  428:   // TODO(72324748): Centralize duplicated code with AndroidCompiledDataDeserializer.
  429    private static List<String> decodeSourcePool(byte[] bytes) throws UnsupportedEncodingException {

  460        } else {
  461:         // TODO(b/148817379): this next block of lines is forming an int with holes in it.
  462          int characterCount = byteBuffer.get(stringOffset) & 0xFFFF;

  641  
  642:   // TODO(b/113166518): Remove when wearable apps have real references.
  643    // this doesn't belong in the protoapk, but has to be included for the time being.

src\tools\android\java\com\google\devtools\build\android\aapt2\ProtoResourceUsageAnalyzer.java:
  121      try {
  122:       // TODO(b/112810967): Remove reflection hack.
  123        final Method parseResourceTxtFile =

src\tools\android\java\com\google\devtools\build\android\aapt2\ResourceCompiler.java:
  173          // aapt2 only generates pseudo locales for the default locale.
  174:         // TODO(b/149251235): omit this file if the output is identical to the default config above.
  175          generatedResourcesOut.ifPresent(

src\tools\android\java\com\google\devtools\build\android\aapt2\ResourceLinker.java:
  636              .thenAdd("-v")
  637:             // TODO(b/138166830): Simplify behavior specific to number of densities. There's likely
  638              // little to lose in passing a single-element density list, which we would confirm in

src\tools\android\java\com\google\devtools\build\android\aapt2\StaticLibrary.java:
  106  
  107:   // TODO(b/64140845): aapt2 doesn't recognize .ap_ as a valid library.
  108    private static Path fixForAapt2(Path library) {

src\tools\android\java\com\google\devtools\build\android\desugar\io\HeaderClassLoader.java:
  61        ImmutableList<FieldInfo> interfaceFieldNames = getFieldsIfReaderIsInterface(reader);
  62:       // TODO(kmb): Consider SKIP_CODE and stubbing everything so class loader doesn't verify code
  63        reader.accept(new CodeStubber(writer, interfaceFieldNames), ClassReader.SKIP_DEBUG);

src\tools\android\java\com\google\devtools\build\android\desugar\io\ZipOutputFileProvider.java:
  57        throws IOException {
  58:     // TODO(bazel-team): Avoid de- and re-compressing resource files
  59      out.putNextEntry(outputEntry);

src\tools\android\java\com\google\devtools\build\android\desugar\langmodel\MethodInvocationSite.java:
   36  
   37:   // TODO(deltazulu): remove once bazel has been updated to the most recent autovalue library.
   38    @Override

  125  
  126:     // TODO(deltazulu): remove once bazel has been updated to the most recent autovalue library.
  127      @Override

src\tools\android\java\com\google\devtools\build\android\desugar\scan\KeepScanner.java:
  121      try (Closer closer = Closer.create()) {
  122:       // TODO(kmb): Try to share more of this code with Desugar binary
  123        IndexedInputs classpath =

src\tools\android\java\com\google\devtools\build\android\dexer\DexBuilder.java:
  176            // Deliberate catch-all so we can capture a stack trace.
  177:           // TODO(bazel-team): Consider canceling any outstanding futures created for this request
  178            e.printStackTrace(ps);

src\tools\android\java\com\google\devtools\build\android\dexer\DexFileArchive.java:
  29   */
  30: // TODO(kmb): Remove this class and inline into DexFileAggregator
  31  class DexFileArchive implements Closeable {

src\tools\android\java\com\google\devtools\build\android\dexer\DexFileSplitter.java:
  164        // if presented with a single jar containing all the given inputs.
  165:       // TODO(kmb): Abandon alphabetic sorting to process each input fully before moving on (still
  166        // requires scanning inputs twice for main dex list).

  305        // a byte buffer before effectively calling Dex(byte[]) anyway.
  306:       // TODO(kmb) since entry is stored, mmap content and give to Dex(ByteBuffer) and output zip
  307        byte[] content = new byte[(int) entry.getSize()];

src\tools\android\java\com\google\devtools\build\android\dexer\Dexing.java:
  149  
  150:       // TODO(bazel-team): Maybe we can use a minimal collision hash instead of full content
  151        return new AutoValue_Dexing_DexingKey(

src\tools\android\java\com\google\devtools\build\android\incrementaldeployment\IncrementalClassLoader.java:
  34  
  35:     // TODO(bazel-team): For some mysterious reason, we need to use two class loaders so that
  36      // everything works correctly. Investigate why that is the case so that the code can be

src\tools\android\java\com\google\devtools\build\android\r8\DependencyCollector.java:
  24   */
  25: // TODO(kmb): There could conceivably be a "self-contained" version where we check at the end that
  26  // we actually saw all the companion classes (in recordDefaultMethods) that we "assumed"; useful

src\tools\android\java\com\google\devtools\build\android\r8\Desugar.java:
  310      /** Set to work around b/62623509 with JaCoCo versions prior to 0.7.9. */
  311:     // TODO(kmb): Remove when Android Studio doesn't need it anymore (see b/37116789)
  312      @Option(

  433        }
  434:       // TODO(b/232351017): Remove this again.
  435        if (warning instanceof StringDiagnostic

src\tools\android\java\com\google\devtools\build\android\resources\ResourceSymbols.java:
  59        // NB: the inner map is working around a bug in R.txt generation!
  60:       // TODO(b/140643407): read directly without having to dedup by field name
  61        final Map<ResourceType, Map<String, FieldInitializer>> initializers = new TreeMap<>();

src\tools\android\java\com\google\devtools\build\android\xml\ArrayXmlResourceValue.java:
   96    private final Array array;
   97:   // TODO(b/112848607): remove the weakly-typed "values" member in favor of "array" above.
   98    private final ImmutableList<String> values;

  203      return Objects.equals(visibility, other.visibility)
  204:         // TODO(b/112848607): include the "array" proto in comparison; right now it's redundant.
  205          && Objects.equals(arrayType, other.arrayType)

src\tools\android\java\com\google\devtools\build\android\xml\AttrXmlResourceValue.java:
  480  
  481:   // TODO(corysmith): The ResourceXmlAttrValue implementors, other than enum and flag, share a
  482    // lot of boilerplate. Determine how to reduce it.

src\tools\android\java\com\google\devtools\build\android\xml\IdXmlResourceValue.java:
  157        Visibility mergedVisibility = Visibility.merge(visibility, otherId.visibility);
  158:       // TODO(b/26297204): add integration tests for these scenarios
  159        if (value == null && otherId.value != null) {

src\tools\android\java\com\google\devtools\build\android\xml\Namespaces.java:
  128      }
  129:     // TODO(corysmith): Issue error when prefixes are mapped to different uris.
  130      // Keeping behavior for backwards compatibility.

src\tools\android\java\com\google\devtools\build\android\xml\PluralXmlResourceValue.java:
   63    private final Plural plural;
   64:   // TODO(b/112848607): remove the weakly-typed "values" member in favor of "plural" above.
   65    private final ImmutableMap<String, String> values;

  133      return Objects.equals(visibility, other.visibility)
  134:         // TODO(b/112848607): include the "plural" proto in comparison; right now it's redundant.
  135          && Objects.equals(values, other.values)

src\tools\android\java\com\google\devtools\build\android\xml\SimpleXmlResourceValue.java:
  118    private final ImmutableMap<String, String> attributes;
  119:   // TODO(b/112848607): remove untyped "value" String in favor of "item" above.
  120    @Nullable private final String value;

  314              .setType(SerializeFormat.DataValueXml.XmlType.SIMPLE)
  315:             // TODO(corysmith): Find a way to avoid writing strings to the serialized format
  316              // it's inefficient use of space and costs more when deserializing.

  338          && Objects.equals(attributes, other.attributes)
  339:         // TODO(b/112848607): include the "item" proto in comparison; right now it's redundant.
  340          && Objects.equals(value, other.value);

src\tools\android\java\com\google\devtools\build\android\xml\StyleableXmlResourceValue.java:
   88    private final Styleable styleable;
   89:   // TODO(b/145837824,b/112848607): change to a set, if not removing this outright.  Per the Javadoc
   90    // for this class, the "should inline" bit is used to mimic how AAPT1 assigns IDs.

  209      }
  210:     // TODO(b/112848607): include the "styleable" proto in comparison; right now it's redundant.
  211      StyleableXmlResourceValue other = (StyleableXmlResourceValue) obj;

  252      }
  253:     // TODO(b/26297204): test that this makes sense and works
  254      return new StyleableXmlResourceValue(

src\tools\android\java\com\google\devtools\build\android\xml\StyleXmlResourceValue.java:
   71    private final Style style;
   72:   // TODO(b/112848607): remove parent/values in favor of "style" above, or replace the Strings with
   73    // stronger types.

  200          && Objects.equals(parent, other.parent)
  201:         // TODO(b/112848607): include the "style" proto in comparison; right now it's redundant.
  202          && Objects.equals(values, other.values);

src\tools\android\java\com\google\devtools\build\android\ziputils\SplitZip.java:
  480  
  481:   // TODO(bazel-team): Got this from 'dx'. I'm not sure we need this part. Keep it for now,
  482    // to make sure we read the main dex list the exact same way that dx would.

src\tools\android\java\com\google\devtools\build\android\ziputils\ZipIn.java:
  497        eocd = EndOfCentralDirectory.viewOf(buffer).at(offset + endOfDirOffset);
  498:       // TODO (bazel-team): check that the end of central directory, points to a valid
  499        // first directory entry. If not, assume we happened to find the signature inside

  528      // Read directory to buffer.
  529:     // TODO(bazel-team): we currently assume the directory fits in memory (and int).
  530      ByteBuffer buffer = ByteBuffer.allocateDirect((int) len);

src\tools\launcher\java_launcher.cc:
  113      wstring flag_value;
  114:     // TODO(pcloudy): Should rename this flag to --native_launcher_flag.
  115      // But keep it as it is for now to be consistent with the shell script

src\tools\remote\src\main\java\com\google\devtools\build\remote\worker\ByteStreamServer.java:
  84        // This still relies on the blob size to be small enough to fit in memory.
  85:       // TODO(olaola): refactor to fix this if the need arises.
  86        Chunker c =

src\tools\remote\src\main\java\com\google\devtools\build\remote\worker\ExecutionServer.java:
  131              // We use an unbounded queue for now.
  132:             // TODO(ulfjack): We need to reject work eventually.
  133              new LinkedBlockingQueue<>(),

  297  
  298:     // TODO(ulfjack): This is basically a copy of LocalSpawnRunner. Ideally, we'd use that
  299      // implementation instead of copying it.

src\tools\remote\src\main\java\com\google\devtools\build\remote\worker\OnDiskBlobStoreCache.java:
  66        Path dst = rootLocation.getRelative(symlink.getName());
  67:       // TODO(fmeum): The following line is not generally correct: The remote execution API allows
  68        //  for non-normalized symlink targets, but the normalization applied by PathFragment.create

src\tools\remote\src\main\java\com\google\devtools\build\remote\worker\RemoteWorker.java:
  165      } else {
  166:       // TODO(ulfjack): The plan is to make the on-disk storage the default, so we always need to
  167        // provide a path to the remote worker, and we can then also use that as the work path. E.g.:

src\tools\singlejar\combiners.cc:
  151    char *buf = reinterpret_cast<char *>(malloc(bytes_.data_size()));
  152:   // TODO(b/37631490): optimize this to avoid copying the bytes twice
  153    bytes_.CopyOut(reinterpret_cast<uint8_t *>(buf), &checksum);

src\tools\singlejar\combiners.h:
  122    void AddProperty(const char *key, const char *value) {
  123:     // TODO(asmundak): deduplicate properties.
  124      Append(key);

  130    void AddProperty(const std::string &key, const std::string &value) {
  131:     // TODO(asmundak): deduplicate properties.
  132      Append(key);

src\tools\singlejar\desugar_checking.cc:
  32  
  33:   // TODO(kmb): Wrap buffer_ as ZeroCopyInputStream to avoid copying out.
  34    // Note we only copy one file at a time, so overhead should be modest.

src\tools\singlejar\output_jar_simple_test.cc:
  657  
  658:   // TODO(asmundak): check the following generated entries, too:
  659    //  * services

src\tools\singlejar\output_jar.cc:
   103  
   104:   // TODO(b/28294322): do we need to resolve the path to be absolute or
   105    // canonical?

   173      const char *data_end = reinterpret_cast<const char *>(mapped_file.end());
   174:     // TODO(asmundak): this isn't right, we should parse properties file.
   175      while (data < data_end) {

   415        if (entry_info.combiner_ != nullptr) {
   416:         // TODO(kmb,asmundak): Should be checking Merge() return value but fails
   417          // for build-data.properties when merging deploy jars into deploy jars.

   691    lh->version(20);  // 2.0
   692:   lh->bit_flag(0);  // TODO(asmundak): should I set UTF8 flag?
   693    lh->compression_method(Z_NO_COMPRESSION);

   843    WriteEntry(protobuf_meta_handler_.OutputEntry(options_->force_compression));
   844:   // TODO(asmundak): handle manifest;
   845    off64_t output_position = Position();

   933            __FILE__, __LINE__, resource_name.c_str());
   934:       // TODO(asmundak): this mimics old behaviour. Confirm that unless
   935        // we run with --warn_duplicate_resources, the output zip file contains

  1009    }
  1010:   // TODO(asmundak):  Consider going back to sendfile() or reflink
  1011    // (BTRFS_IOC_CLONE/XFS_IOC_CLONE) here.  The launcher preamble can

src\tools\singlejar\singlejar_main.cc:
  23    OutputJar output_jar;
  24:   // TODO(b/67733424): support desugar deps checking in Bazel
  25    if (options.check_desugar_deps) {

src\tools\singlejar\transient_bytes.h:
  309    // The bytes are kept in an linked list of the DataBlock instances.
  310:   // TODO(asmundak): perhaps use mmap to allocate these?
  311    struct DataBlock {

third_party\android_dex\java\com\android\dex\Leb128.java:
  37      public static int unsignedLeb128Size(int value) {
  38:         // TODO: This could be much cleverer.
  39  

third_party\css\bootstrap\css\bootstrap.css.map:
  1: ⟪ 300895 characters skipped ⟫-right > .dropdown-menu {\n  right: 0;\n  left: auto;\n}\n\n// Allow for dropdowns to go bottom up (aka, dropup-menu)\n//\n// Just add .dropup after the standard .dropdown class and you're set, bro.\n// TODO: abstract this so that the navbar fixed styles are not placed here?\n\n.dropup,\n.navbar-fixed-bottom .dropdown {\n  // Reverse the caret\n  .caret {\n    border-top: 0;\n    border-bottom: @caret-width-base dashed;\n    border-bottom: @caret-width-base solid ~\"\\9\"; // IE8\n    content: \"\";\n  }\n  // Different positioning for bottom up menu\n  .dropdown-menu {\n    top: auto;\n    bottom: 100%;\n    margin-bottom: 2px;\n  }\n}\n\n\n// Component alignment\n//\n// Reiterate per navbar.less and the modified component alignment there.\n\n@media (min-width: @grid-float-breakpoint) {\n  .navbar-right {\n    .dropdown-menu {\n      .dropdown-menu-right();\n    }\n    // Necessary for overrides of the default right aligned menu.\n    // Will remove come v4 in all likelihood.\n    .dropdown-menu-left {\n      .dropdown-menu-left();\n    }\n  }\n}\n","// Horizontal dividers\n//\n// Dividers (basically an hr) within dropdowns and nav lists\n\n.nav-divider(@color: #e5e5e5) {\n  heigh

third_party\grpc-java\compiler\src\java_plugin\cpp\java_generator.cpp:
   171  
   172: // TODO(nmittler): Remove once protobuf includes javadoc methods in distribution.
   173  template <typename ITR>

   206  
   207: // TODO(nmittler): Remove once protobuf includes javadoc methods in distribution.
   208  static void GrpcSplitStringUsing(const std::string& full,

   214  
   215: // TODO(nmittler): Remove once protobuf includes javadoc methods in distribution.
   216  static std::vector<std::string> GrpcSplit(const std::string& full, const char* delim) {

   221  
   222: // TODO(nmittler): Remove once protobuf includes javadoc methods in distribution.
   223  static std::string GrpcEscapeJavadoc(const std::string& input) {

   280  
   281: // TODO(nmittler): Remove once protobuf includes javadoc methods in distribution.
   282  template <typename DescriptorType>

   291  
   292: // TODO(nmittler): Remove once protobuf includes javadoc methods in distribution.
   293  static std::vector<std::string> GrpcGetDocLines(const std::string& comments) {
   294    if (!comments.empty()) {
   295:     // TODO(kenton):  Ideally we should parse the comment text as Markdown and
   296      //   write it back as HTML, but this requires a Markdown parser.  For now

   311  
   312: // TODO(nmittler): Remove once protobuf includes javadoc methods in distribution.
   313  template <typename DescriptorType>

   317  
   318: // TODO(nmittler): Remove once protobuf includes javadoc methods in distribution.
   319  static void GrpcWriteDocCommentBody(Printer* printer,

   343  
   344: // TODO(nmittler): Remove once protobuf includes javadoc methods in distribution.
   345  static void GrpcWriteDocComment(Printer* printer, const std::string& comments) {

   351  
   352: // TODO(nmittler): Remove once protobuf includes javadoc methods in distribution.
   353  static void GrpcWriteServiceDocComment(Printer* printer,

   362  
   363: // TODO(nmittler): Remove once protobuf includes javadoc methods in distribution.
   364  void GrpcWriteMethodDocComment(Printer* printer,

   646      p->Print("\n");
   647:     // TODO(nmittler): Replace with WriteMethodDocComment once included by the protobuf distro.
   648      if (!interface) {

  1082    #endif
  1083:   // TODO(nmittler): Replace with WriteServiceDocComment once included by protobuf distro.
  1084    GrpcWriteServiceDocComment(p, service);

  1110  
  1111:   // TODO(nmittler): Replace with WriteDocComment once included by protobuf distro.
  1112    GrpcWriteDocComment(p, " Creates a new async stub that supports all call types for the service");

  1121  
  1122:   // TODO(nmittler): Replace with WriteDocComment once included by protobuf distro.
  1123    GrpcWriteDocComment(p, " Creates a new blocking-style stub that supports unary and streaming "

  1136  
  1137:   // TODO(nmittler): Replace with WriteDocComment once included by protobuf distro.
  1138    GrpcWriteDocComment(p, " Creates a new ListenableFuture-style stub that supports unary calls "

third_party\ijar\classfile.cc:
    17  
    18: // TODO(adonovan) don't pass pointers by reference; this is not
    19  // compatible with Google C++ style.

   112  
   113: // TODO(adonovan) these globals are unfortunate
   114  static std::vector<Constant*>        const_pool_in; // input constant pool

  1499      } else if (attr_name == "InnerClasses") {
  1500:       // TODO(bazel-team): omit private inner classes
  1501        attributes.push_back(InnerClassesAttribute::Read(p, attribute_name));

third_party\ijar\platform_utils.cc:
   77                    (info.dwFileAttributes & FILE_ATTRIBUTE_DIRECTORY);
   78:     // TODO(laszlocsomor): use info.nFileSizeHigh after we updated total_size to
   79      // be u8 type.
   80      result->total_size = is_dir ? 0 : info.nFileSizeLow;
   81:     // TODO(laszlocsomor): query the actual permissions and write in file_mode.
   82      result->file_mode = 0777;

  111  #ifndef _WIN32
  112:   // TODO(laszlocsomor): respect `mode` on Windows/MSVC.
  113    mode |= S_IWUSR | S_IXUSR;

third_party\ijar\zip.cc:
  709                                       end_of_central_dir, cd)) {
  710:     // TODO(b/228519294) Add a test for a valid zip64 file with total disks = 0
  711      if (disk_with_zip64_central_directory != 0 || zip64_total_disks > 1) {

third_party\ijar\test\StripVerifyingVisitor.java:
  71      // Always okay
  72:     // TODO(bazel-team): verify removal of leftover inner classes once implemented
  73:     // TODO(bazel-team): verify removal of private inner classes once implemented
  74    }

third_party\jarjar\java\com\tonicsystems\jarjar\DepFindVisitor.java:
  63            if (!source.equals(otherSource)) {
  64:             // TODO: some escape mechanism?
  65              handler.handle(curPathClass, new PathClass(otherSource, key));

third_party\jarjar\java\com\tonicsystems\jarjar\JarJarMojo.java:
  44        }
  45:       // TODO: refactor with Main.java
  46        MainProcessor proc = new MainProcessor(patterns, verbose, true);

third_party\jarjar\java\com\tonicsystems\jarjar\KeepProcessor.java:
   24  
   25: // TODO: this can probably be refactored into JarClassVisitor, etc.
   26  class KeepProcessor extends Remapper implements JarProcessor {

  102  
  103:   // TODO: use this for package remapping too?
  104    private static boolean isForName(String value) {

third_party\jarjar\java\com\tonicsystems\jarjar\Main.java:
  62  
  63:   // TODO: make level an enum
  64    public void find(String level, String cp1, String cp2) throws IOException {

third_party\jarjar\java\com\tonicsystems\jarjar\PackageRemapper.java:
  116        }
  117:       // TODO: add back class name to verbose message
  118        if (verbose && !s.equals(value)) {

third_party\jarjar\java\com\tonicsystems\jarjar\Wildcard.java:
  52  
  53:     // TODO: check for illegal characters
  54      char[] chars = result.toCharArray();

third_party\jarjar\java\com\tonicsystems\jarjar\ZapProcessor.java:
  38    private boolean zap(String desc) {
  39:     // TODO: optimize
  40      for (Wildcard wildcard : wildcards) {

third_party\jarjar\java\com\tonicsystems\jarjar\util\ClassHeaderReader.java:
  74        readUnsignedShort(6); // majorVersion
  75:       // TODO: check version
  76        int constant_pool_count = readUnsignedShort(8);

  81          int size;
  82:         buffer(index + 3); // TODO: reduce calls to buffer
  83          int tag = b[index];

third_party\jarjar\java\com\tonicsystems\jarjar\util\EntryStruct.java:
  29        if (name.startsWith("META-INF/version")) {
  30:         // TODO(b/69678527): handle multi-release jar files
  31          return false;

third_party\jarjar\java\com\tonicsystems\jarjar\util\JarTransformer.java:
  30        } catch (Exception e) {
  31:         return true; // TODO?
  32        }

third_party\jarjar\java\com\tonicsystems\jarjar\util\StandaloneJarProcessor.java:
  51            } else if (struct.name.endsWith("/")) {
  52:             // TODO(chrisn): log
  53            } else {

third_party\java\aosp_gradle_core\java\com\android\build\gradle\tasks\ResourceUsageAnalyzer.java:
   286      rewriteXml(rewrite, rewritten, deleted);
   287:     // TODO(apell): The graph traversal does not mark IDs as reachable or not, so they cannot be
   288      // accurately removed from public.xml, but the definitions may be deleted if they occur in

  1004          } else {
  1005:           // TODO(jongerrish): Implement stripping of styleables.
  1006          }

  1103              foundGetIdentifier = true;
  1104:             // TODO: Check previous instruction and see if we can find a literal
  1105              // String; if so, we can more accurately dispatch the resource here

  1275      // Override from parent ResourceUsageModel to fix <style> analysis bugs.
  1276:     // TODO(apell): remove this override once the packaged version of ResourceUsageModel includes
  1277      // these fixes. See inline comments for location of fixes.

  1413                    // as well as the more strict '@style/'.
  1414:                   // TODO(apell): Remove handling of 'style/' references when no longer supported
  1415                    // by AAPT.

third_party\java\proguard\proguard6.2.2\src\proguard\backport\LambdaExpressionConverter.java:
  191  
  192:                     // TODO: the special optimization in case there is only 1
  193                      //       parameter has been disabled as the used stack

third_party\java\proguard\proguard6.2.2\src\proguard\classfile\ClassConstants.java:
  216      public static final String ATTR_ModulePackages                       = "ModulePackages";
  217:     // TODO: More attributes.
  218      public static final String ATTR_CharacterRangeTable                  = "CharacterRangeTable";

third_party\java\proguard\proguard6.2.2\src\proguard\classfile\attribute\visitor\StackSizeComputer.java:
  119  
  120:         // TODO: Remove this when the code has stabilized.
  121          // Catch any unexpected exceptions from the actual visiting method.

third_party\java\proguard\proguard6.2.2\src\proguard\classfile\editor\AnnotationAdder.java:
  108  
  109:         // TODO: Clone array.
  110          newAnnotation.referencedClasses = annotation.referencedClasses;

  140  
  141:         // TODO: Clone array.
  142          newAnnotation.referencedClasses = annotation.referencedClasses;

third_party\java\proguard\proguard6.2.2\src\proguard\classfile\editor\AttributeAdder.java:
  363      {
  364:         // TODO: Implement method.
  365      }

  369      {
  370:         // TODO: Implement method.
  371      }

third_party\java\proguard\proguard6.2.2\src\proguard\classfile\editor\CodeAttributeComposer.java:
  692          {
  693:             // TODO: We're assuming we can adjust no offsets or all offsets at once.
  694              // Adjust the default jump offset.

  813          // Remap the code offset and length.
  814:         // TODO: The local variable frame might not be strictly preserved.
  815          int startPC = newInstructionOffset(localVariableInfo.u2startPC);

  827          // Remap the code offset and length.
  828:         // TODO: The local variable frame might not be strictly preserved.
  829          int startPC = newInstructionOffset(localVariableTypeInfo.u2startPC);

third_party\java\proguard\proguard6.2.2\src\proguard\classfile\editor\CodeAttributeEditor.java:
  505  
  506:         // TODO: Remove this when the code has stabilized.
  507          // Catch any unexpected exceptions from the actual visiting method.

third_party\java\proguard\proguard6.2.2\src\proguard\classfile\editor\ElementValueAdder.java:
  128  
  129:         // TODO: Clone array.
  130          newEnumConstantElementValue.referencedClasses = enumConstantElementValue.referencedClasses;

  147  
  148:         // TODO: Clone array.
  149          newClassElementValue.referencedClasses = classElementValue.referencedClasses;

third_party\java\proguard\proguard6.2.2\src\proguard\classfile\editor\LocalVariableTypeInfoAdder.java:
  61  
  62:         // TODO: Clone array.
  63          newLocalVariableTypeInfo.referencedClasses = localVariableTypeInfo.referencedClasses;

third_party\java\proguard\proguard6.2.2\src\proguard\classfile\editor\MemberAdder.java:
  126  
  127:         // TODO: Handle field with the same name and descriptor in the target class.
  128          // We currently avoid this case, since renaming the identical field

  266  
  267:             // TODO: Handle non-abstract method with the same name and descriptor in the target class.
  268              // We currently avoid this case, since renaming the identical method

third_party\java\proguard\proguard6.2.2\src\proguard\classfile\editor\TargetInfoCopier.java:
  67      {
  68:         // TODO: The supertype index (= interface number) is probably different in the target class.
  69          targetTypeAnnotation.targetInfo =

third_party\java\proguard\proguard6.2.2\src\proguard\classfile\editor\TypeAnnotationAdder.java:
  95  
  96:         // TODO: Clone array.
  97          newTypeAnnotation.referencedClasses = typeAnnotation.referencedClasses;

third_party\java\proguard\proguard6.2.2\src\proguard\configuration\ConfigurationLoggingAdder.java:
  76          // Load the logging utility classes in the program class pool.
  77:         // TODO: The initialization could be incomplete if the loaded classes depend on one another.
  78          ClassReader classReader =

third_party\java\proguard\proguard6.2.2\src\proguard\evaluation\Processor.java:
  292                      stack.push(valueFactory.createIntegerValue());
  293:                     // TODO: Forward ArithmeticExceptions.
  294                      //stack.clear();

  307                      stack.push(valueFactory.createLongValue());
  308:                     // TODO: Forward ArithmeticExceptions.
  309                      //stack.clear();

  330                      stack.push(valueFactory.createIntegerValue());
  331:                     // TODO: Forward ArithmeticExceptions.
  332                      //stack.clear();

  345                      stack.push(valueFactory.createLongValue());
  346:                     // TODO: Forward ArithmeticExceptions.
  347                      //stack.clear();

  611              {
  612:                 // TODO: Check cast.
  613                  ReferenceValue type = constantValueFactory.constantValue(clazz, constantIndex).referenceValue();

  641                  {
  642:                     // TODO: Use array lengths.
  643                      IntegerValue arrayLength = stack.ipop();

third_party\java\proguard\proguard6.2.2\src\proguard\io\ManifestRewriter.java:
  175          {
  176:             // TODO: We should actually count the Utf-8 bytes, not the characters.
  177              if (c == '\n')

third_party\java\proguard\proguard6.2.2\src\proguard\obfuscate\MappingPrinter.java:
  220                  }
  221:                 // TODO: There appear to be cases where the stack is empty at this point, so we've added a check.
  222                  else if (!enclosingLineNumbers.isEmpty())

  230              {
  231:                 // TODO: There appear to be cases where the stack is empty at this point, so we've added a check.
  232                  if (!enclosingLineNumbers.isEmpty())

third_party\java\proguard\proguard6.2.2\src\proguard\optimize\Optimizer.java:
   578                                      // This is a trade-off between performance and correctness.
   579:                                     // TODO: improve the marking for read / write fields after
   580                                      //       performance improvements have been implemented.

   585  
   586:                             // TODO: disabled for now, see comment above.
   587                              // Methods without editable optimization info, for

  1523                 classMergingWrapperCount               > 0 ||
  1524:                fieldRemovalWriteonlyCount             > 0 || // TODO: The write-only field counter may be optimistic about removal.
  1525                 fieldMarkingPrivateCount               > 0 ||

third_party\java\proguard\proguard6.2.2\src\proguard\optimize\evaluation\EvaluationShrinker.java:
  182  
  183:         // TODO: Remove this when the evaluation shrinker has stabilized.
  184          // Catch any unexpected exceptions from the actual visiting method.

third_party\java\proguard\proguard6.2.2\src\proguard\optimize\evaluation\EvaluationSimplifier.java:
  100  
  101:         // TODO: Remove this when the evaluation simplifier has stabilized.
  102          // Catch any unexpected exceptions from the actual visiting method.

third_party\java\proguard\proguard6.2.2\src\proguard\optimize\evaluation\InstructionUsageMarker.java:
  335  
  336:         // TODO: Remove this when the instruction usage marker has stabilized.
  337          // Catch any unexpected exceptions from the actual visiting method.

third_party\java\proguard\proguard6.2.2\src\proguard\optimize\evaluation\PartialEvaluator.java:
  224  
  225:         // TODO: Remove this when the partial evaluator has stabilized.
  226          // Catch any unexpected exceptions from the actual visiting method.

third_party\java\proguard\proguard6.2.2\src\proguard\optimize\info\EscapingClassMarker.java:
  154          // method.
  155:         // TODO: Refine check: is a value is downcast to an escaping class, while it is being returned?
  156          if (instruction.stackPushCount(clazz) == 1 &&

third_party\java\proguard\proguard6.2.2\src\proguard\optimize\info\MethodOptimizationInfo.java:
  240      {
  241:         // TODO: Refine for static methods.
  242          return

  249      {
  250:         // TODO: Refine for static methods.
  251          return

third_party\java\proguard\proguard6.2.2\src\proguard\optimize\info\ProgramMethodOptimizationInfo.java:
  396      {
  397:         // TODO: Refine for static methods.
  398          return

  408      {
  409:         // TODO: Refine for static methods.
  410          return

third_party\java\proguard\proguard6.2.2\src\proguard\optimize\peephole\ClassMerger.java:
  127  
  128:         // TODO: Remove this when the class merger has stabilized.
  129          // Catch any unexpected exceptions from the actual visiting method.

  423      {
  424:         // TODO: The list of subclasses is not up to date.
  425          return clazz.subClasses != null     &&

third_party\java\proguard\proguard6.2.2\src\proguard\optimize\peephole\LineNumberLinearizer.java:
  179  
  180:                 // TODO: There appear to be cases where the stack is empty at this point, so we've added a check.
  181                  else if (enclosingLineNumbers.isEmpty())

third_party\java\proguard\proguard6.2.2\src\proguard\optimize\peephole\MethodInliner.java:
  172      {
  173:         // TODO: Remove this when the method inliner has stabilized.
  174          // Catch any unexpected exceptions from the actual visiting method.

third_party\java\proguard\proguard6.2.2\src\proguard\optimize\peephole\TargetClassChanger.java:
  132  
  133:             // TODO: Maybe restore private method references.
  134          }

third_party\java\proguard\proguard6.2.2\src\proguard\optimize\peephole\UnreachableCodeRemover.java:
  84  
  85:         // TODO: Remove this when the code has stabilized.
  86          // Catch any unexpected exceptions from the actual visiting method.

third_party\java\proguard\proguard6.2.2\src\proguard\optimize\peephole\WrapperClassUseSimplifier.java:
  183                      // Do we have a special pop instruction?
  184:                     // TODO: May still fail with nested initializers.
  185                      if (popInstruction == null)

third_party\java\proguard\proguard6.2.2\src\proguard\preverify\CodePreverifier.java:
  83      {
  84:         // TODO: Remove this when the preverifier has stabilized.
  85          // Catch any unexpected exceptions from the actual visiting method.

third_party\java\proguard\proguard6.2.2\src\proguard\preverify\CodeSubroutineInliner.java:
  70  
  71:         // TODO: Remove this when the subroutine inliner has stabilized.
  72          // Catch any unexpected exceptions from the actual visiting method.

third_party\java\proguard\proguard6.2.2\src\proguard\shrink\AnnotationUsageMarker.java:
  189              // the annotation and then used.
  190:             // TODO: This could mark more annotation methods, affecting other annotations.
  191              classElementValue.referencedClassesAccept(usageMarker);

third_party\java\proguard\proguard6.2.2\src\proguard\shrink\UsageMarker.java:
  404              // if this is an interface itself.
  405:             // TODO: This may be premature if there aren't any concrete implementing classes.
  406              clazz.accept(new ClassAccessFilter(ClassConstants.ACC_INTERFACE, 0,

third_party\java\proguard\proguard6.2.2\src\proguard\util\ClassNameParser.java:
  121                  // Create a matcher for the wildcard.
  122:                 // TODO: The returned variable matcher is actually a composite that doesn't return the entire matched string.
  123                  nextMatcher = rememberVariableStringMatcher(

third_party\zlib\contrib\minizip\zip.c:
  729  
  730:     // TODO..
  731      // read the comment from the standard central header.

tools\cpp\runfiles\runfiles_src.cc:
  129        {"RUNFILES_DIR", directory},
  130:       // TODO(laszlocsomor): remove JAVA_RUNFILES once the Java launcher can
  131        // pick up RUNFILES_DIR.

tools\java\runfiles\Runfiles.java:
  253        result.put("RUNFILES_DIR", runfilesDir);
  254:       // TODO(laszlocsomor): remove JAVA_RUNFILES once the Java launcher can pick up RUNFILES_DIR.
  255        result.put("JAVA_RUNFILES", runfilesDir);

  278        result.put("RUNFILES_DIR", runfilesRoot);
  279:       // TODO(laszlocsomor): remove JAVA_RUNFILES once the Java launcher can pick up RUNFILES_DIR.
  280        result.put("JAVA_RUNFILES", runfilesRoot);

tools\jdk\DumpPlatformClassPath.java:
  223      // When targeting JDK >= 10, patch the major version so it will be accepted by javac 9
  224:     // TODO(cushon): remove this after updating javac
  225      if (bytes[7] > 53) {

tools\test\CoverageOutputGenerator\java\com\google\devtools\coverageoutputgenerator\GcovParser.java:
  67        String line;
  68:       // TODO(bazel-team): This is susceptible to OOM if the input file is too large and doesn't
  69        // contain any newlines.

tools\test\CoverageOutputGenerator\java\com\google\devtools\coverageoutputgenerator\Main.java:
  118          // coverage users.
  119:         // TODO(#5881): Add support for profdata files.
  120          try {

  139        // no way to merge them.
  140:       // TODO(#5881): Add support for profdata files.
  141        logger.log(

  377        for (String tracefile = reader.readLine(); tracefile != null; tracefile = reader.readLine()) {
  378:         // TODO(elenairina): baseline coverage contains some file names that need to be modified
  379          if (!tracefile.endsWith("baseline_coverage.dat")) {

tools\test\CoverageOutputGenerator\java\com\google\devtools\coverageoutputgenerator\SourceFileCoverage.java:
  101          // Preserve the LHS of the merge and drop the records on the RHS that conflict.
  102:         // TODO(cmita): Improve this as much as possible.
  103          merged.putAll(line, s1Branches);

tools\test\windows\tw.cc:
  565  
  566:   // TODO(ulfjack): Standardize on RUNFILES_DIR and remove the
  567    // {JAVA,PYTHON}_RUNFILES vars.

  962    return SetEnv(L"XML_OUTPUT_FILE", unix_result) &&
  963:          // TODO(ulfjack): Update Gunit to accept XML_OUTPUT_FILE and drop the
  964           // GUNIT_OUTPUT env variable.
